//go:build go1.22

// Package loanv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package loanv2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luikyv/mock-bank/internal/api"
	"github.com/luikyv/mock-bank/internal/timeutil"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2SecurityScopes = "OAuth2Security.Scopes"
	OpenIdScopes         = "OpenId.Scopes"
)

// Defines values for EnumContractAmortizationScheduled.
const (
	EnumContractAmortizationScheduledOUTROS                EnumContractAmortizationScheduled = "OUTROS"
	EnumContractAmortizationScheduledPRICE                 EnumContractAmortizationScheduled = "PRICE"
	EnumContractAmortizationScheduledSAC                   EnumContractAmortizationScheduled = "SAC"
	EnumContractAmortizationScheduledSAM                   EnumContractAmortizationScheduled = "SAM"
	EnumContractAmortizationScheduledSEMSISTEMAAMORTIZACAO EnumContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for EnumContractCalculation.
const (
	N21252 EnumContractCalculation = "21/252"
	N30360 EnumContractCalculation = "30/360"
	N30365 EnumContractCalculation = "30/365"
)

// Defines values for EnumContractFeeCharge.
const (
	FIXO       EnumContractFeeCharge = "FIXO"
	MAXIMO     EnumContractFeeCharge = "MAXIMO"
	MINIMO     EnumContractFeeCharge = "MINIMO"
	PERCENTUAL EnumContractFeeCharge = "PERCENTUAL"
)

// Defines values for EnumContractFeeChargeType.
const (
	PORPARCELA EnumContractFeeChargeType = "POR_PARCELA"
	UNICA      EnumContractFeeChargeType = "UNICA"
)

// Defines values for EnumContractFinanceChargeType.
const (
	EnumContractFinanceChargeTypeIOFCONTRATACAO               EnumContractFinanceChargeType = "IOF_CONTRATACAO"
	EnumContractFinanceChargeTypeIOFPORATRASO                 EnumContractFinanceChargeType = "IOF_POR_ATRASO"
	EnumContractFinanceChargeTypeJUROSMORAATRASO              EnumContractFinanceChargeType = "JUROS_MORA_ATRASO"
	EnumContractFinanceChargeTypeJUROSREMUNERATORIOSPORATRASO EnumContractFinanceChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	EnumContractFinanceChargeTypeMULTAATRASOPAGAMENTO         EnumContractFinanceChargeType = "MULTA_ATRASO_PAGAMENTO"
	EnumContractFinanceChargeTypeOUTROS                       EnumContractFinanceChargeType = "OUTROS"
	EnumContractFinanceChargeTypeSEMENCARGO                   EnumContractFinanceChargeType = "SEM_ENCARGO"
)

// Defines values for EnumContractInstalmentPeriodicity.
const (
	EnumContractInstalmentPeriodicityANUAL                   EnumContractInstalmentPeriodicity = "ANUAL"
	EnumContractInstalmentPeriodicityBIMESTRAL               EnumContractInstalmentPeriodicity = "BIMESTRAL"
	EnumContractInstalmentPeriodicityMENSAL                  EnumContractInstalmentPeriodicity = "MENSAL"
	EnumContractInstalmentPeriodicityOUTROS                  EnumContractInstalmentPeriodicity = "OUTROS"
	EnumContractInstalmentPeriodicityQUINZENAL               EnumContractInstalmentPeriodicity = "QUINZENAL"
	EnumContractInstalmentPeriodicitySEMANAL                 EnumContractInstalmentPeriodicity = "SEMANAL"
	EnumContractInstalmentPeriodicitySEMESTRAL               EnumContractInstalmentPeriodicity = "SEMESTRAL"
	EnumContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR EnumContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	EnumContractInstalmentPeriodicityTRIMESTRAL              EnumContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for EnumContractInterestRateType.
const (
	COMPOSTO EnumContractInterestRateType = "COMPOSTO"
	SIMPLES  EnumContractInterestRateType = "SIMPLES"
)

// Defines values for EnumContractProductSubTypeLoans.
const (
	CAPITALGIROPRAZOVENCIMENTOATE365DIAS      EnumContractProductSubTypeLoans = "CAPITAL_GIRO_PRAZO_VENCIMENTO_ATE_365_DIAS"
	CAPITALGIROPRAZOVENCIMENTOSUPERIOR365DIAS EnumContractProductSubTypeLoans = "CAPITAL_GIRO_PRAZO_VENCIMENTO_SUPERIOR_365_DIAS"
	CAPITALGIROTETOROTATIVO                   EnumContractProductSubTypeLoans = "CAPITAL_GIRO_TETO_ROTATIVO"
	CHEQUEESPECIAL                            EnumContractProductSubTypeLoans = "CHEQUE_ESPECIAL"
	CONTAGARANTIDA                            EnumContractProductSubTypeLoans = "CONTA_GARANTIDA"
	CREDITOPESSOALCOMCONSIGNACAO              EnumContractProductSubTypeLoans = "CREDITO_PESSOAL_COM_CONSIGNACAO"
	CREDITOPESSOALSEMCONSIGNACAO              EnumContractProductSubTypeLoans = "CREDITO_PESSOAL_SEM_CONSIGNACAO"
	HOMEEQUITY                                EnumContractProductSubTypeLoans = "HOME_EQUITY"
	MICROCREDITOPRODUTIVOORIENTADO            EnumContractProductSubTypeLoans = "MICROCREDITO_PRODUTIVO_ORIENTADO"
)

// Defines values for EnumContractProductTypeLoans.
const (
	EMPRESTIMOS EnumContractProductTypeLoans = "EMPRESTIMOS"
)

// Defines values for EnumContractReferentialRateIndexerSubType.
const (
	EnumContractReferentialRateIndexerSubTypeCDI                   EnumContractReferentialRateIndexerSubType = "CDI"
	EnumContractReferentialRateIndexerSubTypeIGPM                  EnumContractReferentialRateIndexerSubType = "IGPM"
	EnumContractReferentialRateIndexerSubTypeIPCA                  EnumContractReferentialRateIndexerSubType = "IPCA"
	EnumContractReferentialRateIndexerSubTypeIPCC                  EnumContractReferentialRateIndexerSubType = "IPCC"
	EnumContractReferentialRateIndexerSubTypeLIBOR                 EnumContractReferentialRateIndexerSubType = "LIBOR"
	EnumContractReferentialRateIndexerSubTypeOUTRASTAXASFLUTUANTES EnumContractReferentialRateIndexerSubType = "OUTRAS_TAXAS_FLUTUANTES"
	EnumContractReferentialRateIndexerSubTypeOUTRASTAXASPOSFIXADAS EnumContractReferentialRateIndexerSubType = "OUTRAS_TAXAS_POS_FIXADAS"
	EnumContractReferentialRateIndexerSubTypeOUTROSINDEXADORES     EnumContractReferentialRateIndexerSubType = "OUTROS_INDEXADORES"
	EnumContractReferentialRateIndexerSubTypeOUTROSINDICESPRECO    EnumContractReferentialRateIndexerSubType = "OUTROS_INDICES_PRECO"
	EnumContractReferentialRateIndexerSubTypePREFIXADO             EnumContractReferentialRateIndexerSubType = "PRE_FIXADO"
	EnumContractReferentialRateIndexerSubTypeSELIC                 EnumContractReferentialRateIndexerSubType = "SELIC"
	EnumContractReferentialRateIndexerSubTypeSEMSUBTIPOINDEXADOR   EnumContractReferentialRateIndexerSubType = "SEM_SUB_TIPO_INDEXADOR"
	EnumContractReferentialRateIndexerSubTypeTCRPOS                EnumContractReferentialRateIndexerSubType = "TCR_POS"
	EnumContractReferentialRateIndexerSubTypeTCRPRE                EnumContractReferentialRateIndexerSubType = "TCR_PRE"
	EnumContractReferentialRateIndexerSubTypeTJLP                  EnumContractReferentialRateIndexerSubType = "TJLP"
	EnumContractReferentialRateIndexerSubTypeTLP                   EnumContractReferentialRateIndexerSubType = "TLP"
	EnumContractReferentialRateIndexerSubTypeTRFCPOS               EnumContractReferentialRateIndexerSubType = "TRFC_POS"
	EnumContractReferentialRateIndexerSubTypeTRFCPRE               EnumContractReferentialRateIndexerSubType = "TRFC_PRE"
	EnumContractReferentialRateIndexerSubTypeTRTBF                 EnumContractReferentialRateIndexerSubType = "TR_TBF"
)

// Defines values for EnumContractReferentialRateIndexerType.
const (
	EnumContractReferentialRateIndexerTypeCREDITORURAL      EnumContractReferentialRateIndexerType = "CREDITO_RURAL"
	EnumContractReferentialRateIndexerTypeFLUTUANTES        EnumContractReferentialRateIndexerType = "FLUTUANTES"
	EnumContractReferentialRateIndexerTypeINDICESPRECOS     EnumContractReferentialRateIndexerType = "INDICES_PRECOS"
	EnumContractReferentialRateIndexerTypeOUTROSINDEXADORES EnumContractReferentialRateIndexerType = "OUTROS_INDEXADORES"
	EnumContractReferentialRateIndexerTypePOSFIXADO         EnumContractReferentialRateIndexerType = "POS_FIXADO"
	EnumContractReferentialRateIndexerTypePREFIXADO         EnumContractReferentialRateIndexerType = "PRE_FIXADO"
	EnumContractReferentialRateIndexerTypeSEMTIPOINDEXADOR  EnumContractReferentialRateIndexerType = "SEM_TIPO_INDEXADOR"
)

// Defines values for EnumContractTaxPeriodicity.
const (
	AA EnumContractTaxPeriodicity = "AA"
	AM EnumContractTaxPeriodicity = "AM"
)

// Defines values for EnumContractTaxType.
const (
	EFETIVA EnumContractTaxType = "EFETIVA"
	NOMINAL EnumContractTaxType = "NOMINAL"
)

// Defines values for EnumWarrantySubType.
const (
	EnumWarrantySubTypeACOESDEBENTURES                                                                      EnumWarrantySubType = "ACOES_DEBENTURES"
	EnumWarrantySubTypeACORDOSCOMPENSACAOLIQUIDACAOOBRIGACOES                                               EnumWarrantySubType = "ACORDOS_COMPENSACAO_LIQUIDACAO_OBRIGACOES"
	EnumWarrantySubTypeAPLICACOESFINANCEIRASRENDAFIXA                                                       EnumWarrantySubType = "APLICACOES_FINANCEIRAS_RENDA_FIXA"
	EnumWarrantySubTypeAPLICACOESFINANCEIRASRENDAVARIAVEL                                                   EnumWarrantySubType = "APLICACOES_FINANCEIRAS_RENDA_VARIAVEL"
	EnumWarrantySubTypeAPOLICESCREDITOEXPORTACAO                                                            EnumWarrantySubType = "APOLICES_CREDITO_EXPORTACAO"
	EnumWarrantySubTypeCCRCONVENIOCREDITOSRECIPROCOS                                                        EnumWarrantySubType = "CCR_CONVENIO_CREDITOS_RECIPROCOS"
	EnumWarrantySubTypeCHEQUES                                                                              EnumWarrantySubType = "CHEQUES"
	EnumWarrantySubTypeCIVIL                                                                                EnumWarrantySubType = "CIVIL"
	EnumWarrantySubTypeDEPOSITOSAVISTAAPRAZOPOUPANCAOUROTITULOSPUBLICOSFEDERAISART36                        EnumWarrantySubType = "DEPOSITOS_A_VISTA_A_PRAZO_POUPANCA_OURO_TITULOS_PUBLICOS_FEDERAIS_ART_36"
	EnumWarrantySubTypeDEPOSITOTITULOSEMITIDOSENTIDADESART23                                                EnumWarrantySubType = "DEPOSITO_TITULOS_EMITIDOS_ENTIDADES_ART_23"
	EnumWarrantySubTypeDIREITOSSOBREALUGUEIS                                                                EnumWarrantySubType = "DIREITOS_SOBRE_ALUGUEIS"
	EnumWarrantySubTypeDUPLICATAS                                                                           EnumWarrantySubType = "DUPLICATAS"
	EnumWarrantySubTypeEMDENTIDADESMULTILATERAISDESENVOLVIMENTOART37                                        EnumWarrantySubType = "EMD_ENTIDADES_MULTILATERAIS_DESENVOLVIMENTO_ART_37"
	EnumWarrantySubTypeEQUIPAMENTOS                                                                         EnumWarrantySubType = "EQUIPAMENTOS"
	EnumWarrantySubTypeESTADUALOUDISTRITAL                                                                  EnumWarrantySubType = "ESTADUAL_OU_DISTRITAL"
	EnumWarrantySubTypeFATURACARTAOCREDITO                                                                  EnumWarrantySubType = "FATURA_CARTAO_CREDITO"
	EnumWarrantySubTypeFCVSFUNDOCOMPENSACAOVARIACOESSALARIAIS                                               EnumWarrantySubType = "FCVS_FUNDO_COMPENSACAO_VARIACOES_SALARIAIS"
	EnumWarrantySubTypeFEDERAL                                                                              EnumWarrantySubType = "FEDERAL"
	EnumWarrantySubTypeFGIFUNDOGARANTIDORINVESTIMENTOS                                                      EnumWarrantySubType = "FGI_FUNDO_GARANTIDOR_INVESTIMENTOS"
	EnumWarrantySubTypeFGPCFUNDOGARANTIAPROMOCAOCOMPETIT                                                    EnumWarrantySubType = "FGPC_FUNDO_GARANTIA_PROMOCAO_COMPETIT"
	EnumWarrantySubTypeFGTSFUNDOGARANTIATEMPOSERVICO                                                        EnumWarrantySubType = "FGTS_FUNDO_GARANTIA_TEMPO_SERVICO"
	EnumWarrantySubTypeFUNDOGARANTIDORAVAL                                                                  EnumWarrantySubType = "FUNDO_GARANTIDOR_AVAL"
	EnumWarrantySubTypeGARANTIAPRESTADAFGPCLEI9531ART37                                                     EnumWarrantySubType = "GARANTIA_PRESTADA_FGPC_LEI_9531_ART_37"
	EnumWarrantySubTypeGARANTIAPRESTADAFUNDOSQUAISQUEROUTROSMECANISMOSCOBERTURARISCOCREDITOART37            EnumWarrantySubType = "GARANTIA_PRESTADA_FUNDOS_QUAISQUER_OUTROS_MECANISMOS_COBERTURA_RISCO_CREDITO_ART_37"
	EnumWarrantySubTypeGARANTIAPRESTADATESOURONACIONALOUBACENART37BENSDIREITOSINTEGRANTESPATRIMONIOAFETACAO EnumWarrantySubType = "GARANTIA_PRESTADA_TESOURO_NACIONAL_OU_BACEN_ART_37_BENS_DIREITOS_INTEGRANTES_PATRIMONIO_AFETACAO"
	EnumWarrantySubTypeIMOVEIS                                                                              EnumWarrantySubType = "IMOVEIS"
	EnumWarrantySubTypeIMOVEISRESIDENCIAIS                                                                  EnumWarrantySubType = "IMOVEIS_RESIDENCIAIS"
	EnumWarrantySubTypeMITIGADORAS                                                                          EnumWarrantySubType = "MITIGADORAS"
	EnumWarrantySubTypeMUNICIPAL                                                                            EnumWarrantySubType = "MUNICIPAL"
	EnumWarrantySubTypeNAOMITIGADORAS                                                                       EnumWarrantySubType = "NAO_MITIGADORAS"
	EnumWarrantySubTypeNOTASPROMISSORIASOUTROSDIREITOSCREDITO                                               EnumWarrantySubType = "NOTAS_PROMISSORIAS_OUTROS_DIREITOS_CREDITO"
	EnumWarrantySubTypeOUTRAS                                                                               EnumWarrantySubType = "OUTRAS"
	EnumWarrantySubTypeOUTROS                                                                               EnumWarrantySubType = "OUTROS"
	EnumWarrantySubTypeOUTROSBENS                                                                           EnumWarrantySubType = "OUTROS_BENS"
	EnumWarrantySubTypeOUTROSGRAUS                                                                          EnumWarrantySubType = "OUTROS_GRAUS"
	EnumWarrantySubTypeOUTROSIMOVEIS                                                                        EnumWarrantySubType = "OUTROS_IMOVEIS"
	EnumWarrantySubTypeOUTROSSEGUROSASSEMELHADOS                                                            EnumWarrantySubType = "OUTROS_SEGUROS_ASSEMELHADOS"
	EnumWarrantySubTypePESSOAFISICA                                                                         EnumWarrantySubType = "PESSOA_FISICA"
	EnumWarrantySubTypePESSOAFISICAEXTERIOR                                                                 EnumWarrantySubType = "PESSOA_FISICA_EXTERIOR"
	EnumWarrantySubTypePESSOAJURIDICA                                                                       EnumWarrantySubType = "PESSOA_JURIDICA"
	EnumWarrantySubTypePESSOAJURIDICAEXTERIOR                                                               EnumWarrantySubType = "PESSOA_JURIDICA_EXTERIOR"
	EnumWarrantySubTypePRIMEIROGRAUBENSDIREITOSINTEGRANTESPATRIMONIOAFETACAO                                EnumWarrantySubType = "PRIMEIRO_GRAU_BENS_DIREITOS_INTEGRANTES_PATRIMONIO_AFETACAO"
	EnumWarrantySubTypePRIMEIROGRAUIMOVEISRESIDENCIAIS                                                      EnumWarrantySubType = "PRIMEIRO_GRAU_IMOVEIS_RESIDENCIAIS"
	EnumWarrantySubTypePRIMEIROGRAUOUTROS                                                                   EnumWarrantySubType = "PRIMEIRO_GRAU_OUTROS"
	EnumWarrantySubTypePROAGRO                                                                              EnumWarrantySubType = "PROAGRO"
	EnumWarrantySubTypePRODUTOSAGROPECUARIOSCOMWARRANT                                                      EnumWarrantySubType = "PRODUTOS_AGROPECUARIOS_COM_WARRANT"
	EnumWarrantySubTypePRODUTOSAGROPECUARIOSSEMWARRANT                                                      EnumWarrantySubType = "PRODUTOS_AGROPECUARIOS_SEM_WARRANT"
	EnumWarrantySubTypeSBCESOCIEDADEBRASILEIRACREDITOEXPORTAÇÃO                                             EnumWarrantySubType = "SBCE_SOCIEDADE_BRASILEIRA_CREDITO_EXPORTAÇÃO"
	EnumWarrantySubTypeSEGURORURAL                                                                          EnumWarrantySubType = "SEGURO_RURAL"
	EnumWarrantySubTypeSEMSUBTIPOGARANTIA                                                                   EnumWarrantySubType = "SEM_SUB_TIPO_GARANTIA"
	EnumWarrantySubTypeTRIBUTOSRECEITASORCAMENTARIAS                                                        EnumWarrantySubType = "TRIBUTOS_RECEITAS_ORCAMENTARIAS"
	EnumWarrantySubTypeVEICULOS                                                                             EnumWarrantySubType = "VEICULOS"
	EnumWarrantySubTypeVEICULOSAUTOMOTORES                                                                  EnumWarrantySubType = "VEICULOS_AUTOMOTORES"
)

// Defines values for EnumWarrantyType.
const (
	ACORDOSCOMPENSACAO                 EnumWarrantyType = "ACORDOS_COMPENSACAO"
	ALIENACAOFIDUCIARIA                EnumWarrantyType = "ALIENACAO_FIDUCIARIA"
	BENSARRENDADOS                     EnumWarrantyType = "BENS_ARRENDADOS"
	CAUCAO                             EnumWarrantyType = "CAUCAO"
	CESSAODIREITOSCREDITORIOS          EnumWarrantyType = "CESSAO_DIREITOS_CREDITORIOS"
	GARANTIAFIDEJUSSORIA               EnumWarrantyType = "GARANTIA_FIDEJUSSORIA"
	GARANTIASINTERNACIONAIS            EnumWarrantyType = "GARANTIAS_INTERNACIONAIS"
	HIPOTECA                           EnumWarrantyType = "HIPOTECA"
	OPERACOESGARANTIDASOUTRASENTIDADES EnumWarrantyType = "OPERACOES_GARANTIDAS_OUTRAS_ENTIDADES"
	OPERACOESGARANTIDASPELOGOVERNO     EnumWarrantyType = "OPERACOES_GARANTIDAS_PELO_GOVERNO"
	OUTRASGARANTIASNAOFIDEJUSSORIAS    EnumWarrantyType = "OUTRAS_GARANTIAS_NAO_FIDEJUSSORIAS"
	PENHOR                             EnumWarrantyType = "PENHOR"
	SEGUROSASSEMELHADOS                EnumWarrantyType = "SEGUROS_ASSEMELHADOS"
)

// Defines values for LoansInstalmentsTypeContractRemaining.
const (
	LoansInstalmentsTypeContractRemainingANO                  LoansInstalmentsTypeContractRemaining = "ANO"
	LoansInstalmentsTypeContractRemainingDIA                  LoansInstalmentsTypeContractRemaining = "DIA"
	LoansInstalmentsTypeContractRemainingMES                  LoansInstalmentsTypeContractRemaining = "MES"
	LoansInstalmentsTypeContractRemainingSEMANA               LoansInstalmentsTypeContractRemaining = "SEMANA"
	LoansInstalmentsTypeContractRemainingSEMPRAZOREMANESCENTE LoansInstalmentsTypeContractRemaining = "SEM_PRAZO_REMANESCENTE"
)

// Defines values for LoansInstalmentsTypeNumberOfInstalments.
const (
	LoansInstalmentsTypeNumberOfInstalmentsANO           LoansInstalmentsTypeNumberOfInstalments = "ANO"
	LoansInstalmentsTypeNumberOfInstalmentsDIA           LoansInstalmentsTypeNumberOfInstalments = "DIA"
	LoansInstalmentsTypeNumberOfInstalmentsMES           LoansInstalmentsTypeNumberOfInstalments = "MES"
	LoansInstalmentsTypeNumberOfInstalmentsSEMANA        LoansInstalmentsTypeNumberOfInstalments = "SEMANA"
	LoansInstalmentsTypeNumberOfInstalmentsSEMPRAZOTOTAL LoansInstalmentsTypeNumberOfInstalments = "SEM_PRAZO_TOTAL"
)

// EnumContractAmortizationScheduled Sistema de amortização (Vide Enum):
// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
// - SEM SISTEMA DE AMORTIZAÇÃO
type EnumContractAmortizationScheduled string

// EnumContractCalculation Base de cálculo
type EnumContractCalculation string

// EnumContractFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type EnumContractFeeCharge string

// EnumContractFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type EnumContractFeeChargeType string

// EnumContractFinanceChargeType Tipo de encargo pactuado no contrato.
type EnumContractFinanceChargeType string

// EnumContractInstalmentPeriodicity "Informação relativa à periodicidade regular das parcelas. (Vide Enum)
// sem periodicidade regular, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual"
type EnumContractInstalmentPeriodicity string

// EnumContractInterestRateType "Tipo de Juros  (vide  Enum)
// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
type EnumContractInterestRateType string

// EnumContractProductSubTypeLoans Sub tipo da modalidades de crédito Empréstimos contratadas, conforme  circular 4.015 e descrição do DOC3040 do SCR).
type EnumContractProductSubTypeLoans string

// EnumContractProductTypeLoans Tipo da modalidade de crédito contratada, conforme  circular 4.015 e descrição do DOC3040 do SCR).
type EnumContractProductTypeLoans string

// EnumContractReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type EnumContractReferentialRateIndexerSubType string

// EnumContractReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type EnumContractReferentialRateIndexerType string

// EnumContractTaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
// a.m - ao mês
// a.a. - ao ano"
type EnumContractTaxPeriodicity string

// EnumContractTaxType "Tipo de Taxa (vide  Enum)
// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
type EnumContractTaxType string

// EnumWarrantySubType Denominação/Identificação do sub tipo da garantia que avaliza a Modalidade da Operação de Crédito contratada (Doc 3040, Anexo 12).
type EnumWarrantySubType string

// EnumWarrantyType Denominação/Identificação do tipo da garantia que avaliza a Modalidade da Operação de Crédito contratada  (Doc 3040, Anexo 12)
type EnumWarrantyType string

// LoansBalloonPayment Lista que traz as datas de vencimento e valor das parcelas não regulares  do contrato da modalidade de crédito consultada.
type LoansBalloonPayment struct {
	// Amount Valor monetário da parcela não regular a vencer.
	Amount LoansBalloonPaymentAmount `json:"amount"`

	// DueDate 'Data de vencimento da parcela não regular  a vencer do contrato da modalidade de crédito consultada, conforme especificação RFC-3339. p.ex. 2014-03-19'
	DueDate timeutil.BrazilDate `json:"dueDate"`
}

// LoansBalloonPaymentAmount Valor monetário da parcela não regular a vencer.
type LoansBalloonPaymentAmount struct {
	// Amount Valor monetário da parcela não regular a vencer. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
	Amount string `json:"amount"`

	// Currency Moeda referente ao valor monetário, seguindo o modelo ISO-4217.
	Currency string `json:"currency"`
}

// LoansChargeOverParcel defines model for LoansChargeOverParcel.
type LoansChargeOverParcel struct {
	// ChargeAdditionalInfo Campo livre para preenchimento das informações adicionais referente ao encargo.
	//
	// [Restrição] Obrigatório quando chargeType for igual 'OUTROS'.
	ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

	// ChargeAmount Valor do pagamento do encargo pago fora da parcela. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
	ChargeAmount string `json:"chargeAmount"`

	// ChargeType Tipo de encargo pactuado no contrato.
	ChargeType EnumContractFinanceChargeType `json:"chargeType"`
}

// LoansContract Conjunto de informações referentes à identificação da operação de crédito de empréstimo
type LoansContract struct {
	// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas).
	//
	// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
	//
	// Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
	//
	// - Em contratos anteriores a 2008 (para o público PF);
	// - Em contratos anteriores a 2011 (para o público PJ);
	// - Público PJ de médio ou grande porte.
	CET string `json:"CET"`

	// AmortizationScheduled Sistema de amortização (Vide Enum):
	// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
	// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
	// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
	// - SEM SISTEMA DE AMORTIZAÇÃO
	AmortizationScheduled EnumContractAmortizationScheduled `json:"amortizationScheduled"`

	// AmortizationScheduledAdditionalInfo Campo obrigatório para complementar a informação relativa à amortização quando selecionada a opção OUTROS.
	AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

	// CnpjConsignee CNPJ do consignante (CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica).
	//
	// Deve-se ter apenas os números do CNPJ, sem máscara.
	//
	// [Restrição] Informação adicional específica para quando o productSubType for igual a CREDITO_PESSOAL_COM_CONSIGNACAO
	CnpjConsignee *string `json:"cnpjConsignee,omitempty"`

	// ContractAmount Valor contratado da operação. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais. Nos casos em que não houver este valor explícito no contrato do produto, enviar como 0.00
	ContractAmount string `json:"contractAmount"`

	// ContractDate Data de contratação da operação de crédito. Especificação RFC-3339
	ContractDate timeutil.BrazilDate `json:"contractDate"`

	// ContractNumber Número do contrato dado pela instituição contratante.
	ContractNumber string `json:"contractNumber"`

	// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
	ContractedFees []LoansContractedFee `json:"contractedFees"`

	// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
	ContractedFinanceCharges []LoansFinanceCharge `json:"contractedFinanceCharges"`

	// Currency Moeda referente ao valor da garantia, segundo modelo ISO-4217. p.ex. 'BRL'
	// Todos os valores monetários informados estão representados com a moeda vigente do Brasil
	Currency *string `json:"currency,omitempty"`

	// DisbursementDates Lista que traz as Datas de Desembolso do valor contratado.
	DisbursementDates *[]timeutil.BrazilDate `json:"disbursementDates,omitempty"`

	// DueDate Data de vencimento Final da operação. Especificação RFC-3339. Informação deve ser enviada caso ela exista.
	DueDate *timeutil.BrazilDate `json:"dueDate,omitempty"`

	// FirstInstalmentDueDate Data de vencimento primeira parcela do principal.
	// Informação deve ser enviada caso ela exista.
	FirstInstalmentDueDate *timeutil.BrazilDate `json:"firstInstalmentDueDate,omitempty"`

	// InstalmentPeriodicity "Informação relativa à periodicidade regular das parcelas. (Vide Enum)
	// sem periodicidade regular, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual"
	InstalmentPeriodicity EnumContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

	// InstalmentPeriodicityAdditionalInfo Campo obrigatório para complementar a informação relativa à periodicidade de pagamento regular quando tiver a opção OUTROS.
	InstalmentPeriodicityAdditionalInfo *string `json:"instalmentPeriodicityAdditionalInfo,omitempty"`

	// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito. Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
	InterestRates []LoansContractInterestRate `json:"interestRates"`

	// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
	// - **CNPJ da instituição:** 8 (oito) posições iniciais;
	// - **Modalidade da operação:** 4 (quatro) posições;
	// - **Tipo do cliente:** 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
	// - **Código do cliente:** O número de posições varia conforme o tipo do cliente:
	//   1. Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
	//   2. Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
	//   3. Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
	// - **Código do contrato:** 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
	IpocCode string `json:"ipocCode"`

	// ProductName Denominação/Identificação do nome da Modalidade da Operação de Crédito divulgado ao cliente
	ProductName string `json:"productName"`

	// ProductSubType Sub tipo da modalidades de crédito Empréstimos contratadas, conforme  circular 4.015 e descrição do DOC3040 do SCR).
	ProductSubType EnumContractProductSubTypeLoans `json:"productSubType"`

	// ProductType Tipo da modalidade de crédito contratada, conforme  circular 4.015 e descrição do DOC3040 do SCR).
	ProductType EnumContractProductTypeLoans `json:"productType"`

	// SettlementDate Data de liquidação da operação.
	SettlementDate *timeutil.BrazilDate `json:"settlementDate,omitempty"`
}

// LoansContractInterestRate Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito
type LoansContractInterestRate struct {
	// AdditionalInfo Texto com informações adicionais sobre a composição das taxas de juros pactuadas.
	//
	// [Restrição] Caso a instituição possua a informação para compartilhamento, esta deverá ser informada.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`

	// Calculation Base de cálculo
	Calculation EnumContractCalculation `json:"calculation"`

	// InterestRateType "Tipo de Juros  (vide  Enum)
	// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
	// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
	InterestRateType EnumContractInterestRateType `json:"interestRateType"`

	// PostFixedRate Taxa pós fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.0045 .O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.1500. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000).
	PostFixedRate string `json:"postFixedRate"`

	// PreFixedRate Taxa pré fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.014500. O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000).
	PreFixedRate string `json:"preFixedRate"`

	// ReferentialRateIndexerAdditionalInfo Campo livre para complementar a informação relativa ao Tipo de taxa referencial ou indexador.
	// [Restrição] Obrigatório para complementar a informação relativa ao Tipo de taxa referencial ou indexador, quando selecionada o tipo ou subtipo OUTRO.
	ReferentialRateIndexerAdditionalInfo *string `json:"referentialRateIndexerAdditionalInfo,omitempty"`

	// ReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerSubType *EnumContractReferentialRateIndexerSubType `json:"referentialRateIndexerSubType,omitempty"`

	// ReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerType EnumContractReferentialRateIndexerType `json:"referentialRateIndexerType"`

	// TaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
	// a.m - ao mês
	// a.a. - ao ano"
	TaxPeriodicity EnumContractTaxPeriodicity `json:"taxPeriodicity"`

	// TaxType "Tipo de Taxa (vide  Enum)
	// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
	// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
	TaxType EnumContractTaxType `json:"taxType"`
}

// LoansContractedFee Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito
type LoansContractedFee struct {
	// FeeAmount Valor monetário da tarifa pactuada no contrato.
	//
	// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
	FeeAmount *string `json:"feeAmount,omitempty"`

	// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
	// - Mínimo
	// - Máximo
	// - Fixo
	// - Percentual"
	FeeCharge EnumContractFeeCharge `json:"feeCharge"`

	// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
	FeeChargeType EnumContractFeeChargeType `json:"feeChargeType"`

	// FeeCode Sigla identificadora da tarifa pactuada
	FeeCode string `json:"feeCode"`

	// FeeName Denominação da Tarifa pactuada
	FeeName string `json:"feeName"`

	// FeeRate É o valor da tarifa em percentual pactuada no contrato.
	//
	// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
	FeeRate *string `json:"feeRate,omitempty"`
}

// LoansFeeOverParcel defines model for LoansFeeOverParcel.
type LoansFeeOverParcel struct {
	// FeeAmount Valor monetário da tarifa pactuada no contrato.
	//
	// Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
	FeeAmount string `json:"feeAmount"`

	// FeeCode Sigla identificadora da tarifa pactuada.
	FeeCode string `json:"feeCode"`

	// FeeName Denominação da Tarifa pactuada.
	FeeName string `json:"feeName"`
}

// LoansFinanceCharge Conjunto de informações referentes à identificação da operação de crédito
type LoansFinanceCharge struct {
	// ChargeAdditionalInfo Campo para informações adicionais.
	//
	// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
	ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

	// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
	//
	// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
	ChargeRate *string `json:"chargeRate,omitempty"`

	// ChargeType Tipo de encargo pactuado no contrato.
	ChargeType EnumContractFinanceChargeType `json:"chargeType"`
}

// LoansInstalments Conjunto de informações referentes ao prazo remanescente e às parcelas de uma operação de crédito de empréstimos
type LoansInstalments struct {
	// BalloonPayments Lista que traz as datas de vencimento e valor das parcelas não regulares do contrato da modalidade de crédito consultada
	BalloonPayments *[]LoansBalloonPayment `json:"balloonPayments,omitempty"`

	// ContractRemainingNumber Prazo Remanescente segundo o tipo (dia, semana, mês, ano) referente à Modalidade de Crédito informada.
	//
	// [Restrição] Obrigatoriamente deve ser preenchido caso o typeContractRemaining seja diferente de SEM_PRAZO_REMANESCENTE.
	ContractRemainingNumber *float32 `json:"contractRemainingNumber,omitempty"`

	// DueInstalments Quantidade de prestações a vencer.(No caso de modalidades que não possuam parcelas, o número de prestações é igual a zero)
	DueInstalments float32 `json:"dueInstalments"`

	// PaidInstalments Quantidade de prestações pagas. (No caso de modalidades que não possuam parcelas, o número de prestações é igual a zero)
	PaidInstalments float32 `json:"paidInstalments"`

	// PastDueInstalments Quantidade de prestações vencidas. (No caso de modalidades que não possuam parcelas, o número de prestações é igual a zero)
	PastDueInstalments float32 `json:"pastDueInstalments"`

	// TotalNumberOfInstalments Prazo Total segundo o tipo (dia, semana, mês, ano) referente à Modalidade de Crédito informada.
	//
	// [Restrição] Obrigatoriamente deve ser preenchido caso o typeNumberOfInstalments seja diferente de SEM_PRAZO_TOTAL.
	TotalNumberOfInstalments *float32 `json:"totalNumberOfInstalments,omitempty"`

	// TypeContractRemaining Tipo de prazo remanescente do contrato referente à modalidade de crédito informada.
	TypeContractRemaining LoansInstalmentsTypeContractRemaining `json:"typeContractRemaining"`

	// TypeNumberOfInstalments Tipo de prazo total do contrato referente à modalidade de crédito informada.
	TypeNumberOfInstalments LoansInstalmentsTypeNumberOfInstalments `json:"typeNumberOfInstalments"`
}

// LoansInstalmentsTypeContractRemaining Tipo de prazo remanescente do contrato referente à modalidade de crédito informada.
type LoansInstalmentsTypeContractRemaining string

// LoansInstalmentsTypeNumberOfInstalments Tipo de prazo total do contrato referente à modalidade de crédito informada.
type LoansInstalmentsTypeNumberOfInstalments string

// LoansListContract Conjunto de informações de contratos de empréstimo mantidos pelo cliente na instituição transmissora e para os quais ele tenha fornecido consentimento
type LoansListContract struct {
	// BrandName Nome da Marca reportada pelo participante no Open Finance. Recomenda-se utilizar, sempre que possível, o mesmo nome de marca atribuído no campo do diretório Customer Friendly Server Name (Authorisation Server).
	BrandName string `json:"brandName"`

	// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
	CompanyCnpj string `json:"companyCnpj"`

	// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
	ContractID string `json:"contractId"`

	// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
	// - **CNPJ da instituição:** 8 (oito) posições iniciais;
	// - **Modalidade da operação:** 4 (quatro) posições;
	// - **Tipo do cliente:** 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
	// - **Código do cliente:** O número de posições varia conforme o tipo do cliente:
	//   1. Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
	//   2. Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
	//   3. Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
	// - **Código do contrato:** 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
	IpocCode string `json:"ipocCode"`

	// ProductSubType Sub tipo da modalidades de crédito Empréstimos contratadas, conforme  circular 4.015 e descrição do DOC3040 do SCR).
	ProductSubType EnumContractProductSubTypeLoans `json:"productSubType"`

	// ProductType Tipo da modalidade de crédito contratada, conforme  circular 4.015 e descrição do DOC3040 do SCR).
	ProductType EnumContractProductTypeLoans `json:"productType"`
}

// LoansPayments Conjunto de informações referentes aos pagamentos realizados de uma operação de crédito de empréstimos.
type LoansPayments struct {
	// ContractOutstandingBalance Valor necessário para o cliente liquidar a dívida.
	ContractOutstandingBalance string `json:"contractOutstandingBalance"`

	// PaidInstalments Quantidade total de parcelas pagas do contrato referente à Modalidade de Crédito informada.
	PaidInstalments *float32 `json:"paidInstalments,omitempty"`

	// Releases Lista dos pagamentos realizados no período
	Releases []LoansReleases `json:"releases"`
}

// LoansReleases Lista dos pagamentos realizados no período
type LoansReleases struct {
	// Currency Moeda referente ao valor monetário informado, segundo modelo ISO-4217. p.ex. 'BRL'.
	// Todos os valores monetários informados estão representados com a moeda vigente do Brasil.
	Currency string `json:"currency"`

	// InstalmentID Identificador de parcela, de responsabilidade de cada Instituição transmissora.
	// [Restrição] Informação de envio obrigatório quando isOverParcelPayment tiver o valor FALSE.
	InstalmentID *string `json:"instalmentId,omitempty"`

	// IsOverParcelPayment Identifica se é um pagamento pactuado (false) ou avulso (true).
	IsOverParcelPayment bool `json:"isOverParcelPayment"`

	// OverParcel Objeto das tarifas e encargos que foram pagos fora da parcela.
	//
	// [Restrição] Informação deve ser enviada caso ela exista.
	OverParcel *struct {
		// Charges Lista dos encargos que foram pagos fora da parcela.
		Charges []LoansChargeOverParcel `json:"charges"`

		// Fees Lista das tarifas que foram pagas fora da parcela, só para pagamento avulso.
		Fees []LoansFeeOverParcel `json:"fees"`
	} `json:"overParcel,omitempty"`

	// PaidAmount Valor do pagamento referente ao  contrato da modalidade de crédito consultada.
	// Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
	PaidAmount string `json:"paidAmount"`

	// PaidDate Data efetiva do pagamento referente ao contrato da modalidade de crédito consultada, conforme especificação RFC-3339. p.ex. 2014-03-19
	PaidDate timeutil.BrazilDate `json:"paidDate"`

	// PaymentID Código ou identificador único prestado pela instituição para representar o pagamento individual.
	PaymentID string `json:"paymentId"`
}

// LoansWarranties Conjunto de informações referentes à identificação da operação de crédito de empréstimo
type LoansWarranties struct {
	// Currency Moeda referente ao valor da garantia, segundo modelo ISO-4217. p.ex. 'BRL'. Todos os valores monetários informados estão representados com a moeda vigente do Brasil
	Currency string `json:"currency"`

	// WarrantyAmount Valor original da garantia. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
	//
	// [Restrição] Para casos em que warrantyType for igual a "GARANTIA_FIDEJUSSORIA" o valor da garantia corresponde a uma porcentagem do total garantido.
	// Dessa forma, os casos de garantia fidejussória para os quais não é possível determinar um valor monetário para a garantia devem ser preenchidos com 0.00.
	WarrantyAmount string `json:"warrantyAmount"`

	// WarrantySubType Denominação/Identificação do sub tipo da garantia que avaliza a Modalidade da Operação de Crédito contratada (Doc 3040, Anexo 12).
	WarrantySubType EnumWarrantySubType `json:"warrantySubType"`

	// WarrantyType Denominação/Identificação do tipo da garantia que avaliza a Modalidade da Operação de Crédito contratada  (Doc 3040, Anexo 12)
	WarrantyType EnumWarrantyType `json:"warrantyType"`
}

// ResponseErrorWithAbleAdditionalProperties defines model for ResponseErrorWithAbleAdditionalProperties.
type ResponseErrorWithAbleAdditionalProperties struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseLoansContract defines model for ResponseLoansContract.
type ResponseLoansContract struct {
	// Data Conjunto de informações referentes à identificação da operação de crédito de empréstimo
	Data  LoansContract `json:"data"`
	Links api.Links     `json:"links"`
	Meta  api.Meta      `json:"meta"`
}

// ResponseLoansContractList defines model for ResponseLoansContractList.
type ResponseLoansContractList struct {
	// Data Conjunto de informações de contratos de empréstimo mantidos pelo cliente na instituição transmissora e para os quais ele tenha fornecido consentimento
	Data  []LoansListContract `json:"data"`
	Links api.Links           `json:"links"`
	Meta  api.Meta            `json:"meta"`
}

// ResponseLoansInstalments defines model for ResponseLoansInstalments.
type ResponseLoansInstalments struct {
	// Data Conjunto de informações referentes ao prazo remanescente e às parcelas de uma operação de crédito de empréstimos
	Data  LoansInstalments `json:"data"`
	Links api.Links        `json:"links"`
	Meta  api.Meta         `json:"meta"`
}

// ResponseLoansPayments defines model for ResponseLoansPayments.
type ResponseLoansPayments struct {
	// Data Conjunto de informações referentes aos pagamentos realizados de uma operação de crédito de empréstimos.
	Data  LoansPayments `json:"data"`
	Links api.Links     `json:"links"`
	Meta  api.Meta      `json:"meta"`
}

// ResponseLoansWarranties defines model for ResponseLoansWarranties.
type ResponseLoansWarranties struct {
	// Data Conjunto de informações referentes à identificação da operação de crédito de empréstimo
	Data  []LoansWarranties `json:"data"`
	Links api.Links         `json:"links"`
	Meta  api.Meta          `json:"meta"`
}

// Authorization defines model for Authorization.
type Authorization = string

// ContractID defines model for contractId.
type ContractID = string

// Page defines model for page.
type Page = int32

// PageSize defines model for pageSize.
type PageSize = int32

// PaginationKey defines model for pagination-key.
type PaginationKey = string

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// BadRequest defines model for BadRequest.
type BadRequest = ResponseErrorWithAbleAdditionalProperties

// Default defines model for Default.
type Default = ResponseErrorWithAbleAdditionalProperties

// Forbidden defines model for Forbidden.
type Forbidden = ResponseErrorWithAbleAdditionalProperties

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseErrorWithAbleAdditionalProperties

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseErrorWithAbleAdditionalProperties

// Locked defines model for Locked.
type Locked = ResponseErrorWithAbleAdditionalProperties

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseErrorWithAbleAdditionalProperties

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseErrorWithAbleAdditionalProperties

// NotFound defines model for NotFound.
type NotFound = ResponseErrorWithAbleAdditionalProperties

// OKResponseLoansContract defines model for OKResponseLoansContract.
type OKResponseLoansContract = ResponseLoansContract

// OKResponseLoansContractList defines model for OKResponseLoansContractList.
type OKResponseLoansContractList = ResponseLoansContractList

// OKResponseLoansInstalments defines model for OKResponseLoansInstalments.
type OKResponseLoansInstalments = ResponseLoansInstalments

// OKResponseLoansPayments defines model for OKResponseLoansPayments.
type OKResponseLoansPayments = ResponseLoansPayments

// OKResponseLoansWarranties defines model for OKResponseLoansWarranties.
type OKResponseLoansWarranties = ResponseLoansWarranties

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded = ResponseErrorWithAbleAdditionalProperties

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = ResponseErrorWithAbleAdditionalProperties

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseErrorWithAbleAdditionalProperties

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ResponseErrorWithAbleAdditionalProperties

// LoansGetContractsParams defines parameters for LoansGetContracts.
type LoansGetContractsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// PaginationKey Identificador de rechamada, utilizado para evitar a contagem de chamadas ao endpoint durante a paginação.
	PaginationKey *PaginationKey `form:"pagination-key,omitempty" json:"pagination-key,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// LoansGetContractsContractIDParams defines parameters for LoansGetContractsContractID.
type LoansGetContractsContractIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// LoansGetContractsContractIDPaymentsParams defines parameters for LoansGetContractsContractIDPayments.
type LoansGetContractsContractIDPaymentsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// PaginationKey Identificador de rechamada, utilizado para evitar a contagem de chamadas ao endpoint durante a paginação.
	PaginationKey *PaginationKey `form:"pagination-key,omitempty" json:"pagination-key,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// LoansGetContractsContractIDScheduledInstalmentsParams defines parameters for LoansGetContractsContractIDScheduledInstalments.
type LoansGetContractsContractIDScheduledInstalmentsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// PaginationKey Identificador de rechamada, utilizado para evitar a contagem de chamadas ao endpoint durante a paginação.
	PaginationKey *PaginationKey `form:"pagination-key,omitempty" json:"pagination-key,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// LoansGetContractsContractIDWarrantiesParams defines parameters for LoansGetContractsContractIDWarranties.
type LoansGetContractsContractIDWarrantiesParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// PaginationKey Identificador de rechamada, utilizado para evitar a contagem de chamadas ao endpoint durante a paginação.
	PaginationKey *PaginationKey `form:"pagination-key,omitempty" json:"pagination-key,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Conjunto de informações  de contratos de empréstimo mantidos pelo cliente na instituição transmissora e para os quais ele tenha fornecido consentimento
	// (GET /contracts)
	LoansGetContracts(w http.ResponseWriter, r *http.Request, params LoansGetContractsParams)
	// Obtém os dados do contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId})
	LoansGetContractsContractID(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDParams)
	// Obtém os dados de pagamentos do contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId}/payments)
	LoansGetContractsContractIDPayments(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDPaymentsParams)
	// Obtém os dados do cronograma de parcelas do contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId}/scheduled-instalments)
	LoansGetContractsContractIDScheduledInstalments(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDScheduledInstalmentsParams)
	// Obtém a lista de garantias vinculadas ao contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId}/warranties)
	LoansGetContractsContractIDWarranties(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDWarrantiesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoansGetContracts operation middleware
func (siw *ServerInterfaceWrapper) LoansGetContracts(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consent:consentId", "loans"})

	ctx = context.WithValue(ctx, OpenIdScopes, []string{"openid"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params LoansGetContractsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination-key" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination-key", r.URL.Query(), &params.PaginationKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination-key", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoansGetContracts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoansGetContractsContractID operation middleware
func (siw *ServerInterfaceWrapper) LoansGetContractsContractID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consent:consentId", "loans"})

	ctx = context.WithValue(ctx, OpenIdScopes, []string{"openid"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params LoansGetContractsContractIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoansGetContractsContractID(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoansGetContractsContractIDPayments operation middleware
func (siw *ServerInterfaceWrapper) LoansGetContractsContractIDPayments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consent:consentId", "loans"})

	ctx = context.WithValue(ctx, OpenIdScopes, []string{"openid"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params LoansGetContractsContractIDPaymentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination-key" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination-key", r.URL.Query(), &params.PaginationKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination-key", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoansGetContractsContractIDPayments(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoansGetContractsContractIDScheduledInstalments operation middleware
func (siw *ServerInterfaceWrapper) LoansGetContractsContractIDScheduledInstalments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consent:consentId", "loans"})

	ctx = context.WithValue(ctx, OpenIdScopes, []string{"openid"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params LoansGetContractsContractIDScheduledInstalmentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination-key" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination-key", r.URL.Query(), &params.PaginationKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination-key", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoansGetContractsContractIDScheduledInstalments(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoansGetContractsContractIDWarranties operation middleware
func (siw *ServerInterfaceWrapper) LoansGetContractsContractIDWarranties(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consent:consentId", "loans"})

	ctx = context.WithValue(ctx, OpenIdScopes, []string{"openid"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params LoansGetContractsContractIDWarrantiesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	// ------------- Optional query parameter "pagination-key" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination-key", r.URL.Query(), &params.PaginationKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination-key", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoansGetContractsContractIDWarranties(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/contracts", wrapper.LoansGetContracts)
	m.HandleFunc("GET "+options.BaseURL+"/contracts/{contractId}", wrapper.LoansGetContractsContractID)
	m.HandleFunc("GET "+options.BaseURL+"/contracts/{contractId}/payments", wrapper.LoansGetContractsContractIDPayments)
	m.HandleFunc("GET "+options.BaseURL+"/contracts/{contractId}/scheduled-instalments", wrapper.LoansGetContractsContractIDScheduledInstalments)
	m.HandleFunc("GET "+options.BaseURL+"/contracts/{contractId}/warranties", wrapper.LoansGetContractsContractIDWarranties)

	return m
}

type BadRequestApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type DefaultApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type ForbiddenApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type GatewayTimeoutApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type InternalServerErrorApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type LockedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type MethodNotAllowedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type NotAcceptableApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type NotFoundApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type OKResponseLoansContractJSONResponse ResponseLoansContract

type OKResponseLoansContractListJSONResponse ResponseLoansContractList

type OKResponseLoansInstalmentsJSONResponse ResponseLoansInstalments

type OKResponseLoansPaymentsJSONResponse ResponseLoansPayments

type OKResponseLoansWarrantiesJSONResponse ResponseLoansWarranties

type SiteIsOverloadedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type TooManyRequestsApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type UnauthorizedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type UnprocessableEntityApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type LoansGetContractsRequestObject struct {
	Params LoansGetContractsParams
}

type LoansGetContractsResponseObject interface {
	VisitLoansGetContractsResponse(w http.ResponseWriter) error
}

type LoansGetContracts200JSONResponse struct {
	OKResponseLoansContractListJSONResponse
}

func (response LoansGetContracts200JSONResponse) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts400ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts401ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts403ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts404ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts405ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts406ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts422ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts423ApplicationJSONCharsetUTF8Response struct {
	LockedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts423ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(423)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts429ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts500ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts504ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContracts529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContracts529ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response LoansGetContractsdefaultApplicationJSONCharsetUTF8Response) VisitLoansGetContractsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoansGetContractsContractIDRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     LoansGetContractsContractIDParams
}

type LoansGetContractsContractIDResponseObject interface {
	VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error
}

type LoansGetContractsContractID200JSONResponse struct {
	OKResponseLoansContractJSONResponse
}

func (response LoansGetContractsContractID200JSONResponse) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID400ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID401ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID403ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID404ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID405ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID406ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID422ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID423ApplicationJSONCharsetUTF8Response struct {
	LockedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID423ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(423)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID429ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID500ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID504ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractID529ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response LoansGetContractsContractIDdefaultApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoansGetContractsContractIDPaymentsRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     LoansGetContractsContractIDPaymentsParams
}

type LoansGetContractsContractIDPaymentsResponseObject interface {
	VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error
}

type LoansGetContractsContractIDPayments200JSONResponse struct {
	OKResponseLoansPaymentsJSONResponse
}

func (response LoansGetContractsContractIDPayments200JSONResponse) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments400ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments401ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments403ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments404ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments405ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments406ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments422ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments423ApplicationJSONCharsetUTF8Response struct {
	LockedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments423ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(423)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments429ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments500ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments504ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPayments529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDPayments529ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDPaymentsdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response LoansGetContractsContractIDPaymentsdefaultApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoansGetContractsContractIDScheduledInstalmentsRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     LoansGetContractsContractIDScheduledInstalmentsParams
}

type LoansGetContractsContractIDScheduledInstalmentsResponseObject interface {
	VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error
}

type LoansGetContractsContractIDScheduledInstalments200JSONResponse struct {
	OKResponseLoansInstalmentsJSONResponse
}

func (response LoansGetContractsContractIDScheduledInstalments200JSONResponse) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments400ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments401ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments403ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments404ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments405ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments406ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments422ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments423ApplicationJSONCharsetUTF8Response struct {
	LockedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments423ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(423)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments429ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments500ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments504ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalments529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDScheduledInstalments529ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDScheduledInstalmentsdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response LoansGetContractsContractIDScheduledInstalmentsdefaultApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoansGetContractsContractIDWarrantiesRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     LoansGetContractsContractIDWarrantiesParams
}

type LoansGetContractsContractIDWarrantiesResponseObject interface {
	VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error
}

type LoansGetContractsContractIDWarranties200JSONResponse struct {
	OKResponseLoansWarrantiesJSONResponse
}

func (response LoansGetContractsContractIDWarranties200JSONResponse) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties400ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties401ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties403ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties404ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties405ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties406ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties422ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties423ApplicationJSONCharsetUTF8Response struct {
	LockedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties423ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(423)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties429ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties500ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties504ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarranties529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response LoansGetContractsContractIDWarranties529ApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type LoansGetContractsContractIDWarrantiesdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response LoansGetContractsContractIDWarrantiesdefaultApplicationJSONCharsetUTF8Response) VisitLoansGetContractsContractIDWarrantiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Conjunto de informações  de contratos de empréstimo mantidos pelo cliente na instituição transmissora e para os quais ele tenha fornecido consentimento
	// (GET /contracts)
	LoansGetContracts(ctx context.Context, request LoansGetContractsRequestObject) (LoansGetContractsResponseObject, error)
	// Obtém os dados do contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId})
	LoansGetContractsContractID(ctx context.Context, request LoansGetContractsContractIDRequestObject) (LoansGetContractsContractIDResponseObject, error)
	// Obtém os dados de pagamentos do contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId}/payments)
	LoansGetContractsContractIDPayments(ctx context.Context, request LoansGetContractsContractIDPaymentsRequestObject) (LoansGetContractsContractIDPaymentsResponseObject, error)
	// Obtém os dados do cronograma de parcelas do contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId}/scheduled-instalments)
	LoansGetContractsContractIDScheduledInstalments(ctx context.Context, request LoansGetContractsContractIDScheduledInstalmentsRequestObject) (LoansGetContractsContractIDScheduledInstalmentsResponseObject, error)
	// Obtém a lista de garantias vinculadas ao contrato de empréstimo identificado por contractId
	// (GET /contracts/{contractId}/warranties)
	LoansGetContractsContractIDWarranties(ctx context.Context, request LoansGetContractsContractIDWarrantiesRequestObject) (LoansGetContractsContractIDWarrantiesResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// LoansGetContracts operation middleware
func (sh *strictHandler) LoansGetContracts(w http.ResponseWriter, r *http.Request, params LoansGetContractsParams) {
	var request LoansGetContractsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoansGetContracts(ctx, request.(LoansGetContractsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoansGetContracts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoansGetContractsResponseObject); ok {
		if err := validResponse.VisitLoansGetContractsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoansGetContractsContractID operation middleware
func (sh *strictHandler) LoansGetContractsContractID(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDParams) {
	var request LoansGetContractsContractIDRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoansGetContractsContractID(ctx, request.(LoansGetContractsContractIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoansGetContractsContractID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoansGetContractsContractIDResponseObject); ok {
		if err := validResponse.VisitLoansGetContractsContractIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoansGetContractsContractIDPayments operation middleware
func (sh *strictHandler) LoansGetContractsContractIDPayments(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDPaymentsParams) {
	var request LoansGetContractsContractIDPaymentsRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoansGetContractsContractIDPayments(ctx, request.(LoansGetContractsContractIDPaymentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoansGetContractsContractIDPayments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoansGetContractsContractIDPaymentsResponseObject); ok {
		if err := validResponse.VisitLoansGetContractsContractIDPaymentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoansGetContractsContractIDScheduledInstalments operation middleware
func (sh *strictHandler) LoansGetContractsContractIDScheduledInstalments(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDScheduledInstalmentsParams) {
	var request LoansGetContractsContractIDScheduledInstalmentsRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoansGetContractsContractIDScheduledInstalments(ctx, request.(LoansGetContractsContractIDScheduledInstalmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoansGetContractsContractIDScheduledInstalments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoansGetContractsContractIDScheduledInstalmentsResponseObject); ok {
		if err := validResponse.VisitLoansGetContractsContractIDScheduledInstalmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoansGetContractsContractIDWarranties operation middleware
func (sh *strictHandler) LoansGetContractsContractIDWarranties(w http.ResponseWriter, r *http.Request, contractID ContractID, params LoansGetContractsContractIDWarrantiesParams) {
	var request LoansGetContractsContractIDWarrantiesRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoansGetContractsContractIDWarranties(ctx, request.(LoansGetContractsContractIDWarrantiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoansGetContractsContractIDWarranties")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoansGetContractsContractIDWarrantiesResponseObject); ok {
		if err := validResponse.VisitLoansGetContractsContractIDWarrantiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3vz/AQAA//+ns6YTgNoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
