//go:build go1.22

// Package creditportabilityv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package creditportabilityv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luikyv/mock-bank/internal/api"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeLoansScopes = "OAuth2AuthorizationCodeLoans.Scopes"
	OAuth2ClientCredentialsScopes      = "OAuth2ClientCredentials.Scopes"
)

// Defines values for EnumReferentialRateIndexerSubType.
const (
	EnumReferentialRateIndexerSubTypeCDI                   EnumReferentialRateIndexerSubType = "CDI"
	EnumReferentialRateIndexerSubTypeIGPM                  EnumReferentialRateIndexerSubType = "IGPM"
	EnumReferentialRateIndexerSubTypeIPCA                  EnumReferentialRateIndexerSubType = "IPCA"
	EnumReferentialRateIndexerSubTypeIPCC                  EnumReferentialRateIndexerSubType = "IPCC"
	EnumReferentialRateIndexerSubTypeLIBOR                 EnumReferentialRateIndexerSubType = "LIBOR"
	EnumReferentialRateIndexerSubTypeOUTRASTAXASFLUTUANTES EnumReferentialRateIndexerSubType = "OUTRAS_TAXAS_FLUTUANTES"
	EnumReferentialRateIndexerSubTypeOUTRASTAXASPOSFIXADAS EnumReferentialRateIndexerSubType = "OUTRAS_TAXAS_POS_FIXADAS"
	EnumReferentialRateIndexerSubTypeOUTROSINDEXADORES     EnumReferentialRateIndexerSubType = "OUTROS_INDEXADORES"
	EnumReferentialRateIndexerSubTypeOUTROSINDICESPRECO    EnumReferentialRateIndexerSubType = "OUTROS_INDICES_PRECO"
	EnumReferentialRateIndexerSubTypePREFIXADO             EnumReferentialRateIndexerSubType = "PRE_FIXADO"
	EnumReferentialRateIndexerSubTypeSELIC                 EnumReferentialRateIndexerSubType = "SELIC"
	EnumReferentialRateIndexerSubTypeSEMSUBTIPOINDEXADOR   EnumReferentialRateIndexerSubType = "SEM_SUB_TIPO_INDEXADOR"
	EnumReferentialRateIndexerSubTypeTCRPOS                EnumReferentialRateIndexerSubType = "TCR_POS"
	EnumReferentialRateIndexerSubTypeTCRPRE                EnumReferentialRateIndexerSubType = "TCR_PRE"
	EnumReferentialRateIndexerSubTypeTJLP                  EnumReferentialRateIndexerSubType = "TJLP"
	EnumReferentialRateIndexerSubTypeTLP                   EnumReferentialRateIndexerSubType = "TLP"
	EnumReferentialRateIndexerSubTypeTRFCPOS               EnumReferentialRateIndexerSubType = "TRFC_POS"
	EnumReferentialRateIndexerSubTypeTRFCPRE               EnumReferentialRateIndexerSubType = "TRFC_PRE"
	EnumReferentialRateIndexerSubTypeTRTBF                 EnumReferentialRateIndexerSubType = "TR_TBF"
)

// Defines values for LoansContractInterestRateCalculation.
const (
	N21252 LoansContractInterestRateCalculation = "21/252"
	N30360 LoansContractInterestRateCalculation = "30/360"
	N30365 LoansContractInterestRateCalculation = "30/365"
)

// Defines values for LoansContractInterestRateInterestRateType.
const (
	COMPOSTO LoansContractInterestRateInterestRateType = "COMPOSTO"
	SIMPLES  LoansContractInterestRateInterestRateType = "SIMPLES"
)

// Defines values for LoansContractInterestRateReferentialRateIndexerType.
const (
	LoansContractInterestRateReferentialRateIndexerTypeCREDITORURAL      LoansContractInterestRateReferentialRateIndexerType = "CREDITO_RURAL"
	LoansContractInterestRateReferentialRateIndexerTypeFLUTUANTES        LoansContractInterestRateReferentialRateIndexerType = "FLUTUANTES"
	LoansContractInterestRateReferentialRateIndexerTypeINDICESPRECOS     LoansContractInterestRateReferentialRateIndexerType = "INDICES_PRECOS"
	LoansContractInterestRateReferentialRateIndexerTypeOUTROSINDEXADORES LoansContractInterestRateReferentialRateIndexerType = "OUTROS_INDEXADORES"
	LoansContractInterestRateReferentialRateIndexerTypePOSFIXADO         LoansContractInterestRateReferentialRateIndexerType = "POS_FIXADO"
	LoansContractInterestRateReferentialRateIndexerTypePREFIXADO         LoansContractInterestRateReferentialRateIndexerType = "PRE_FIXADO"
	LoansContractInterestRateReferentialRateIndexerTypeSEMTIPOINDEXADOR  LoansContractInterestRateReferentialRateIndexerType = "SEM_TIPO_INDEXADOR"
)

// Defines values for LoansContractInterestRateTaxPeriodicity.
const (
	AA LoansContractInterestRateTaxPeriodicity = "AA"
	AM LoansContractInterestRateTaxPeriodicity = "AM"
)

// Defines values for LoansContractInterestRateTaxType.
const (
	EFETIVA LoansContractInterestRateTaxType = "EFETIVA"
	NOMINAL LoansContractInterestRateTaxType = "NOMINAL"
)

// Defines values for POSTResponseCreditPortabilityDataStatus.
const (
	POSTResponseCreditPortabilityDataStatusCANCELLED POSTResponseCreditPortabilityDataStatus = "CANCELLED"
	POSTResponseCreditPortabilityDataStatusPENDING   POSTResponseCreditPortabilityDataStatus = "PENDING"
	POSTResponseCreditPortabilityDataStatusRECEIVED  POSTResponseCreditPortabilityDataStatus = "RECEIVED"
)

// Defines values for PatchResponseCreditPortabilityCancelDataReasonType.
const (
	PatchResponseCreditPortabilityCancelDataReasonTypeCANCELADOPELOCLIENTE                             PatchResponseCreditPortabilityCancelDataReasonType = "CANCELADO_PELO_CLIENTE"
	PatchResponseCreditPortabilityCancelDataReasonTypeOUTROS                                           PatchResponseCreditPortabilityCancelDataReasonType = "OUTROS"
	PatchResponseCreditPortabilityCancelDataReasonTypePOLITICADECREDITO                                PatchResponseCreditPortabilityCancelDataReasonType = "POLITICA_DE_CREDITO"
	PatchResponseCreditPortabilityCancelDataReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE PatchResponseCreditPortabilityCancelDataReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for PatchResponseCreditPortabilityCancelDataRejectedBy.
const (
	PatchResponseCreditPortabilityCancelDataRejectedByPROPONENTE PatchResponseCreditPortabilityCancelDataRejectedBy = "PROPONENTE"
	PatchResponseCreditPortabilityCancelDataRejectedByUSUARIO    PatchResponseCreditPortabilityCancelDataRejectedBy = "USUARIO"
)

// Defines values for RequestCreditPortabilityDataCustomerContactType.
const (
	RequestCreditPortabilityDataCustomerContactTypeEMAIL    RequestCreditPortabilityDataCustomerContactType = "EMAIL"
	RequestCreditPortabilityDataCustomerContactTypeTELEFONE RequestCreditPortabilityDataCustomerContactType = "TELEFONE"
)

// Defines values for RequestCreditPortabilityDataInstitutionProposingContactType.
const (
	RequestCreditPortabilityDataInstitutionProposingContactTypeEMAIL    RequestCreditPortabilityDataInstitutionProposingContactType = "EMAIL"
	RequestCreditPortabilityDataInstitutionProposingContactTypeTELEFONE RequestCreditPortabilityDataInstitutionProposingContactType = "TELEFONE"
)

// Defines values for RequestCreditPortabilityDataProposedContractAmortizationScheduled.
const (
	RequestCreditPortabilityDataProposedContractAmortizationScheduledOUTROS                RequestCreditPortabilityDataProposedContractAmortizationScheduled = "OUTROS"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledPRICE                 RequestCreditPortabilityDataProposedContractAmortizationScheduled = "PRICE"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSAC                   RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SAC"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSAM                   RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SAM"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSEMSISTEMAAMORTIZACAO RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge.
const (
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeFIXO       RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "FIXO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeMAXIMO     RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "MAXIMO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeMINIMO     RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "MINIMO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargePERCENTUAL RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "PERCENTUAL"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType.
const (
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeTypePORPARCELA RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType = "POR_PARCELA"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeTypeUNICA      RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType = "UNICA"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType.
const (
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeIOFCONTRATACAO               RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "IOF_CONTRATACAO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeIOFPORATRASO                 RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "IOF_POR_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeJUROSMORAATRASO              RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "JUROS_MORA_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeJUROSREMUNERATORIOSPORATRASO RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeMULTAATRASOPAGAMENTO         RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "MULTA_ATRASO_PAGAMENTO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeOUTROS                       RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "OUTROS"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeSEMENCARGO                   RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "SEM_ENCARGO"
)

// Defines values for RequestCreditPortabilityDataProposedContractInstalmentPeriodicity.
const (
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityANUAL                   RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "ANUAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityBIMESTRAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "BIMESTRAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityDIARIO                  RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "DIARIO"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityMENSAL                  RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "MENSAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityQUINZENAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "QUINZENAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMANAL                 RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEMANAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMESTRAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEMESTRAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityTRIMESTRAL              RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for RequestCreditPortabilityCancelDataReasonType.
const (
	RequestCreditPortabilityCancelDataReasonTypeCANCELADOPELOCLIENTE                             RequestCreditPortabilityCancelDataReasonType = "CANCELADO_PELO_CLIENTE"
	RequestCreditPortabilityCancelDataReasonTypeOUTROS                                           RequestCreditPortabilityCancelDataReasonType = "OUTROS"
	RequestCreditPortabilityCancelDataReasonTypePOLITICADECREDITO                                RequestCreditPortabilityCancelDataReasonType = "POLITICA_DE_CREDITO"
	RequestCreditPortabilityCancelDataReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE RequestCreditPortabilityCancelDataReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for RequestCreditPortabilityCancelDataRejectedBy.
const (
	RequestCreditPortabilityCancelDataRejectedByPROPONENTE RequestCreditPortabilityCancelDataRejectedBy = "PROPONENTE"
	RequestCreditPortabilityCancelDataRejectedByUSUARIO    RequestCreditPortabilityCancelDataRejectedBy = "USUARIO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataCustomerContactType.
const (
	ResponsePortabilitiesByPortabilityIDDataCustomerContactTypeEMAIL    ResponsePortabilitiesByPortabilityIDDataCustomerContactType = "EMAIL"
	ResponsePortabilitiesByPortabilityIDDataCustomerContactTypeTELEFONE ResponsePortabilitiesByPortabilityIDDataCustomerContactType = "TELEFONE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType.
const (
	ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactTypeEMAIL    ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType = "EMAIL"
	ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactTypeTELEFONE ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType = "TELEFONE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledOUTROS                ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledPRICE                 ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "PRICE"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSAC                   ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SAC"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSAM                   ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SAM"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSEMSISTEMAAMORTIZACAO ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeFIXO       ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "FIXO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeMAXIMO     ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "MAXIMO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeMINIMO     ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "MINIMO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargePERCENTUAL ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "PERCENTUAL"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeTypePORPARCELA ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType = "POR_PARCELA"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeTypeUNICA      ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType = "UNICA"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeIOFCONTRATACAO               ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "IOF_CONTRATACAO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeIOFPORATRASO                 ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "IOF_POR_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeJUROSMORAATRASO              ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "JUROS_MORA_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeJUROSREMUNERATORIOSPORATRASO ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeMULTAATRASOPAGAMENTO         ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "MULTA_ATRASO_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeOUTROS                       ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeSEMENCARGO                   ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "SEM_ENCARGO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityANUAL                   ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "ANUAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityBIMESTRAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "BIMESTRAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityDIARIO                  ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "DIARIO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityMENSAL                  ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "MENSAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityQUINZENAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "QUINZENAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMANAL                 ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEMANAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMESTRAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEMESTRAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityTRIMESTRAL              ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataRejectionReasonType.
const (
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCANCELADOPELOCLIENTE                             ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CANCELADO_PELO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCLIENTECOMACAOJUDICIAL                           ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCONTRATOJALIQUIDADO                              ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CONTRATO_JA_LIQUIDADO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeDECURSODOPRAZOPARAPAGAMENTO                      ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "DECURSO_DO_PRAZO_PARA_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeDIVERGENCIADEPAGAMENTOEFETUADO                   ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "DIVERGENCIA_DE_PAGAMENTO_EFETUADO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeMODALIDADEDAOPERACAOINCOMPATIVEL                 ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "MODALIDADE_DA_OPERACAO_INCOMPATIVEL"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeOUTROS                                           ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePOLITICADECREDITO                                ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "POLITICA_DE_CREDITO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePORTABILIDADECANCELADAPORFALTADELIQUIDACAO       ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePORTABILIDADEEMANDAMENTO                         ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "PORTABILIDADE_EM_ANDAMENTO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeRETENCAODOCLIENTE                                ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "RETENCAO_DO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy.
const (
	CREDORA    ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "CREDORA"
	PROPONENTE ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "PROPONENTE"
	USUARIO    ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "USUARIO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataStatus.
const (
	ResponsePortabilitiesByPortabilityIDDataStatusACCEPTEDSETTLEMENTCOMPLETED  ResponsePortabilitiesByPortabilityIDDataStatus = "ACCEPTED_SETTLEMENT_COMPLETED"
	ResponsePortabilitiesByPortabilityIDDataStatusACCEPTEDSETTLEMENTINPROGRESS ResponsePortabilitiesByPortabilityIDDataStatus = "ACCEPTED_SETTLEMENT_IN_PROGRESS"
	ResponsePortabilitiesByPortabilityIDDataStatusCANCELLED                    ResponsePortabilitiesByPortabilityIDDataStatus = "CANCELLED"
	ResponsePortabilitiesByPortabilityIDDataStatusPAYMENTISSUE                 ResponsePortabilitiesByPortabilityIDDataStatus = "PAYMENT_ISSUE"
	ResponsePortabilitiesByPortabilityIDDataStatusPENDING                      ResponsePortabilitiesByPortabilityIDDataStatus = "PENDING"
	ResponsePortabilitiesByPortabilityIDDataStatusPORTABILITYCOMPLETED         ResponsePortabilitiesByPortabilityIDDataStatus = "PORTABILITY_COMPLETED"
	ResponsePortabilitiesByPortabilityIDDataStatusRECEIVED                     ResponsePortabilitiesByPortabilityIDDataStatus = "RECEIVED"
	ResponsePortabilitiesByPortabilityIDDataStatusREJECTED                     ResponsePortabilitiesByPortabilityIDDataStatus = "REJECTED"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType.
const (
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCANCELADOPELOCLIENTE                             ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CANCELADO_PELO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCLIENTECOMACAOJUDICIAL                           ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCONTRATOJALIQUIDADO                              ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CONTRATO_JA_LIQUIDADO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeDECURSODOPRAZOPARAPAGAMENTO                      ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "DECURSO_DO_PRAZO_PARA_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeDIVERGENCIADEPAGAMENTOEFETUADO                   ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "DIVERGENCIA_DE_PAGAMENTO_EFETUADO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeMODALIDADEDAOPERACAOINCOMPATIVEL                 ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "MODALIDADE_DA_OPERACAO_INCOMPATIVEL"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeOUTROS                                           ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePOLITICADECREDITO                                ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "POLITICA_DE_CREDITO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePORTABILIDADECANCELADAPORFALTADELIQUIDACAO       ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePORTABILIDADEEMANDAMENTO                         ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "PORTABILIDADE_EM_ANDAMENTO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeRETENCAODOCLIENTE                                ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "RETENCAO_DO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityChannel.
const (
	OFB          ResponsePortabilityEligibilityDataPortabilityChannel = "OFB"
	REGISTRADORA ResponsePortabilityEligibilityDataPortabilityChannel = "REGISTRADORA"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType.
const (
	CLIENTECOMACAOJUDICIAL         ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	CONTRATOLIQUIDADO              ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "CONTRATO_LIQUIDADO"
	MODALIDADEOPERACAOINCOMPATIVEL ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "MODALIDADE_OPERACAO_INCOMPATIVEL"
	OUTROS                         ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "OUTROS"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityStatus.
const (
	DISPONIVEL  ResponsePortabilityEligibilityDataPortabilityStatus = "DISPONIVEL"
	EMANDAMENTO ResponsePortabilityEligibilityDataPortabilityStatus = "EM_ANDAMENTO"
)

// EnumReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type EnumReferentialRateIndexerSubType string

// LoansContractInterestRate Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito
type LoansContractInterestRate struct {
	// AdditionalInfo Texto com informações adicionais sobre a composição das taxas de juros pactuadas.
	//
	// [Restrição] Caso a instituição possua a informação para compartilhamento, esta deverá ser informada.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`

	// Calculation Base de cálculo
	Calculation LoansContractInterestRateCalculation `json:"calculation"`

	// InterestRateType "Tipo de Juros  (vide  Enum)
	// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
	// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
	InterestRateType LoansContractInterestRateInterestRateType `json:"interestRateType"`

	// PostFixedRate Taxa pós fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.0045 .O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.1500. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000)
	PostFixedRate string `json:"postFixedRate"`

	// PreFixedRate Taxa pré fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.014500. O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000).
	PreFixedRate string `json:"preFixedRate"`

	// ReferentialRateIndexerAdditionalInfo Campo livre para complementar a informação relativa ao Tipo de taxa referencial ou indexador.
	// [Restrição] Obrigatório para complementar a informação relativa ao Tipo de taxa referencial ou indexador, quando selecionado o tipo ou subtipo `OUTRO`.
	ReferentialRateIndexerAdditionalInfo *string `json:"referentialRateIndexerAdditionalInfo,omitempty"`

	// ReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerSubType *EnumReferentialRateIndexerSubType `json:"referentialRateIndexerSubType,omitempty"`

	// ReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerType LoansContractInterestRateReferentialRateIndexerType `json:"referentialRateIndexerType"`

	// TaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
	// a.m - ao mês
	// a.a. - ao ano"
	TaxPeriodicity LoansContractInterestRateTaxPeriodicity `json:"taxPeriodicity"`

	// TaxType "Tipo de Taxa (vide  Enum)
	// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
	// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
	TaxType LoansContractInterestRateTaxType `json:"taxType"`
}

// LoansContractInterestRateCalculation Base de cálculo
type LoansContractInterestRateCalculation string

// LoansContractInterestRateInterestRateType "Tipo de Juros  (vide  Enum)
// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
type LoansContractInterestRateInterestRateType string

// LoansContractInterestRateReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type LoansContractInterestRateReferentialRateIndexerType string

// LoansContractInterestRateTaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
// a.m - ao mês
// a.a. - ao ano"
type LoansContractInterestRateTaxPeriodicity string

// LoansContractInterestRateTaxType "Tipo de Taxa (vide  Enum)
// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
type LoansContractInterestRateTaxType string

// POSTResponseCreditPortability defines model for POSTResponseCreditPortability.
type POSTResponseCreditPortability struct {
	// Data Conjunto de informações de contratos de empréstimos/financiamentos mantidos pelo cliente na instituição credora e para os quais ele tenha fornecido consentimento
	Data struct {
		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID *string `json:"portabilityId,omitempty"`

		// Status Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
		Status *POSTResponseCreditPortabilityDataStatus `json:"status,omitempty"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// POSTResponseCreditPortabilityDataStatus Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
type POSTResponseCreditPortabilityDataStatus string

// POSTResponseCreditPortabilityPayment defines model for POSTResponseCreditPortabilityPayment.
type POSTResponseCreditPortabilityPayment struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a credora
	Data struct {
		// PaymentAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
		PaymentAmount struct {
			// Amount Valor pago para liquidação do contrato de empréstimo.
			Amount string `json:"amount"`

			// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
			Currency string `json:"currency"`
		} `json:"paymentAmount"`

		// PaymentDateTime Data e hora em que o pagamento à instituição credora foi realizado pela instituição proponente.
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format)
		PaymentDateTime string `json:"paymentDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
		//
		// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
		TransactionID string `json:"transactionId"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// PatchResponseCreditPortabilityCancel defines model for PatchResponseCreditPortabilityCancel.
type PatchResponseCreditPortabilityCancel struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a Credora.
	Data struct {
		// Reason Motivo de recusa do pedido de portabilidade
		Reason struct {
			// Type Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			Type PatchResponseCreditPortabilityCancelDataReasonType `json:"type"`

			// TypeAdditionalInfo Informação adicional sobre rejeição de portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket para o GT de Portabilidade de Crédito como sugestão para estrutura Open Finance para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `type` for igual a `OUTROS`.
			TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
		} `json:"reason"`

		// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
		//
		// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
		//
		// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
		RejectedBy PatchResponseCreditPortabilityCancelDataRejectedBy `json:"rejectedBy"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// PatchResponseCreditPortabilityCancelDataReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type PatchResponseCreditPortabilityCancelDataReasonType string

// PatchResponseCreditPortabilityCancelDataRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
//
// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
//
// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
type PatchResponseCreditPortabilityCancelDataRejectedBy string

// RequestCreditPortability defines model for RequestCreditPortability.
type RequestCreditPortability struct {
	// Data Conjunto de informações referentes à Proposta de Portabilidade de Crédito da Proponente para a Credora
	Data struct {
		ContractIdentification struct {
			// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
			ContractID string `json:"contractId"`

			// ContractNumber Número do contrato dado pela instituição contratante.
			ContractNumber string `json:"contractNumber"`

			// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
			//
			//
			// CNPJ da instituição: 8 (oito) posições iniciais;
			// Modalidade da operação: 4 (quatro) posições;
			// Tipo do cliente: 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica
			//
			// – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
			//
			// - Código do cliente: O número de posições varia conforme o tipo do cliente:
			// Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
			// Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
			// Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
			//
			// - Código do contrato: 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
			IpocCode string `json:"ipocCode"`
		} `json:"contractIdentification"`

		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// CustomerContact Dados de contato do cliente
		CustomerContact []struct {
			// Type Tipo do contato do cliente.
			Type  RequestCreditPortabilityDataCustomerContactType `json:"type"`
			Value string                                          `json:"value"`
		} `json:"customerContact"`

		// Institution Informações sobre proponente e credora participantes do presente pedido de portabilidade de crédito
		Institution struct {
			// Creditor Informações sobre a instituição credora
			Creditor struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Credora.
				CompanyName string `json:"companyName"`
			} `json:"creditor"`

			// Proposing Informações sobre a instituição proponente
			Proposing struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Proponente
				CompanyName string `json:"companyName"`
				Contact     *[]struct {
					// Type Tipo do contato da Instituição Proponente.
					Type  *RequestCreditPortabilityDataInstitutionProposingContactType `json:"type,omitempty"`
					Value *string                                                      `json:"value,omitempty"`
				} `json:"contact,omitempty"`
			} `json:"proposing"`
		} `json:"institution"`

		// ProposedContract Proposta da Proponente para Portabilidade de Crédito
		ProposedContract struct {
			// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas). O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
			//
			//   - Em contratos anteriores a 2008 (para o público PF);
			//
			//   - Em contratos anteriores a 2011 (para o público PJ);
			//
			//   - Público PJ de médio ou grande porte.
			CET string `json:"CET"`

			// AmortizationScheduled Sistema de amortização (Vide Enum):
			//
			// - SAC (Sistema de Amortização Constante): É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
			//
			// - PRICE (Sistema Francês de Amortização): As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
			//
			// - SAM (Sistema de Amortização Misto): Cada prestação (pagamento) é a média aritmética das prestações
			// respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
			//
			// - SEM SISTEMA DE AMORTIZAÇÃO
			AmortizationScheduled RequestCreditPortabilityDataProposedContractAmortizationScheduled `json:"amortizationScheduled"`

			// AmortizationScheduledAdditionalInfo Informação relativa ao complemento da amortização
			//
			// [Restrição] Campo de preenchimento obrigatório quando o campo amortizationScheduled for igual `OUTROS`
			AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

			// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
			ContractedFees []struct {
				// FeeAmount Objeto para representar o valor monetário da tarifa pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
				FeeAmount *struct {
					// Amount Valor monetário da tarifa pactuada no contrato.
					Amount string `json:"amount"`

					// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
					Currency string `json:"currency"`
				} `json:"feeAmount,omitempty"`

				// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
				// - Mínimo
				// - Máximo
				// - Fixo
				// - Percentual"
				FeeCharge RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge `json:"feeCharge"`

				// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
				FeeChargeType RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType `json:"feeChargeType"`

				// FeeCode Sigla identificadora da tarifa pactuada
				FeeCode string `json:"feeCode"`

				// FeeName Denominação da Tarifa pactuada
				FeeName string `json:"feeName"`

				// FeeRate É o valor da tarifa em percentual pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
				FeeRate *string `json:"feeRate,omitempty"`
			} `json:"contractedFees"`

			// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
			ContractedFinanceCharges []struct {
				// ChargeAdditionalInfo Campo para informações adicionais.
				//
				// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
				ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

				// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
				//
				// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
				ChargeRate string `json:"chargeRate"`

				// ChargeType Tipo de encargo pactuado no contrato.
				ChargeType RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType `json:"chargeType"`
			} `json:"contractedFinanceCharges"`
			DigitalSignatureProof struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof"`

			// DueDate Prazo (data de vencimento final) da operação. Especificação RFC-3339.
			DueDate string `json:"dueDate"`

			// InstallmentAmount Objeto para representar o Valor da parcela regular da operação após portabilidade.
			InstallmentAmount struct {
				// Amount Valor da parcela regular da operação após portabilidade. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"installmentAmount"`

			// InstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diário, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
			InstalmentPeriodicity RequestCreditPortabilityDataProposedContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

			// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito.
			// Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
			InterestRates []LoansContractInterestRate `json:"interestRates"`

			// TotalNumberOfInstallments Total de parcelas, segundo a periodicidade regular das parcelas referente à Modalidade de Crédito informada.
			TotalNumberOfInstallments float32 `json:"totalNumberOfInstallments"`
		} `json:"proposedContract"`
	} `json:"data"`
}

// RequestCreditPortabilityDataCustomerContactType Tipo do contato do cliente.
type RequestCreditPortabilityDataCustomerContactType string

// RequestCreditPortabilityDataInstitutionProposingContactType Tipo do contato da Instituição Proponente.
type RequestCreditPortabilityDataInstitutionProposingContactType string

// RequestCreditPortabilityDataProposedContractAmortizationScheduled Sistema de amortização (Vide Enum):
//
// - SAC (Sistema de Amortização Constante): É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
//
// - PRICE (Sistema Francês de Amortização): As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
//
// - SAM (Sistema de Amortização Misto): Cada prestação (pagamento) é a média aritmética das prestações
// respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
//
// - SEM SISTEMA DE AMORTIZAÇÃO
type RequestCreditPortabilityDataProposedContractAmortizationScheduled string

// RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge string

// RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType string

// RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType Tipo de encargo pactuado no contrato.
type RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType string

// RequestCreditPortabilityDataProposedContractInstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diário, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
type RequestCreditPortabilityDataProposedContractInstalmentPeriodicity string

// RequestCreditPortabilityCancel defines model for RequestCreditPortabilityCancel.
type RequestCreditPortabilityCancel struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a Credora.
	Data struct {
		// Reason Motivo de recusa do pedido de portabilidade
		Reason struct {
			// Type Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			Type RequestCreditPortabilityCancelDataReasonType `json:"type"`

			// TypeAdditionalInfo Informação adicional sobre rejeição de portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket para o GT de Portabilidade de Crédito como sugestão para estrutura Open Finance para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `type` for igual a `OUTROS`.
			TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
		} `json:"reason"`

		// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
		//
		// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
		//
		// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
		RejectedBy RequestCreditPortabilityCancelDataRejectedBy `json:"rejectedBy"`
	} `json:"data"`
}

// RequestCreditPortabilityCancelDataReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type RequestCreditPortabilityCancelDataReasonType string

// RequestCreditPortabilityCancelDataRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
//
// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
//
// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
type RequestCreditPortabilityCancelDataRejectedBy string

// RequestCreditPortabilityPayment defines model for RequestCreditPortabilityPayment.
type RequestCreditPortabilityPayment struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a credora
	Data struct {
		// PaymentAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
		PaymentAmount struct {
			// Amount Valor pago para liquidação do contrato de empréstimo.
			Amount string `json:"amount"`

			// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
			Currency string `json:"currency"`
		} `json:"paymentAmount"`

		// PaymentDateTime Data e hora em que o pagamento à instituição credora foi realizado pela instituição proponente.
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format)
		PaymentDateTime string `json:"paymentDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
		//
		// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
		TransactionID string `json:"transactionId"`
	} `json:"data"`
}

// ResponseAccountData defines model for ResponseAccountData.
type ResponseAccountData struct {
	// Data Dados para realização do pagamento da operação via TED
	Data struct {
		StrCode struct {
			// AccountNumber Número da conta bancária da credora a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			AccountNumber *float32 `json:"accountNumber,omitempty"`

			// BranchCode Número da Agência creditada a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			BranchCode float32 `json:"branchCode"`

			// CompanyCnpj CNPJ do proprietário da conta a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			CompanyCnpj *string `json:"companyCnpj,omitempty"`

			// HasFinancialAgent Instituição trabalha com agente financeiro ao invés da conta reserva?
			HasFinancialAgent bool `json:"hasFinancialAgent"`

			// Ispb Número do ISPB da Instituição credora a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			Ispb string `json:"ispb"`

			// Name Nome do proprietário da conta a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			Name *string `json:"name,omitempty"`
		} `json:"strCode"`
	} `json:"data"`
	Links api.Links `json:"links"`
	Meta  api.Meta  `json:"meta"`
}

// ResponseErrorWithAbleAdditionalProperties defines model for ResponseErrorWithAbleAdditionalProperties.
type ResponseErrorWithAbleAdditionalProperties struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponsePortabilitiesByPortabilityID defines model for ResponsePortabilitiesByPortabilityId.
type ResponsePortabilitiesByPortabilityID struct {
	// Data Conjunto de informações referentes à Proposta de Portabilidade de Crédito da Proponente para a Credora
	Data struct {
		ContractIdentification struct {
			// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
			ContractID string `json:"contractId"`

			// ContractNumber Número do contrato dado pela instituição contratante.
			ContractNumber string `json:"contractNumber"`

			// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
			//
			//
			// CNPJ da instituição: 8 (oito) posições iniciais;
			// Modalidade da operação: 4 (quatro) posições;
			// Tipo do cliente: 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica
			//
			// – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
			//
			// - Código do cliente: O número de posições varia conforme o tipo do cliente:
			// Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
			// Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
			// Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
			//
			// - Código do contrato: 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
			IpocCode string `json:"ipocCode"`
		} `json:"contractIdentification"`

		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// CustomerContact Dados de contato do cliente.
		CustomerContact []struct {
			// Type Tipo do contato do cliente.
			Type  ResponsePortabilitiesByPortabilityIDDataCustomerContactType `json:"type"`
			Value string                                                      `json:"value"`
		} `json:"customerContact"`

		// Institution Informações sobre proponente e credora participantes do presente pedido de portabilidade de crédito.
		Institution struct {
			// Creditor Informações sobre a instituição credora.
			Creditor struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Credora.
				CompanyName string `json:"companyName"`
			} `json:"creditor"`

			// Proposing Informações sobre a instituição proponente
			Proposing struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Proponente
				CompanyName string `json:"companyName"`
				Contact     *[]struct {
					// Type Tipo do contato da Instituição Proponente.
					Type  *ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType `json:"type,omitempty"`
					Value *string                                                                  `json:"value,omitempty"`
				} `json:"contact,omitempty"`
			} `json:"proposing"`
		} `json:"institution"`

		// LoanSettlementInstruction Objeto contendo o recibo de quitação do contrato original de empréstimo após finalizado o
		// pedido de portabilidade de crédito com sucesso junto a Instituição Credora.
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando `status` for igual a `PORTABILITY_COMPLETED`
		LoanSettlementInstruction *struct {
			// SettlementAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
			SettlementAmount struct {
				// Amount Valor pago para liquidação do contrato de empréstimo.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"settlementAmount"`

			// SettlementDateTime Data e hora em que a instituição credora realizou a quitação do contrato de empréstimo.
			SettlementDateTime string `json:"settlementDateTime"`

			// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
			//
			// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
			TransactionID string `json:"transactionId"`
		} `json:"loanSettlementInstruction,omitempty"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// ProposedContract Proposta da Proponente para Portabilidade de Crédito.
		ProposedContract struct {
			// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas).
			//
			// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
			//
			// Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
			//
			// - Em contratos anteriores a 2008 (para o público PF);
			// - Em contratos anteriores a 2011 (para o público PJ);
			// - Público PJ de médio ou grande porte.
			CET string `json:"CET"`

			// AmortizationScheduled Sistema de amortização (Vide Enum):
			// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
			// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
			// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
			// - SEM SISTEMA DE AMORTIZAÇÃO
			AmortizationScheduled ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled `json:"amortizationScheduled"`

			// AmortizationScheduledAdditionalInfo Informação relativa ao complemento da amortização
			//
			// [Restrição] Campo de preenchimento obrigatório quando o campo amortizationScheduled for igual `OUTROS`
			AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

			// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
			ContractedFees []struct {
				// FeeAmount Objeto para representar o valor monetário da tarifa pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
				FeeAmount *struct {
					// Amount Valor monetário da tarifa pactuada no contrato.
					Amount string `json:"amount"`

					// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
					Currency string `json:"currency"`
				} `json:"feeAmount,omitempty"`

				// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
				// - Mínimo
				// - Máximo
				// - Fixo
				// - Percentual"
				FeeCharge ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge `json:"feeCharge"`

				// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
				FeeChargeType ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType `json:"feeChargeType"`

				// FeeCode Sigla identificadora da tarifa pactuada
				FeeCode string `json:"feeCode"`

				// FeeName Denominação da Tarifa pactuada
				FeeName string `json:"feeName"`

				// FeeRate É o valor da tarifa em percentual pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
				FeeRate *string `json:"feeRate,omitempty"`
			} `json:"contractedFees"`

			// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
			ContractedFinanceCharges []struct {
				// ChargeAdditionalInfo Campo para informações adicionais.
				//
				// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
				ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

				// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
				//
				// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
				ChargeRate *string `json:"chargeRate,omitempty"`

				// ChargeType Tipo de encargo pactuado no contrato.
				ChargeType ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType `json:"chargeType"`
			} `json:"contractedFinanceCharges"`
			DigitalSignatureProof struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof"`

			// DueDate Prazo (data de vencimento final) da operação. Especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339)
			DueDate string `json:"dueDate"`

			// InstallmentAmount Objeto para representar o Valor da parcela regular da operação após portabilidade.
			InstallmentAmount *struct {
				// Amount Valor da parcela regular da operação após portabilidade. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"installmentAmount,omitempty"`

			// InstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diario, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
			InstalmentPeriodicity ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

			// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito.
			// Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
			InterestRates []LoansContractInterestRate `json:"interestRates"`

			// TotalNumberOfInstallments total de parcelas, segundo a periodicidade regular das parcelas referente à Modalidade de Crédito informada.
			TotalNumberOfInstallments float32 `json:"totalNumberOfInstallments"`
		} `json:"proposedContract"`

		// Rejection Objeto contendo detalhes do cancelamento do pedido de portabilidade de crédito junto a Instituição Credora.
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando `status` for igual a `REJECTED` ou `CANCELLED`
		Rejection *struct {
			// Reason Motivo de recusa do pedido de portabilidade de crédito.
			Reason struct {
				// Type Motivo de recusa do pedido de portabilidade, onde:
				// CANCELADO_PELO_CLIENTE - Cliente desiste do pedido da portabilidade;
				// SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente;
				// POLITICA_DE_CREDITO - Proponente desiste da oferta ao cliente por políticas internas;
				// RETENCAO_DO_CLIENTE - Cliente aceitou contraproposta da instituição credora (dentro do prazo);
				// CONTRATO_JA_LIQUIDADO - Contrato liquidado pelo cliente;
				// DIVERGENCIA_DE_PAGAMENTO_EFETUADO - Proponente realizou a liquidação com valor divergente;
				// DECURSO_DO_PRAZO_PARA_PAGAMENTO - Proponente realizou a liquidação fora do prazo;
				// PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO - Proponente não realizou a liquidação da Portabilidade;
				// PORTABILIDADE_EM_ANDAMENTO - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato;
				// CLIENTE_COM_ACAO_JUDICIAL - Possui ação judicial;
				// MODALIDADE_DA_OPERACAO_INCOMPATIVEL - Modalidade divergente da indicada pela instituição proponente;
				// OUTROS - Motivo da rejeição não se encaixa nas opções disponíveis.
				Type ResponsePortabilitiesByPortabilityIDDataRejectionReasonType `json:"type"`

				// TypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito.
				// Ao utilizar essa opção, é fortemente recomendável enviar um ticket como sugestão da estrutura Open Finance para discussão e mapeamento em futuras versões.
				//
				// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo type for igual a OUTROS.
				TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
			// PROPONENTE - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a
			// proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
			// USUARIO - Indica que o cliente cancelou o pedido de portabilidade de crédito.
			// CREDORA- Indica que a Instituição Credora cancelou o contrato por retenção do cliente ou outros motivos
			// conforme motivo de recusa.
			RejectedBy ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Informação sobre o status de um pedido de portabilidade de crédito, onde:
		//
		// - `RECEIVED`: Estado inicial. Indica que o pedido de portabilidade foi solicitado junto a instituição credora. O pedido deve permanecer neste estado até que o próximo dia útil (D+1) aonde começará a contar o prazo de 3 dias úteis para a etapa de contraproposta e o pedido de portabilidade deverá ser movido para PENDING
		// - `PENDING`: Indica que o pedido de portabilidade de crédito está na fase de contraproposta, onde a instituição credora poderá enviar uma contraproposta ou não para o cliente por qualquer canal (email, telefone, etc.) porém o aceite só deverá ser valido se o cliente aprovar no canal digital da instituição credora
		// - `ACCEPTED_SETTLEMENT_IN_PROGRESS`: Indica que a contraproposta não foi aceita pelo cliente e a instituição proponente terá que quitar o valor do contrato no mesmo dia em que o estado foi ativado
		// - `ACCEPTED_SETTLEMENT_COMPLETED`: Indica que a instituição proponente já liquidou o contrato e comunicou a respeito a credora que está validando os dados do contratos bem como valores recebidos para a quitação do mesmo (nesta etapa a instituição credora tem 2 dias úteis para fornecer a confirmação e o recibo de quitação do contrato de empréstimo)
		// - `PORTABILITY_COMPLETED`: Indica que o pedido de portabilidade foi concluído com sucesso
		// - `REJECTED`: Indica que o pedido de portabilidade de crédito foi rejeitado, seja porque o cliente aceitou a contraproposta, ou porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades
		// - `CANCELLED`: Indica que o cliente cancelou o pedido de portabilidade de crédito
		// - `PAYMENT_ISSUE`: Indica que a Instituição Credora encontrou alguma inconsistência na liquidação efetuada e que a Instituição Proponente deverá realizar ajustes conforme sugerido pela Instituição Credora para solucionar a pendencia antes do cancelamento do pedido de portabilidade de crédito
		Status ResponsePortabilitiesByPortabilityIDDataStatus `json:"status"`

		// StatusReason Motivo de recusa do pedido de portabilidade
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `status` for igual a `REJECTED` ou `CANCELADO` ou `PAYMENT_ISSUE`
		StatusReason *struct {
			// DigitalSignatureProof Comprovante de assinatura da contraproposta
			//
			// [RESTRIÇÃO] Objeto de preenchimento obrigatório quando campo `reasonType` for igual a `RETENCAO_DO_CLIENTE`
			DigitalSignatureProof *struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof,omitempty"`

			// ReasonType Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `RETENCAO_DO_CLIENTE` - Cliente aceitou contraproposta da instituição credora (dentro do prazo)
			//
			// `CONTRATO_JA_LIQUIDADO` - Contrato liquidado pelo cliente.
			//
			// `DIVERGENCIA_DE_PAGAMENTO_EFETUADO` - Proponente realizou a liquidação com valor divergente
			//
			// `DECURSO_DO_PRAZO_PARA_PAGAMENTO` - Proponente realizou a liquidação fora do prazo
			//
			// `PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO` - Proponente não realizou a liquidação do contrato
			//
			// `PORTABILIDADE_EM_ANDAMENTO` - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato.
			//
			// `CLIENTE_COM_ACAO_JUDICIAL` - Possui ação judicial
			//
			// `MODALIDADE_DA_OPERACAO_INCOMPATIVEL` - Modalidade divergente da indicada pela instituição proponente
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			ReasonType *ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType `json:"reasonType,omitempty"`

			// ReasonTypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket como sugestão da estrutura Open Finance
			// para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `reasonType` for igual `OUTROS`
			ReasonTypeAdditionalInfo *string `json:"reasonTypeAdditionalInfo,omitempty"`
		} `json:"statusReason,omitempty"`

		// StatusUpdateDateTime Data e hora em que o contrato teve o status atualizado. Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime string `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links api.Links `json:"links"`
	Meta  api.Meta  `json:"meta"`
}

// ResponsePortabilitiesByPortabilityIDDataCustomerContactType Tipo do contato do cliente.
type ResponsePortabilitiesByPortabilityIDDataCustomerContactType string

// ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType Tipo do contato da Instituição Proponente.
type ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled Sistema de amortização (Vide Enum):
// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
// - SEM SISTEMA DE AMORTIZAÇÃO
type ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType Tipo de encargo pactuado no contrato.
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diario, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
type ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity string

// ResponsePortabilitiesByPortabilityIDDataRejectionReasonType Motivo de recusa do pedido de portabilidade, onde:
// CANCELADO_PELO_CLIENTE - Cliente desiste do pedido da portabilidade;
// SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente;
// POLITICA_DE_CREDITO - Proponente desiste da oferta ao cliente por políticas internas;
// RETENCAO_DO_CLIENTE - Cliente aceitou contraproposta da instituição credora (dentro do prazo);
// CONTRATO_JA_LIQUIDADO - Contrato liquidado pelo cliente;
// DIVERGENCIA_DE_PAGAMENTO_EFETUADO - Proponente realizou a liquidação com valor divergente;
// DECURSO_DO_PRAZO_PARA_PAGAMENTO - Proponente realizou a liquidação fora do prazo;
// PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO - Proponente não realizou a liquidação da Portabilidade;
// PORTABILIDADE_EM_ANDAMENTO - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato;
// CLIENTE_COM_ACAO_JUDICIAL - Possui ação judicial;
// MODALIDADE_DA_OPERACAO_INCOMPATIVEL - Modalidade divergente da indicada pela instituição proponente;
// OUTROS - Motivo da rejeição não se encaixa nas opções disponíveis.
type ResponsePortabilitiesByPortabilityIDDataRejectionReasonType string

// ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
// PROPONENTE - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a
// proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
// USUARIO - Indica que o cliente cancelou o pedido de portabilidade de crédito.
// CREDORA- Indica que a Instituição Credora cancelou o contrato por retenção do cliente ou outros motivos
// conforme motivo de recusa.
type ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy string

// ResponsePortabilitiesByPortabilityIDDataStatus Informação sobre o status de um pedido de portabilidade de crédito, onde:
//
// - `RECEIVED`: Estado inicial. Indica que o pedido de portabilidade foi solicitado junto a instituição credora. O pedido deve permanecer neste estado até que o próximo dia útil (D+1) aonde começará a contar o prazo de 3 dias úteis para a etapa de contraproposta e o pedido de portabilidade deverá ser movido para PENDING
// - `PENDING`: Indica que o pedido de portabilidade de crédito está na fase de contraproposta, onde a instituição credora poderá enviar uma contraproposta ou não para o cliente por qualquer canal (email, telefone, etc.) porém o aceite só deverá ser valido se o cliente aprovar no canal digital da instituição credora
// - `ACCEPTED_SETTLEMENT_IN_PROGRESS`: Indica que a contraproposta não foi aceita pelo cliente e a instituição proponente terá que quitar o valor do contrato no mesmo dia em que o estado foi ativado
// - `ACCEPTED_SETTLEMENT_COMPLETED`: Indica que a instituição proponente já liquidou o contrato e comunicou a respeito a credora que está validando os dados do contratos bem como valores recebidos para a quitação do mesmo (nesta etapa a instituição credora tem 2 dias úteis para fornecer a confirmação e o recibo de quitação do contrato de empréstimo)
// - `PORTABILITY_COMPLETED`: Indica que o pedido de portabilidade foi concluído com sucesso
// - `REJECTED`: Indica que o pedido de portabilidade de crédito foi rejeitado, seja porque o cliente aceitou a contraproposta, ou porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades
// - `CANCELLED`: Indica que o cliente cancelou o pedido de portabilidade de crédito
// - `PAYMENT_ISSUE`: Indica que a Instituição Credora encontrou alguma inconsistência na liquidação efetuada e que a Instituição Proponente deverá realizar ajustes conforme sugerido pela Instituição Credora para solucionar a pendencia antes do cancelamento do pedido de portabilidade de crédito
type ResponsePortabilitiesByPortabilityIDDataStatus string

// ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `RETENCAO_DO_CLIENTE` - Cliente aceitou contraproposta da instituição credora (dentro do prazo)
//
// `CONTRATO_JA_LIQUIDADO` - Contrato liquidado pelo cliente.
//
// `DIVERGENCIA_DE_PAGAMENTO_EFETUADO` - Proponente realizou a liquidação com valor divergente
//
// `DECURSO_DO_PRAZO_PARA_PAGAMENTO` - Proponente realizou a liquidação fora do prazo
//
// `PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO` - Proponente não realizou a liquidação do contrato
//
// `PORTABILIDADE_EM_ANDAMENTO` - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato.
//
// `CLIENTE_COM_ACAO_JUDICIAL` - Possui ação judicial
//
// `MODALIDADE_DA_OPERACAO_INCOMPATIVEL` - Modalidade divergente da indicada pela instituição proponente
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType string

// ResponsePortabilityEligibility defines model for ResponsePortabilityEligibility.
type ResponsePortabilityEligibility struct {
	// Data Conjunto de informações de contratos de empréstimos/financiamentos mantidos pelo cliente na instituição credora e para os quais ele tenha fornecido consentimento
	Data struct {
		// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
		ContractID  string `json:"contractId"`
		Portability struct {
			// Channel Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			Channel *ResponsePortabilityEligibilityDataPortabilityChannel `json:"channel,omitempty"`

			// CompanyCnpj Número completo do CNPJ da instituição
			// O CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.
			// Deve-se ter apenas números do CNPJ, sem máscara
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			CompanyCnpj *string `json:"companyCnpj,omitempty"`

			// CompanyName Nome da Instituição Proponente responsável pelo pedido de portabilidade de credito anterior a atual consulta p.ex.Empresa A.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			CompanyName *string `json:"companyName,omitempty"`

			// Ineligible Objeto para auxiliar a Instituição Proponente a entender o porque um contrato está inelegivel para pedido de portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `FALSE`
			Ineligible *struct {
				// ReasonType Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
				// Informação sobre o motivo de inelegibilidade
				// -`CONTRATO_LIQUIDADO`: Contrato liquidado pelo cliente.
				// -`CLIENTE_COM_ACAO_JUDICIAL`: Cliente possui ação judicial
				// -`MODALIDADE_OPERACAO_INCOMPATIVEL`: Caso o contrato tenha uma modalidade diferente do praticado no escopo de modalidades disponiveis para portabilidade de crédito
				// -`OUTROS`: Caso exista algum motivo de recusa que não se encaixa nas opções disponiveis de `reasonType`, o campo `reasonTypeAdditionalInfo` deverá ser preenchido com o motivo da inelegibilidade.
				ReasonType ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType `json:"reasonType"`

				// ReasonTypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito. Deve ser preenchido como uma proposta para inclusão nas definições, exemplo `MOTIVO_NAO_MAPEADO`: descrição de usar esse motivo específico. Ao utilizar essa opção, é obrigatório enviar um ticket para a estrutura open finance para mapeamento em futuras versões.
				//
				// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `reasonType` for igual a `OUTROS`.
				ReasonTypeAdditionalInfo *string `json:"reasonTypeAdditionalInfo,omitempty"`
			} `json:"ineligible,omitempty"`

			// IsEligible Sinaliza se as características do contrato é elegível para pedido de portabilidade de crédito via OFB (sem considerar a disponibilidade da portabilidade de crédito)
			IsEligible bool `json:"isEligible"`

			// Status Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
			Status *ResponsePortabilityEligibilityDataPortabilityStatus `json:"status,omitempty"`

			// StatusUpdateDateTime Data e hora em que o contrato teve o status atualizado. Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC(UTC time format).
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
			StatusUpdateDateTime *string `json:"statusUpdateDateTime,omitempty"`
		} `json:"portability"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponsePortabilityEligibilityDataPortabilityChannel Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
//
// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
type ResponsePortabilityEligibilityDataPortabilityChannel string

// ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
// Informação sobre o motivo de inelegibilidade
// -`CONTRATO_LIQUIDADO`: Contrato liquidado pelo cliente.
// -`CLIENTE_COM_ACAO_JUDICIAL`: Cliente possui ação judicial
// -`MODALIDADE_OPERACAO_INCOMPATIVEL`: Caso o contrato tenha uma modalidade diferente do praticado no escopo de modalidades disponiveis para portabilidade de crédito
// -`OUTROS`: Caso exista algum motivo de recusa que não se encaixa nas opções disponiveis de `reasonType`, o campo `reasonTypeAdditionalInfo` deverá ser preenchido com o motivo da inelegibilidade.
type ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType string

// ResponsePortabilityEligibilityDataPortabilityStatus Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
//
// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
type ResponsePortabilityEligibilityDataPortabilityStatus string

// XV defines model for X-V.
type XV = string

// Authorization defines model for Authorization.
type Authorization = string

// ContractID defines model for contractId.
type ContractID = string

// PortabilityID defines model for portabilityId.
type PortabilityID = string

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// XIdempotencyKey defines model for xIdempotencyKey.
type XIdempotencyKey = string

// BadRequest defines model for BadRequest.
type BadRequest = ResponseErrorWithAbleAdditionalProperties

// Default defines model for Default.
type Default = ResponseErrorWithAbleAdditionalProperties

// Forbidden defines model for Forbidden.
type Forbidden = ResponseErrorWithAbleAdditionalProperties

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseErrorWithAbleAdditionalProperties

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseErrorWithAbleAdditionalProperties

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseErrorWithAbleAdditionalProperties

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseErrorWithAbleAdditionalProperties

// NotFound defines model for NotFound.
type NotFound = ResponseErrorWithAbleAdditionalProperties

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded = ResponseErrorWithAbleAdditionalProperties

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseErrorWithAbleAdditionalProperties

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams defines parameters for CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility.
type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesParams defines parameters for CreditPortabilityPostPortabilities.
type CreditPortabilityPostPortabilitiesParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`

	// XIdempotencyKey Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.
	XIdempotencyKey XIdempotencyKey `json:"x-idempotency-key"`
}

// CreditPortabilityGetPortabilitiesByPortabilityIDParams defines parameters for CreditPortabilityGetPortabilitiesByPortabilityID.
type CreditPortabilityGetPortabilitiesByPortabilityIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityGetAccountDataParams defines parameters for CreditPortabilityGetAccountData.
type CreditPortabilityGetAccountDataParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams defines parameters for CreditPortabilityPatchPortabilitiesPortabilityIDCancel.
type CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams defines parameters for CreditPortabilityPostPortabilitiesPortabilityIDPayment.
type CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Informa se um contrato pertencente a um determinado cliente estará habilitado para a realização do pedido de portabilidade de crédito considerando a regra de só existir um pedido de portabilidade para um determinado contrato.
	// (GET /credit-operations/{contractId}/portability-eligibility)
	CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request, contractID ContractID, params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams)
	// Realiza pedido de portabilidade de crédito para um determinado contrato junto a instituição credora
	// (POST /portabilities)
	CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request, params CreditPortabilityPostPortabilitiesParams)
	// Consulta portabilidade de crédito através da propriedade portabilityId.
	// (GET /portabilities/{portabilityId})
	CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetPortabilitiesByPortabilityIDParams)
	// Obtém os dados necessários para realização do pagamento da operação via TED.
	// (GET /portabilities/{portabilityId}/account-data)
	CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetAccountDataParams)
	// Comunica a Instituição Credora a respeito do cancelamento da portabilidade de crédito.
	// (PATCH /portabilities/{portabilityId}/cancel)
	CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams)
	// Comunica a Instituição Credora a respeito da liquidação da portabilidade de crédito.
	// (POST /portabilities/{portabilityId}/payment)
	CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeLoansScopes, []string{"openId", "consent:consentId", "loans"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPostPortabilities operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeLoansScopes, []string{"openId", "consent:consentId", "loans"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPostPortabilitiesParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	// ------------- Required header parameter "x-idempotency-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-idempotency-key")]; found {
		var XIdempotencyKey XIdempotencyKey
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-idempotency-key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-idempotency-key", valueList[0], &XIdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-idempotency-key", Err: err})
			return
		}

		params.XIdempotencyKey = XIdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter x-idempotency-key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-idempotency-key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPostPortabilities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityGetPortabilitiesByPortabilityID operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetPortabilitiesByPortabilityIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetPortabilitiesByPortabilityID(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityGetAccountData operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetAccountDataParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetAccountData(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancel operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPostPortabilitiesPortabilityIDPayment operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPostPortabilitiesPortabilityIDPayment(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/credit-operations/{contractId}/portability-eligibility", wrapper.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility)
	m.HandleFunc("POST "+options.BaseURL+"/portabilities", wrapper.CreditPortabilityPostPortabilities)
	m.HandleFunc("GET "+options.BaseURL+"/portabilities/{portabilityId}", wrapper.CreditPortabilityGetPortabilitiesByPortabilityID)
	m.HandleFunc("GET "+options.BaseURL+"/portabilities/{portabilityId}/account-data", wrapper.CreditPortabilityGetAccountData)
	m.HandleFunc("PATCH "+options.BaseURL+"/portabilities/{portabilityId}/cancel", wrapper.CreditPortabilityPatchPortabilitiesPortabilityIDCancel)
	m.HandleFunc("POST "+options.BaseURL+"/portabilities/{portabilityId}/payment", wrapper.CreditPortabilityPostPortabilitiesPortabilityIDPayment)

	return m
}

type BadRequestResponseHeaders struct {
	XV XV
}
type BadRequestApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers BadRequestResponseHeaders
}

type DefaultResponseHeaders struct {
	XV XV
}
type DefaultApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers DefaultResponseHeaders
}

type ForbiddenResponseHeaders struct {
	XV XV
}
type ForbiddenApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers ForbiddenResponseHeaders
}

type GatewayTimeoutResponseHeaders struct {
	XV XV
}
type GatewayTimeoutApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers GatewayTimeoutResponseHeaders
}

type InternalServerErrorResponseHeaders struct {
	XV XV
}
type InternalServerErrorApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers InternalServerErrorResponseHeaders
}

type MethodNotAllowedResponseHeaders struct {
	XV XV
}
type MethodNotAllowedApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers MethodNotAllowedResponseHeaders
}

type NotAcceptableResponseHeaders struct {
	XV XV
}
type NotAcceptableApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers NotAcceptableResponseHeaders
}

type NotFoundResponseHeaders struct {
	XV XV
}
type NotFoundApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers NotFoundResponseHeaders
}

type OKResponseAccountDataResponseHeaders struct {
	XV XV
}
type OKResponseAccountDataApplicationJwtResponse struct {
	Body io.Reader

	Headers       OKResponseAccountDataResponseHeaders
	ContentLength int64
}

type OKResponsePortabilitiesByPortabilityIDResponseHeaders struct {
	XV XV
}
type OKResponsePortabilitiesByPortabilityIDApplicationJwtResponse struct {
	Body io.Reader

	Headers       OKResponsePortabilitiesByPortabilityIDResponseHeaders
	ContentLength int64
}

type OKResponsePortabilityEligibilityResponseHeaders struct {
	XV XV
}
type OKResponsePortabilityEligibilityApplicationJwtResponse struct {
	Body io.Reader

	Headers       OKResponsePortabilityEligibilityResponseHeaders
	ContentLength int64
}

type POSTResponseCreditPortabilityResponseHeaders struct {
	XV XV
}
type POSTResponseCreditPortabilityApplicationJwtResponse struct {
	Body io.Reader

	Headers       POSTResponseCreditPortabilityResponseHeaders
	ContentLength int64
}

type POSTResponseCreditPortabilityPaymentResponseHeaders struct {
	XV XV
}
type POSTResponseCreditPortabilityPaymentApplicationJwtResponse struct {
	Body io.Reader

	Headers       POSTResponseCreditPortabilityPaymentResponseHeaders
	ContentLength int64
}

type PatchResponseCreditPortabilityCancelResponseHeaders struct {
	XV XV
}
type PatchResponseCreditPortabilityCancelApplicationJwtResponse struct {
	Body io.Reader

	Headers       PatchResponseCreditPortabilityCancelResponseHeaders
	ContentLength int64
}

type SiteIsOverloadedResponseHeaders struct {
	XV XV
}
type SiteIsOverloadedApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers SiteIsOverloadedResponseHeaders
}

type UnauthorizedResponseHeaders struct {
	XV XV
}
type UnauthorizedApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers UnauthorizedResponseHeaders
}

type UnprocessableEntityResponseHeaders struct {
	XV XV
}
type UnprocessableEntityApplicationJwtResponse struct {
	Body io.Reader

	Headers       UnprocessableEntityResponseHeaders
	ContentLength int64
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject interface {
	VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility200ApplicationJwtResponse struct {
	OKResponsePortabilityEligibilityApplicationJwtResponse
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility200ApplicationJwtResponse) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility422ApplicationJwtResponse) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilitydefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilitydefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesRequestObject struct {
	Params CreditPortabilityPostPortabilitiesParams
	Body   io.Reader
}

type CreditPortabilityPostPortabilitiesResponseObject interface {
	VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error
}

type CreditPortabilityPostPortabilities202ApplicationJwtResponse struct {
	POSTResponseCreditPortabilityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilities202ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(202)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilities400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilities422ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilities500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityPostPortabilitiesdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityGetPortabilitiesByPortabilityIDParams
}

type CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject interface {
	VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetPortabilitiesByPortabilityID200ApplicationJwtResponse struct {
	OKResponsePortabilitiesByPortabilityIDApplicationJwtResponse
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID200ApplicationJwtResponse) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetPortabilitiesByPortabilityID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID422ApplicationJwtResponse) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetPortabilitiesByPortabilityID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityIDdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityGetPortabilitiesByPortabilityIDdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountDataRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityGetAccountDataParams
}

type CreditPortabilityGetAccountDataResponseObject interface {
	VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetAccountData200ApplicationJwtResponse struct {
	OKResponseAccountDataApplicationJwtResponse
}

func (response CreditPortabilityGetAccountData200ApplicationJwtResponse) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetAccountData400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetAccountData422ApplicationJwtResponse) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetAccountData500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountDatadefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityGetAccountDatadefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams
	Body          io.Reader
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject interface {
	VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel200ApplicationJwtResponse struct {
	PatchResponseCreditPortabilityCancelApplicationJwtResponse
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel200ApplicationJwtResponse) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel422ApplicationJwtResponse) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCanceldefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCanceldefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams
	Body          io.Reader
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject interface {
	VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment202ApplicationJwtResponse struct {
	POSTResponseCreditPortabilityPaymentApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment202ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(202)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment422ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPaymentdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Informa se um contrato pertencente a um determinado cliente estará habilitado para a realização do pedido de portabilidade de crédito considerando a regra de só existir um pedido de portabilidade para um determinado contrato.
	// (GET /credit-operations/{contractId}/portability-eligibility)
	CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(ctx context.Context, request CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject) (CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject, error)
	// Realiza pedido de portabilidade de crédito para um determinado contrato junto a instituição credora
	// (POST /portabilities)
	CreditPortabilityPostPortabilities(ctx context.Context, request CreditPortabilityPostPortabilitiesRequestObject) (CreditPortabilityPostPortabilitiesResponseObject, error)
	// Consulta portabilidade de crédito através da propriedade portabilityId.
	// (GET /portabilities/{portabilityId})
	CreditPortabilityGetPortabilitiesByPortabilityID(ctx context.Context, request CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject) (CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject, error)
	// Obtém os dados necessários para realização do pagamento da operação via TED.
	// (GET /portabilities/{portabilityId}/account-data)
	CreditPortabilityGetAccountData(ctx context.Context, request CreditPortabilityGetAccountDataRequestObject) (CreditPortabilityGetAccountDataResponseObject, error)
	// Comunica a Instituição Credora a respeito do cancelamento da portabilidade de crédito.
	// (PATCH /portabilities/{portabilityId}/cancel)
	CreditPortabilityPatchPortabilitiesPortabilityIDCancel(ctx context.Context, request CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject) (CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject, error)
	// Comunica a Instituição Credora a respeito da liquidação da portabilidade de crédito.
	// (POST /portabilities/{portabilityId}/payment)
	CreditPortabilityPostPortabilitiesPortabilityIDPayment(ctx context.Context, request CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject) (CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility operation middleware
func (sh *strictHandler) CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request, contractID ContractID, params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams) {
	var request CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(ctx, request.(CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPostPortabilities operation middleware
func (sh *strictHandler) CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request, params CreditPortabilityPostPortabilitiesParams) {
	var request CreditPortabilityPostPortabilitiesRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPostPortabilities(ctx, request.(CreditPortabilityPostPortabilitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPostPortabilities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPostPortabilitiesResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPostPortabilitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityGetPortabilitiesByPortabilityID operation middleware
func (sh *strictHandler) CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetPortabilitiesByPortabilityIDParams) {
	var request CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetPortabilitiesByPortabilityID(ctx, request.(CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetPortabilitiesByPortabilityID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityGetAccountData operation middleware
func (sh *strictHandler) CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetAccountDataParams) {
	var request CreditPortabilityGetAccountDataRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetAccountData(ctx, request.(CreditPortabilityGetAccountDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetAccountData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetAccountDataResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetAccountDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancel operation middleware
func (sh *strictHandler) CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams) {
	var request CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPatchPortabilitiesPortabilityIDCancel(ctx, request.(CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPatchPortabilitiesPortabilityIDCancel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPostPortabilitiesPortabilityIDPayment operation middleware
func (sh *strictHandler) CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams) {
	var request CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPostPortabilitiesPortabilityIDPayment(ctx, request.(CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPostPortabilitiesPortabilityIDPayment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//839Aot2GQBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
