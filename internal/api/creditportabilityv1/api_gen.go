//go:build go1.22

// Package creditportabilityv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package creditportabilityv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luikyv/mock-bank/internal/api"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeLoansScopes = "OAuth2AuthorizationCodeLoans.Scopes"
	OAuth2ClientCredentialsScopes      = "OAuth2ClientCredentials.Scopes"
)

// Defines values for EnumReferentialRateIndexerSubType.
const (
	EnumReferentialRateIndexerSubTypeCDI                   EnumReferentialRateIndexerSubType = "CDI"
	EnumReferentialRateIndexerSubTypeIGPM                  EnumReferentialRateIndexerSubType = "IGPM"
	EnumReferentialRateIndexerSubTypeIPCA                  EnumReferentialRateIndexerSubType = "IPCA"
	EnumReferentialRateIndexerSubTypeIPCC                  EnumReferentialRateIndexerSubType = "IPCC"
	EnumReferentialRateIndexerSubTypeLIBOR                 EnumReferentialRateIndexerSubType = "LIBOR"
	EnumReferentialRateIndexerSubTypeOUTRASTAXASFLUTUANTES EnumReferentialRateIndexerSubType = "OUTRAS_TAXAS_FLUTUANTES"
	EnumReferentialRateIndexerSubTypeOUTRASTAXASPOSFIXADAS EnumReferentialRateIndexerSubType = "OUTRAS_TAXAS_POS_FIXADAS"
	EnumReferentialRateIndexerSubTypeOUTROSINDEXADORES     EnumReferentialRateIndexerSubType = "OUTROS_INDEXADORES"
	EnumReferentialRateIndexerSubTypeOUTROSINDICESPRECO    EnumReferentialRateIndexerSubType = "OUTROS_INDICES_PRECO"
	EnumReferentialRateIndexerSubTypePREFIXADO             EnumReferentialRateIndexerSubType = "PRE_FIXADO"
	EnumReferentialRateIndexerSubTypeSELIC                 EnumReferentialRateIndexerSubType = "SELIC"
	EnumReferentialRateIndexerSubTypeSEMSUBTIPOINDEXADOR   EnumReferentialRateIndexerSubType = "SEM_SUB_TIPO_INDEXADOR"
	EnumReferentialRateIndexerSubTypeTCRPOS                EnumReferentialRateIndexerSubType = "TCR_POS"
	EnumReferentialRateIndexerSubTypeTCRPRE                EnumReferentialRateIndexerSubType = "TCR_PRE"
	EnumReferentialRateIndexerSubTypeTJLP                  EnumReferentialRateIndexerSubType = "TJLP"
	EnumReferentialRateIndexerSubTypeTLP                   EnumReferentialRateIndexerSubType = "TLP"
	EnumReferentialRateIndexerSubTypeTRFCPOS               EnumReferentialRateIndexerSubType = "TRFC_POS"
	EnumReferentialRateIndexerSubTypeTRFCPRE               EnumReferentialRateIndexerSubType = "TRFC_PRE"
	EnumReferentialRateIndexerSubTypeTRTBF                 EnumReferentialRateIndexerSubType = "TR_TBF"
)

// Defines values for LoansContractInterestRateCalculation.
const (
	N21252 LoansContractInterestRateCalculation = "21/252"
	N30360 LoansContractInterestRateCalculation = "30/360"
	N30365 LoansContractInterestRateCalculation = "30/365"
)

// Defines values for LoansContractInterestRateInterestRateType.
const (
	COMPOSTO LoansContractInterestRateInterestRateType = "COMPOSTO"
	SIMPLES  LoansContractInterestRateInterestRateType = "SIMPLES"
)

// Defines values for LoansContractInterestRateReferentialRateIndexerType.
const (
	LoansContractInterestRateReferentialRateIndexerTypeCREDITORURAL      LoansContractInterestRateReferentialRateIndexerType = "CREDITO_RURAL"
	LoansContractInterestRateReferentialRateIndexerTypeFLUTUANTES        LoansContractInterestRateReferentialRateIndexerType = "FLUTUANTES"
	LoansContractInterestRateReferentialRateIndexerTypeINDICESPRECOS     LoansContractInterestRateReferentialRateIndexerType = "INDICES_PRECOS"
	LoansContractInterestRateReferentialRateIndexerTypeOUTROSINDEXADORES LoansContractInterestRateReferentialRateIndexerType = "OUTROS_INDEXADORES"
	LoansContractInterestRateReferentialRateIndexerTypePOSFIXADO         LoansContractInterestRateReferentialRateIndexerType = "POS_FIXADO"
	LoansContractInterestRateReferentialRateIndexerTypePREFIXADO         LoansContractInterestRateReferentialRateIndexerType = "PRE_FIXADO"
	LoansContractInterestRateReferentialRateIndexerTypeSEMTIPOINDEXADOR  LoansContractInterestRateReferentialRateIndexerType = "SEM_TIPO_INDEXADOR"
)

// Defines values for LoansContractInterestRateTaxPeriodicity.
const (
	AA LoansContractInterestRateTaxPeriodicity = "AA"
	AM LoansContractInterestRateTaxPeriodicity = "AM"
)

// Defines values for LoansContractInterestRateTaxType.
const (
	EFETIVA LoansContractInterestRateTaxType = "EFETIVA"
	NOMINAL LoansContractInterestRateTaxType = "NOMINAL"
)

// Defines values for POSTResponseCreditPortabilityDataStatus.
const (
	POSTResponseCreditPortabilityDataStatusCANCELLED POSTResponseCreditPortabilityDataStatus = "CANCELLED"
	POSTResponseCreditPortabilityDataStatusPENDING   POSTResponseCreditPortabilityDataStatus = "PENDING"
	POSTResponseCreditPortabilityDataStatusRECEIVED  POSTResponseCreditPortabilityDataStatus = "RECEIVED"
)

// Defines values for PatchResponseCreditPortabilityCancelDataReasonType.
const (
	PatchResponseCreditPortabilityCancelDataReasonTypeCANCELADOPELOCLIENTE                             PatchResponseCreditPortabilityCancelDataReasonType = "CANCELADO_PELO_CLIENTE"
	PatchResponseCreditPortabilityCancelDataReasonTypeOUTROS                                           PatchResponseCreditPortabilityCancelDataReasonType = "OUTROS"
	PatchResponseCreditPortabilityCancelDataReasonTypePOLITICADECREDITO                                PatchResponseCreditPortabilityCancelDataReasonType = "POLITICA_DE_CREDITO"
	PatchResponseCreditPortabilityCancelDataReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE PatchResponseCreditPortabilityCancelDataReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for PatchResponseCreditPortabilityCancelDataRejectedBy.
const (
	PatchResponseCreditPortabilityCancelDataRejectedByPROPONENTE PatchResponseCreditPortabilityCancelDataRejectedBy = "PROPONENTE"
	PatchResponseCreditPortabilityCancelDataRejectedByUSUARIO    PatchResponseCreditPortabilityCancelDataRejectedBy = "USUARIO"
)

// Defines values for RequestCreditPortabilityDataCustomerContactType.
const (
	RequestCreditPortabilityDataCustomerContactTypeEMAIL    RequestCreditPortabilityDataCustomerContactType = "EMAIL"
	RequestCreditPortabilityDataCustomerContactTypeTELEFONE RequestCreditPortabilityDataCustomerContactType = "TELEFONE"
)

// Defines values for RequestCreditPortabilityDataInstitutionProposingContactType.
const (
	RequestCreditPortabilityDataInstitutionProposingContactTypeEMAIL    RequestCreditPortabilityDataInstitutionProposingContactType = "EMAIL"
	RequestCreditPortabilityDataInstitutionProposingContactTypeTELEFONE RequestCreditPortabilityDataInstitutionProposingContactType = "TELEFONE"
)

// Defines values for RequestCreditPortabilityDataProposedContractAmortizationScheduled.
const (
	RequestCreditPortabilityDataProposedContractAmortizationScheduledOUTROS                RequestCreditPortabilityDataProposedContractAmortizationScheduled = "OUTROS"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledPRICE                 RequestCreditPortabilityDataProposedContractAmortizationScheduled = "PRICE"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSAC                   RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SAC"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSAM                   RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SAM"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSEMSISTEMAAMORTIZACAO RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge.
const (
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeFIXO       RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "FIXO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeMAXIMO     RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "MAXIMO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeMINIMO     RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "MINIMO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargePERCENTUAL RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "PERCENTUAL"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType.
const (
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeTypePORPARCELA RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType = "POR_PARCELA"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeTypeUNICA      RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType = "UNICA"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType.
const (
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeIOFCONTRATACAO               RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "IOF_CONTRATACAO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeIOFPORATRASO                 RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "IOF_POR_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeJUROSMORAATRASO              RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "JUROS_MORA_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeJUROSREMUNERATORIOSPORATRASO RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeMULTAATRASOPAGAMENTO         RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "MULTA_ATRASO_PAGAMENTO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeOUTROS                       RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "OUTROS"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeSEMENCARGO                   RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "SEM_ENCARGO"
)

// Defines values for RequestCreditPortabilityDataProposedContractInstalmentPeriodicity.
const (
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityANUAL                   RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "ANUAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityBIMESTRAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "BIMESTRAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityDIARIO                  RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "DIARIO"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityMENSAL                  RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "MENSAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityQUINZENAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "QUINZENAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMANAL                 RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEMANAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMESTRAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEMESTRAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityTRIMESTRAL              RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for RequestCreditPortabilityCancelDataReasonType.
const (
	RequestCreditPortabilityCancelDataReasonTypeCANCELADOPELOCLIENTE                             RequestCreditPortabilityCancelDataReasonType = "CANCELADO_PELO_CLIENTE"
	RequestCreditPortabilityCancelDataReasonTypeOUTROS                                           RequestCreditPortabilityCancelDataReasonType = "OUTROS"
	RequestCreditPortabilityCancelDataReasonTypePOLITICADECREDITO                                RequestCreditPortabilityCancelDataReasonType = "POLITICA_DE_CREDITO"
	RequestCreditPortabilityCancelDataReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE RequestCreditPortabilityCancelDataReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for RequestCreditPortabilityCancelDataRejectedBy.
const (
	RequestCreditPortabilityCancelDataRejectedByPROPONENTE RequestCreditPortabilityCancelDataRejectedBy = "PROPONENTE"
	RequestCreditPortabilityCancelDataRejectedByUSUARIO    RequestCreditPortabilityCancelDataRejectedBy = "USUARIO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataCustomerContactType.
const (
	ResponsePortabilitiesByPortabilityIDDataCustomerContactTypeEMAIL    ResponsePortabilitiesByPortabilityIDDataCustomerContactType = "EMAIL"
	ResponsePortabilitiesByPortabilityIDDataCustomerContactTypeTELEFONE ResponsePortabilitiesByPortabilityIDDataCustomerContactType = "TELEFONE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType.
const (
	ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactTypeEMAIL    ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType = "EMAIL"
	ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactTypeTELEFONE ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType = "TELEFONE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledOUTROS                ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledPRICE                 ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "PRICE"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSAC                   ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SAC"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSAM                   ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SAM"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSEMSISTEMAAMORTIZACAO ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeFIXO       ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "FIXO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeMAXIMO     ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "MAXIMO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeMINIMO     ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "MINIMO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargePERCENTUAL ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "PERCENTUAL"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeTypePORPARCELA ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType = "POR_PARCELA"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeTypeUNICA      ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType = "UNICA"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeIOFCONTRATACAO               ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "IOF_CONTRATACAO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeIOFPORATRASO                 ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "IOF_POR_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeJUROSMORAATRASO              ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "JUROS_MORA_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeJUROSREMUNERATORIOSPORATRASO ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeMULTAATRASOPAGAMENTO         ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "MULTA_ATRASO_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeOUTROS                       ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeSEMENCARGO                   ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "SEM_ENCARGO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityANUAL                   ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "ANUAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityBIMESTRAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "BIMESTRAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityDIARIO                  ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "DIARIO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityMENSAL                  ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "MENSAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityQUINZENAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "QUINZENAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMANAL                 ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEMANAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMESTRAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEMESTRAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityTRIMESTRAL              ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataRejectionReasonType.
const (
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCANCELADOPELOCLIENTE                             ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CANCELADO_PELO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCLIENTECOMACAOJUDICIAL                           ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCONTRATOJALIQUIDADO                              ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CONTRATO_JA_LIQUIDADO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeDECURSODOPRAZOPARAPAGAMENTO                      ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "DECURSO_DO_PRAZO_PARA_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeDIVERGENCIADEPAGAMENTOEFETUADO                   ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "DIVERGENCIA_DE_PAGAMENTO_EFETUADO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeMODALIDADEDAOPERACAOINCOMPATIVEL                 ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "MODALIDADE_DA_OPERACAO_INCOMPATIVEL"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeOUTROS                                           ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePOLITICADECREDITO                                ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "POLITICA_DE_CREDITO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePORTABILIDADECANCELADAPORFALTADELIQUIDACAO       ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePORTABILIDADEEMANDAMENTO                         ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "PORTABILIDADE_EM_ANDAMENTO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeRETENCAODOCLIENTE                                ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "RETENCAO_DO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy.
const (
	CREDORA    ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "CREDORA"
	PROPONENTE ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "PROPONENTE"
	USUARIO    ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "USUARIO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataStatus.
const (
	ResponsePortabilitiesByPortabilityIDDataStatusACCEPTEDSETTLEMENTCOMPLETED  ResponsePortabilitiesByPortabilityIDDataStatus = "ACCEPTED_SETTLEMENT_COMPLETED"
	ResponsePortabilitiesByPortabilityIDDataStatusACCEPTEDSETTLEMENTINPROGRESS ResponsePortabilitiesByPortabilityIDDataStatus = "ACCEPTED_SETTLEMENT_IN_PROGRESS"
	ResponsePortabilitiesByPortabilityIDDataStatusCANCELLED                    ResponsePortabilitiesByPortabilityIDDataStatus = "CANCELLED"
	ResponsePortabilitiesByPortabilityIDDataStatusPAYMENTISSUE                 ResponsePortabilitiesByPortabilityIDDataStatus = "PAYMENT_ISSUE"
	ResponsePortabilitiesByPortabilityIDDataStatusPENDING                      ResponsePortabilitiesByPortabilityIDDataStatus = "PENDING"
	ResponsePortabilitiesByPortabilityIDDataStatusPORTABILITYCOMPLETED         ResponsePortabilitiesByPortabilityIDDataStatus = "PORTABILITY_COMPLETED"
	ResponsePortabilitiesByPortabilityIDDataStatusRECEIVED                     ResponsePortabilitiesByPortabilityIDDataStatus = "RECEIVED"
	ResponsePortabilitiesByPortabilityIDDataStatusREJECTED                     ResponsePortabilitiesByPortabilityIDDataStatus = "REJECTED"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType.
const (
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCANCELADOPELOCLIENTE                             ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CANCELADO_PELO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCLIENTECOMACAOJUDICIAL                           ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCONTRATOJALIQUIDADO                              ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CONTRATO_JA_LIQUIDADO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeDECURSODOPRAZOPARAPAGAMENTO                      ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "DECURSO_DO_PRAZO_PARA_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeDIVERGENCIADEPAGAMENTOEFETUADO                   ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "DIVERGENCIA_DE_PAGAMENTO_EFETUADO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeMODALIDADEDAOPERACAOINCOMPATIVEL                 ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "MODALIDADE_DA_OPERACAO_INCOMPATIVEL"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeOUTROS                                           ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePOLITICADECREDITO                                ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "POLITICA_DE_CREDITO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePORTABILIDADECANCELADAPORFALTADELIQUIDACAO       ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePORTABILIDADEEMANDAMENTO                         ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "PORTABILIDADE_EM_ANDAMENTO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeRETENCAODOCLIENTE                                ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "RETENCAO_DO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityChannel.
const (
	OFB          ResponsePortabilityEligibilityDataPortabilityChannel = "OFB"
	REGISTRADORA ResponsePortabilityEligibilityDataPortabilityChannel = "REGISTRADORA"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType.
const (
	CLIENTECOMACAOJUDICIAL         ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	CONTRATOLIQUIDADO              ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "CONTRATO_LIQUIDADO"
	MODALIDADEOPERACAOINCOMPATIVEL ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "MODALIDADE_OPERACAO_INCOMPATIVEL"
	OUTROS                         ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "OUTROS"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityStatus.
const (
	DISPONIVEL  ResponsePortabilityEligibilityDataPortabilityStatus = "DISPONIVEL"
	EMANDAMENTO ResponsePortabilityEligibilityDataPortabilityStatus = "EM_ANDAMENTO"
)

// EnumReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type EnumReferentialRateIndexerSubType string

// LoansContractInterestRate Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito
type LoansContractInterestRate struct {
	// AdditionalInfo Texto com informações adicionais sobre a composição das taxas de juros pactuadas.
	//
	// [Restrição] Caso a instituição possua a informação para compartilhamento, esta deverá ser informada.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`

	// Calculation Base de cálculo
	Calculation LoansContractInterestRateCalculation `json:"calculation"`

	// InterestRateType "Tipo de Juros  (vide  Enum)
	// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
	// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
	InterestRateType LoansContractInterestRateInterestRateType `json:"interestRateType"`

	// PostFixedRate Taxa pós fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.0045 .O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.1500. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000)
	PostFixedRate string `json:"postFixedRate"`

	// PreFixedRate Taxa pré fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.014500. O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000).
	PreFixedRate string `json:"preFixedRate"`

	// ReferentialRateIndexerAdditionalInfo Campo livre para complementar a informação relativa ao Tipo de taxa referencial ou indexador.
	// [Restrição] Obrigatório para complementar a informação relativa ao Tipo de taxa referencial ou indexador, quando selecionado o tipo ou subtipo `OUTRO`.
	ReferentialRateIndexerAdditionalInfo *string `json:"referentialRateIndexerAdditionalInfo,omitempty"`

	// ReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerSubType *EnumReferentialRateIndexerSubType `json:"referentialRateIndexerSubType,omitempty"`

	// ReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerType LoansContractInterestRateReferentialRateIndexerType `json:"referentialRateIndexerType"`

	// TaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
	// a.m - ao mês
	// a.a. - ao ano"
	TaxPeriodicity LoansContractInterestRateTaxPeriodicity `json:"taxPeriodicity"`

	// TaxType "Tipo de Taxa (vide  Enum)
	// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
	// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
	TaxType LoansContractInterestRateTaxType `json:"taxType"`
}

// LoansContractInterestRateCalculation Base de cálculo
type LoansContractInterestRateCalculation string

// LoansContractInterestRateInterestRateType "Tipo de Juros  (vide  Enum)
// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
type LoansContractInterestRateInterestRateType string

// LoansContractInterestRateReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type LoansContractInterestRateReferentialRateIndexerType string

// LoansContractInterestRateTaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
// a.m - ao mês
// a.a. - ao ano"
type LoansContractInterestRateTaxPeriodicity string

// LoansContractInterestRateTaxType "Tipo de Taxa (vide  Enum)
// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
type LoansContractInterestRateTaxType string

// POSTResponseCreditPortability defines model for POSTResponseCreditPortability.
type POSTResponseCreditPortability struct {
	// Data Conjunto de informações de contratos de empréstimos/financiamentos mantidos pelo cliente na instituição credora e para os quais ele tenha fornecido consentimento
	Data struct {
		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID *string `json:"portabilityId,omitempty"`

		// Status Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
		Status *POSTResponseCreditPortabilityDataStatus `json:"status,omitempty"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// POSTResponseCreditPortabilityDataStatus Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
type POSTResponseCreditPortabilityDataStatus string

// POSTResponseCreditPortabilityPayment defines model for POSTResponseCreditPortabilityPayment.
type POSTResponseCreditPortabilityPayment struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a credora
	Data struct {
		// PaymentAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
		PaymentAmount struct {
			// Amount Valor pago para liquidação do contrato de empréstimo.
			Amount string `json:"amount"`

			// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
			Currency string `json:"currency"`
		} `json:"paymentAmount"`

		// PaymentDateTime Data e hora em que o pagamento à instituição credora foi realizado pela instituição proponente.
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format)
		PaymentDateTime string `json:"paymentDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
		//
		// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
		TransactionID string `json:"transactionId"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// PatchResponseCreditPortabilityCancel defines model for PatchResponseCreditPortabilityCancel.
type PatchResponseCreditPortabilityCancel struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a Credora.
	Data struct {
		// Reason Motivo de recusa do pedido de portabilidade
		Reason struct {
			// Type Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			Type PatchResponseCreditPortabilityCancelDataReasonType `json:"type"`

			// TypeAdditionalInfo Informação adicional sobre rejeição de portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket para o GT de Portabilidade de Crédito como sugestão para estrutura Open Finance para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `type` for igual a `OUTROS`.
			TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
		} `json:"reason"`

		// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
		//
		// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
		//
		// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
		RejectedBy PatchResponseCreditPortabilityCancelDataRejectedBy `json:"rejectedBy"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// PatchResponseCreditPortabilityCancelDataReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type PatchResponseCreditPortabilityCancelDataReasonType string

// PatchResponseCreditPortabilityCancelDataRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
//
// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
//
// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
type PatchResponseCreditPortabilityCancelDataRejectedBy string

// RequestCreditPortability defines model for RequestCreditPortability.
type RequestCreditPortability struct {
	// Data Conjunto de informações referentes à Proposta de Portabilidade de Crédito da Proponente para a Credora
	Data struct {
		ContractIdentification struct {
			// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
			ContractID string `json:"contractId"`

			// ContractNumber Número do contrato dado pela instituição contratante.
			ContractNumber string `json:"contractNumber"`

			// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
			//
			//
			// CNPJ da instituição: 8 (oito) posições iniciais;
			// Modalidade da operação: 4 (quatro) posições;
			// Tipo do cliente: 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica
			//
			// – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
			//
			// - Código do cliente: O número de posições varia conforme o tipo do cliente:
			// Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
			// Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
			// Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
			//
			// - Código do contrato: 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
			IpocCode string `json:"ipocCode"`
		} `json:"contractIdentification"`

		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// CustomerContact Dados de contato do cliente
		CustomerContact []struct {
			// Type Tipo do contato do cliente.
			Type  RequestCreditPortabilityDataCustomerContactType `json:"type"`
			Value string                                          `json:"value"`
		} `json:"customerContact"`

		// Institution Informações sobre proponente e credora participantes do presente pedido de portabilidade de crédito
		Institution struct {
			// Creditor Informações sobre a instituição credora
			Creditor struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Credora.
				CompanyName string `json:"companyName"`
			} `json:"creditor"`

			// Proposing Informações sobre a instituição proponente
			Proposing struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Proponente
				CompanyName string `json:"companyName"`
				Contact     *[]struct {
					// Type Tipo do contato da Instituição Proponente.
					Type  *RequestCreditPortabilityDataInstitutionProposingContactType `json:"type,omitempty"`
					Value *string                                                      `json:"value,omitempty"`
				} `json:"contact,omitempty"`
			} `json:"proposing"`
		} `json:"institution"`

		// ProposedContract Proposta da Proponente para Portabilidade de Crédito
		ProposedContract struct {
			// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas). O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
			//
			//   - Em contratos anteriores a 2008 (para o público PF);
			//
			//   - Em contratos anteriores a 2011 (para o público PJ);
			//
			//   - Público PJ de médio ou grande porte.
			CET string `json:"CET"`

			// AmortizationScheduled Sistema de amortização (Vide Enum):
			//
			// - SAC (Sistema de Amortização Constante): É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
			//
			// - PRICE (Sistema Francês de Amortização): As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
			//
			// - SAM (Sistema de Amortização Misto): Cada prestação (pagamento) é a média aritmética das prestações
			// respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
			//
			// - SEM SISTEMA DE AMORTIZAÇÃO
			AmortizationScheduled RequestCreditPortabilityDataProposedContractAmortizationScheduled `json:"amortizationScheduled"`

			// AmortizationScheduledAdditionalInfo Informação relativa ao complemento da amortização
			//
			// [Restrição] Campo de preenchimento obrigatório quando o campo amortizationScheduled for igual `OUTROS`
			AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

			// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
			ContractedFees []struct {
				// FeeAmount Objeto para representar o valor monetário da tarifa pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
				FeeAmount *struct {
					// Amount Valor monetário da tarifa pactuada no contrato.
					Amount string `json:"amount"`

					// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
					Currency string `json:"currency"`
				} `json:"feeAmount,omitempty"`

				// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
				// - Mínimo
				// - Máximo
				// - Fixo
				// - Percentual"
				FeeCharge RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge `json:"feeCharge"`

				// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
				FeeChargeType RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType `json:"feeChargeType"`

				// FeeCode Sigla identificadora da tarifa pactuada
				FeeCode string `json:"feeCode"`

				// FeeName Denominação da Tarifa pactuada
				FeeName string `json:"feeName"`

				// FeeRate É o valor da tarifa em percentual pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
				FeeRate *string `json:"feeRate,omitempty"`
			} `json:"contractedFees"`

			// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
			ContractedFinanceCharges []struct {
				// ChargeAdditionalInfo Campo para informações adicionais.
				//
				// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
				ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

				// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
				//
				// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
				ChargeRate string `json:"chargeRate"`

				// ChargeType Tipo de encargo pactuado no contrato.
				ChargeType RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType `json:"chargeType"`
			} `json:"contractedFinanceCharges"`
			DigitalSignatureProof struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof"`

			// DueDate Prazo (data de vencimento final) da operação. Especificação RFC-3339.
			DueDate string `json:"dueDate"`

			// InstallmentAmount Objeto para representar o Valor da parcela regular da operação após portabilidade.
			InstallmentAmount struct {
				// Amount Valor da parcela regular da operação após portabilidade. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"installmentAmount"`

			// InstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diário, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
			InstalmentPeriodicity RequestCreditPortabilityDataProposedContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

			// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito.
			// Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
			InterestRates []LoansContractInterestRate `json:"interestRates"`

			// TotalNumberOfInstallments Total de parcelas, segundo a periodicidade regular das parcelas referente à Modalidade de Crédito informada.
			TotalNumberOfInstallments float32 `json:"totalNumberOfInstallments"`
		} `json:"proposedContract"`
	} `json:"data"`
}

// RequestCreditPortabilityDataCustomerContactType Tipo do contato do cliente.
type RequestCreditPortabilityDataCustomerContactType string

// RequestCreditPortabilityDataInstitutionProposingContactType Tipo do contato da Instituição Proponente.
type RequestCreditPortabilityDataInstitutionProposingContactType string

// RequestCreditPortabilityDataProposedContractAmortizationScheduled Sistema de amortização (Vide Enum):
//
// - SAC (Sistema de Amortização Constante): É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
//
// - PRICE (Sistema Francês de Amortização): As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
//
// - SAM (Sistema de Amortização Misto): Cada prestação (pagamento) é a média aritmética das prestações
// respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
//
// - SEM SISTEMA DE AMORTIZAÇÃO
type RequestCreditPortabilityDataProposedContractAmortizationScheduled string

// RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge string

// RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType string

// RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType Tipo de encargo pactuado no contrato.
type RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType string

// RequestCreditPortabilityDataProposedContractInstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diário, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
type RequestCreditPortabilityDataProposedContractInstalmentPeriodicity string

// RequestCreditPortabilityCancel defines model for RequestCreditPortabilityCancel.
type RequestCreditPortabilityCancel struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a Credora.
	Data struct {
		// Reason Motivo de recusa do pedido de portabilidade
		Reason struct {
			// Type Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			Type RequestCreditPortabilityCancelDataReasonType `json:"type"`

			// TypeAdditionalInfo Informação adicional sobre rejeição de portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket para o GT de Portabilidade de Crédito como sugestão para estrutura Open Finance para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `type` for igual a `OUTROS`.
			TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
		} `json:"reason"`

		// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
		//
		// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
		//
		// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
		RejectedBy RequestCreditPortabilityCancelDataRejectedBy `json:"rejectedBy"`
	} `json:"data"`
}

// RequestCreditPortabilityCancelDataReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type RequestCreditPortabilityCancelDataReasonType string

// RequestCreditPortabilityCancelDataRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
//
// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
//
// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
type RequestCreditPortabilityCancelDataRejectedBy string

// RequestCreditPortabilityPayment defines model for RequestCreditPortabilityPayment.
type RequestCreditPortabilityPayment struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a credora
	Data struct {
		// PaymentAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
		PaymentAmount struct {
			// Amount Valor pago para liquidação do contrato de empréstimo.
			Amount string `json:"amount"`

			// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
			Currency string `json:"currency"`
		} `json:"paymentAmount"`

		// PaymentDateTime Data e hora em que o pagamento à instituição credora foi realizado pela instituição proponente.
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format)
		PaymentDateTime string `json:"paymentDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
		//
		// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
		TransactionID string `json:"transactionId"`
	} `json:"data"`
}

// ResponseAccountData defines model for ResponseAccountData.
type ResponseAccountData struct {
	// Data Dados para realização do pagamento da operação via TED
	Data struct {
		StrCode struct {
			// AccountNumber Número da conta bancária da credora a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			AccountNumber *float32 `json:"accountNumber,omitempty"`

			// BranchCode Número da Agência creditada a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			BranchCode float32 `json:"branchCode"`

			// CompanyCnpj CNPJ do proprietário da conta a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			CompanyCnpj *string `json:"companyCnpj,omitempty"`

			// HasFinancialAgent Instituição trabalha com agente financeiro ao invés da conta reserva?
			HasFinancialAgent bool `json:"hasFinancialAgent"`

			// Ispb Número do ISPB da Instituição credora a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			Ispb string `json:"ispb"`

			// Name Nome do proprietário da conta a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			Name *string `json:"name,omitempty"`
		} `json:"strCode"`
	} `json:"data"`
	Links api.Links `json:"links"`
	Meta  api.Meta  `json:"meta"`
}

// ResponseErrorWithAbleAdditionalProperties defines model for ResponseErrorWithAbleAdditionalProperties.
type ResponseErrorWithAbleAdditionalProperties struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponsePortabilitiesByPortabilityID defines model for ResponsePortabilitiesByPortabilityId.
type ResponsePortabilitiesByPortabilityID struct {
	// Data Conjunto de informações referentes à Proposta de Portabilidade de Crédito da Proponente para a Credora
	Data struct {
		ContractIdentification struct {
			// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
			ContractID string `json:"contractId"`

			// ContractNumber Número do contrato dado pela instituição contratante.
			ContractNumber string `json:"contractNumber"`

			// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
			//
			//
			// CNPJ da instituição: 8 (oito) posições iniciais;
			// Modalidade da operação: 4 (quatro) posições;
			// Tipo do cliente: 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica
			//
			// – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
			//
			// - Código do cliente: O número de posições varia conforme o tipo do cliente:
			// Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
			// Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
			// Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
			//
			// - Código do contrato: 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
			IpocCode string `json:"ipocCode"`
		} `json:"contractIdentification"`

		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// CustomerContact Dados de contato do cliente.
		CustomerContact []struct {
			// Type Tipo do contato do cliente.
			Type  ResponsePortabilitiesByPortabilityIDDataCustomerContactType `json:"type"`
			Value string                                                      `json:"value"`
		} `json:"customerContact"`

		// Institution Informações sobre proponente e credora participantes do presente pedido de portabilidade de crédito.
		Institution struct {
			// Creditor Informações sobre a instituição credora.
			Creditor struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Credora.
				CompanyName string `json:"companyName"`
			} `json:"creditor"`

			// Proposing Informações sobre a instituição proponente
			Proposing struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Proponente
				CompanyName string `json:"companyName"`
				Contact     *[]struct {
					// Type Tipo do contato da Instituição Proponente.
					Type  *ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType `json:"type,omitempty"`
					Value *string                                                                  `json:"value,omitempty"`
				} `json:"contact,omitempty"`
			} `json:"proposing"`
		} `json:"institution"`

		// LoanSettlementInstruction Objeto contendo o recibo de quitação do contrato original de empréstimo após finalizado o
		// pedido de portabilidade de crédito com sucesso junto a Instituição Credora.
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando `status` for igual a `PORTABILITY_COMPLETED`
		LoanSettlementInstruction *struct {
			// SettlementAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
			SettlementAmount struct {
				// Amount Valor pago para liquidação do contrato de empréstimo.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"settlementAmount"`

			// SettlementDateTime Data e hora em que a instituição credora realizou a quitação do contrato de empréstimo.
			SettlementDateTime string `json:"settlementDateTime"`

			// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
			//
			// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
			TransactionID string `json:"transactionId"`
		} `json:"loanSettlementInstruction,omitempty"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// ProposedContract Proposta da Proponente para Portabilidade de Crédito.
		ProposedContract struct {
			// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas).
			//
			// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
			//
			// Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
			//
			// - Em contratos anteriores a 2008 (para o público PF);
			// - Em contratos anteriores a 2011 (para o público PJ);
			// - Público PJ de médio ou grande porte.
			CET string `json:"CET"`

			// AmortizationScheduled Sistema de amortização (Vide Enum):
			// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
			// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
			// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
			// - SEM SISTEMA DE AMORTIZAÇÃO
			AmortizationScheduled ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled `json:"amortizationScheduled"`

			// AmortizationScheduledAdditionalInfo Informação relativa ao complemento da amortização
			//
			// [Restrição] Campo de preenchimento obrigatório quando o campo amortizationScheduled for igual `OUTROS`
			AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

			// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
			ContractedFees []struct {
				// FeeAmount Objeto para representar o valor monetário da tarifa pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
				FeeAmount *struct {
					// Amount Valor monetário da tarifa pactuada no contrato.
					Amount string `json:"amount"`

					// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
					Currency string `json:"currency"`
				} `json:"feeAmount,omitempty"`

				// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
				// - Mínimo
				// - Máximo
				// - Fixo
				// - Percentual"
				FeeCharge ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge `json:"feeCharge"`

				// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
				FeeChargeType ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType `json:"feeChargeType"`

				// FeeCode Sigla identificadora da tarifa pactuada
				FeeCode string `json:"feeCode"`

				// FeeName Denominação da Tarifa pactuada
				FeeName string `json:"feeName"`

				// FeeRate É o valor da tarifa em percentual pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
				FeeRate *string `json:"feeRate,omitempty"`
			} `json:"contractedFees"`

			// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
			ContractedFinanceCharges []struct {
				// ChargeAdditionalInfo Campo para informações adicionais.
				//
				// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
				ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

				// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
				//
				// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
				ChargeRate *string `json:"chargeRate,omitempty"`

				// ChargeType Tipo de encargo pactuado no contrato.
				ChargeType ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType `json:"chargeType"`
			} `json:"contractedFinanceCharges"`
			DigitalSignatureProof struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof"`

			// DueDate Prazo (data de vencimento final) da operação. Especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339)
			DueDate string `json:"dueDate"`

			// InstallmentAmount Objeto para representar o Valor da parcela regular da operação após portabilidade.
			InstallmentAmount *struct {
				// Amount Valor da parcela regular da operação após portabilidade. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"installmentAmount,omitempty"`

			// InstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diario, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
			InstalmentPeriodicity ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

			// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito.
			// Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
			InterestRates []LoansContractInterestRate `json:"interestRates"`

			// TotalNumberOfInstallments total de parcelas, segundo a periodicidade regular das parcelas referente à Modalidade de Crédito informada.
			TotalNumberOfInstallments float32 `json:"totalNumberOfInstallments"`
		} `json:"proposedContract"`

		// Rejection Objeto contendo detalhes do cancelamento do pedido de portabilidade de crédito junto a Instituição Credora.
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando `status` for igual a `REJECTED` ou `CANCELLED`
		Rejection *struct {
			// Reason Motivo de recusa do pedido de portabilidade de crédito.
			Reason struct {
				// Type Motivo de recusa do pedido de portabilidade, onde:
				// CANCELADO_PELO_CLIENTE - Cliente desiste do pedido da portabilidade;
				// SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente;
				// POLITICA_DE_CREDITO - Proponente desiste da oferta ao cliente por políticas internas;
				// RETENCAO_DO_CLIENTE - Cliente aceitou contraproposta da instituição credora (dentro do prazo);
				// CONTRATO_JA_LIQUIDADO - Contrato liquidado pelo cliente;
				// DIVERGENCIA_DE_PAGAMENTO_EFETUADO - Proponente realizou a liquidação com valor divergente;
				// DECURSO_DO_PRAZO_PARA_PAGAMENTO - Proponente realizou a liquidação fora do prazo;
				// PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO - Proponente não realizou a liquidação da Portabilidade;
				// PORTABILIDADE_EM_ANDAMENTO - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato;
				// CLIENTE_COM_ACAO_JUDICIAL - Possui ação judicial;
				// MODALIDADE_DA_OPERACAO_INCOMPATIVEL - Modalidade divergente da indicada pela instituição proponente;
				// OUTROS - Motivo da rejeição não se encaixa nas opções disponíveis.
				Type ResponsePortabilitiesByPortabilityIDDataRejectionReasonType `json:"type"`

				// TypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito.
				// Ao utilizar essa opção, é fortemente recomendável enviar um ticket como sugestão da estrutura Open Finance para discussão e mapeamento em futuras versões.
				//
				// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo type for igual a OUTROS.
				TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
			// PROPONENTE - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a
			// proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
			// USUARIO - Indica que o cliente cancelou o pedido de portabilidade de crédito.
			// CREDORA- Indica que a Instituição Credora cancelou o contrato por retenção do cliente ou outros motivos
			// conforme motivo de recusa.
			RejectedBy ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Informação sobre o status de um pedido de portabilidade de crédito, onde:
		//
		// - `RECEIVED`: Estado inicial. Indica que o pedido de portabilidade foi solicitado junto a instituição credora. O pedido deve permanecer neste estado até que o próximo dia útil (D+1) aonde começará a contar o prazo de 3 dias úteis para a etapa de contraproposta e o pedido de portabilidade deverá ser movido para PENDING
		// - `PENDING`: Indica que o pedido de portabilidade de crédito está na fase de contraproposta, onde a instituição credora poderá enviar uma contraproposta ou não para o cliente por qualquer canal (email, telefone, etc.) porém o aceite só deverá ser valido se o cliente aprovar no canal digital da instituição credora
		// - `ACCEPTED_SETTLEMENT_IN_PROGRESS`: Indica que a contraproposta não foi aceita pelo cliente e a instituição proponente terá que quitar o valor do contrato no mesmo dia em que o estado foi ativado
		// - `ACCEPTED_SETTLEMENT_COMPLETED`: Indica que a instituição proponente já liquidou o contrato e comunicou a respeito a credora que está validando os dados do contratos bem como valores recebidos para a quitação do mesmo (nesta etapa a instituição credora tem 2 dias úteis para fornecer a confirmação e o recibo de quitação do contrato de empréstimo)
		// - `PORTABILITY_COMPLETED`: Indica que o pedido de portabilidade foi concluído com sucesso
		// - `REJECTED`: Indica que o pedido de portabilidade de crédito foi rejeitado, seja porque o cliente aceitou a contraproposta, ou porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades
		// - `CANCELLED`: Indica que o cliente cancelou o pedido de portabilidade de crédito
		// - `PAYMENT_ISSUE`: Indica que a Instituição Credora encontrou alguma inconsistência na liquidação efetuada e que a Instituição Proponente deverá realizar ajustes conforme sugerido pela Instituição Credora para solucionar a pendencia antes do cancelamento do pedido de portabilidade de crédito
		Status ResponsePortabilitiesByPortabilityIDDataStatus `json:"status"`

		// StatusReason Motivo de recusa do pedido de portabilidade
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `status` for igual a `REJECTED` ou `CANCELADO` ou `PAYMENT_ISSUE`
		StatusReason *struct {
			// DigitalSignatureProof Comprovante de assinatura da contraproposta
			//
			// [RESTRIÇÃO] Objeto de preenchimento obrigatório quando campo `reasonType` for igual a `RETENCAO_DO_CLIENTE`
			DigitalSignatureProof *struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof,omitempty"`

			// ReasonType Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `RETENCAO_DO_CLIENTE` - Cliente aceitou contraproposta da instituição credora (dentro do prazo)
			//
			// `CONTRATO_JA_LIQUIDADO` - Contrato liquidado pelo cliente.
			//
			// `DIVERGENCIA_DE_PAGAMENTO_EFETUADO` - Proponente realizou a liquidação com valor divergente
			//
			// `DECURSO_DO_PRAZO_PARA_PAGAMENTO` - Proponente realizou a liquidação fora do prazo
			//
			// `PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO` - Proponente não realizou a liquidação do contrato
			//
			// `PORTABILIDADE_EM_ANDAMENTO` - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato.
			//
			// `CLIENTE_COM_ACAO_JUDICIAL` - Possui ação judicial
			//
			// `MODALIDADE_DA_OPERACAO_INCOMPATIVEL` - Modalidade divergente da indicada pela instituição proponente
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			ReasonType *ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType `json:"reasonType,omitempty"`

			// ReasonTypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket como sugestão da estrutura Open Finance
			// para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `reasonType` for igual `OUTROS`
			ReasonTypeAdditionalInfo *string `json:"reasonTypeAdditionalInfo,omitempty"`
		} `json:"statusReason,omitempty"`

		// StatusUpdateDateTime Data e hora em que o contrato teve o status atualizado. Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime string `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links api.Links `json:"links"`
	Meta  api.Meta  `json:"meta"`
}

// ResponsePortabilitiesByPortabilityIDDataCustomerContactType Tipo do contato do cliente.
type ResponsePortabilitiesByPortabilityIDDataCustomerContactType string

// ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType Tipo do contato da Instituição Proponente.
type ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled Sistema de amortização (Vide Enum):
// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
// - SEM SISTEMA DE AMORTIZAÇÃO
type ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType Tipo de encargo pactuado no contrato.
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diario, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
type ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity string

// ResponsePortabilitiesByPortabilityIDDataRejectionReasonType Motivo de recusa do pedido de portabilidade, onde:
// CANCELADO_PELO_CLIENTE - Cliente desiste do pedido da portabilidade;
// SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente;
// POLITICA_DE_CREDITO - Proponente desiste da oferta ao cliente por políticas internas;
// RETENCAO_DO_CLIENTE - Cliente aceitou contraproposta da instituição credora (dentro do prazo);
// CONTRATO_JA_LIQUIDADO - Contrato liquidado pelo cliente;
// DIVERGENCIA_DE_PAGAMENTO_EFETUADO - Proponente realizou a liquidação com valor divergente;
// DECURSO_DO_PRAZO_PARA_PAGAMENTO - Proponente realizou a liquidação fora do prazo;
// PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO - Proponente não realizou a liquidação da Portabilidade;
// PORTABILIDADE_EM_ANDAMENTO - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato;
// CLIENTE_COM_ACAO_JUDICIAL - Possui ação judicial;
// MODALIDADE_DA_OPERACAO_INCOMPATIVEL - Modalidade divergente da indicada pela instituição proponente;
// OUTROS - Motivo da rejeição não se encaixa nas opções disponíveis.
type ResponsePortabilitiesByPortabilityIDDataRejectionReasonType string

// ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
// PROPONENTE - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a
// proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
// USUARIO - Indica que o cliente cancelou o pedido de portabilidade de crédito.
// CREDORA- Indica que a Instituição Credora cancelou o contrato por retenção do cliente ou outros motivos
// conforme motivo de recusa.
type ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy string

// ResponsePortabilitiesByPortabilityIDDataStatus Informação sobre o status de um pedido de portabilidade de crédito, onde:
//
// - `RECEIVED`: Estado inicial. Indica que o pedido de portabilidade foi solicitado junto a instituição credora. O pedido deve permanecer neste estado até que o próximo dia útil (D+1) aonde começará a contar o prazo de 3 dias úteis para a etapa de contraproposta e o pedido de portabilidade deverá ser movido para PENDING
// - `PENDING`: Indica que o pedido de portabilidade de crédito está na fase de contraproposta, onde a instituição credora poderá enviar uma contraproposta ou não para o cliente por qualquer canal (email, telefone, etc.) porém o aceite só deverá ser valido se o cliente aprovar no canal digital da instituição credora
// - `ACCEPTED_SETTLEMENT_IN_PROGRESS`: Indica que a contraproposta não foi aceita pelo cliente e a instituição proponente terá que quitar o valor do contrato no mesmo dia em que o estado foi ativado
// - `ACCEPTED_SETTLEMENT_COMPLETED`: Indica que a instituição proponente já liquidou o contrato e comunicou a respeito a credora que está validando os dados do contratos bem como valores recebidos para a quitação do mesmo (nesta etapa a instituição credora tem 2 dias úteis para fornecer a confirmação e o recibo de quitação do contrato de empréstimo)
// - `PORTABILITY_COMPLETED`: Indica que o pedido de portabilidade foi concluído com sucesso
// - `REJECTED`: Indica que o pedido de portabilidade de crédito foi rejeitado, seja porque o cliente aceitou a contraproposta, ou porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades
// - `CANCELLED`: Indica que o cliente cancelou o pedido de portabilidade de crédito
// - `PAYMENT_ISSUE`: Indica que a Instituição Credora encontrou alguma inconsistência na liquidação efetuada e que a Instituição Proponente deverá realizar ajustes conforme sugerido pela Instituição Credora para solucionar a pendencia antes do cancelamento do pedido de portabilidade de crédito
type ResponsePortabilitiesByPortabilityIDDataStatus string

// ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `RETENCAO_DO_CLIENTE` - Cliente aceitou contraproposta da instituição credora (dentro do prazo)
//
// `CONTRATO_JA_LIQUIDADO` - Contrato liquidado pelo cliente.
//
// `DIVERGENCIA_DE_PAGAMENTO_EFETUADO` - Proponente realizou a liquidação com valor divergente
//
// `DECURSO_DO_PRAZO_PARA_PAGAMENTO` - Proponente realizou a liquidação fora do prazo
//
// `PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO` - Proponente não realizou a liquidação do contrato
//
// `PORTABILIDADE_EM_ANDAMENTO` - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato.
//
// `CLIENTE_COM_ACAO_JUDICIAL` - Possui ação judicial
//
// `MODALIDADE_DA_OPERACAO_INCOMPATIVEL` - Modalidade divergente da indicada pela instituição proponente
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType string

// ResponsePortabilityEligibility defines model for ResponsePortabilityEligibility.
type ResponsePortabilityEligibility struct {
	// Data Conjunto de informações de contratos de empréstimos/financiamentos mantidos pelo cliente na instituição credora e para os quais ele tenha fornecido consentimento
	Data struct {
		// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
		ContractID  string `json:"contractId"`
		Portability struct {
			// Channel Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			Channel *ResponsePortabilityEligibilityDataPortabilityChannel `json:"channel,omitempty"`

			// CompanyCnpj Número completo do CNPJ da instituição
			// O CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.
			// Deve-se ter apenas números do CNPJ, sem máscara
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			CompanyCnpj *string `json:"companyCnpj,omitempty"`

			// CompanyName Nome da Instituição Proponente responsável pelo pedido de portabilidade de credito anterior a atual consulta p.ex.Empresa A.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			CompanyName *string `json:"companyName,omitempty"`

			// Ineligible Objeto para auxiliar a Instituição Proponente a entender o porque um contrato está inelegivel para pedido de portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `FALSE`
			Ineligible *struct {
				// ReasonType Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
				// Informação sobre o motivo de inelegibilidade
				// -`CONTRATO_LIQUIDADO`: Contrato liquidado pelo cliente.
				// -`CLIENTE_COM_ACAO_JUDICIAL`: Cliente possui ação judicial
				// -`MODALIDADE_OPERACAO_INCOMPATIVEL`: Caso o contrato tenha uma modalidade diferente do praticado no escopo de modalidades disponiveis para portabilidade de crédito
				// -`OUTROS`: Caso exista algum motivo de recusa que não se encaixa nas opções disponiveis de `reasonType`, o campo `reasonTypeAdditionalInfo` deverá ser preenchido com o motivo da inelegibilidade.
				ReasonType ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType `json:"reasonType"`

				// ReasonTypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito. Deve ser preenchido como uma proposta para inclusão nas definições, exemplo `MOTIVO_NAO_MAPEADO`: descrição de usar esse motivo específico. Ao utilizar essa opção, é obrigatório enviar um ticket para a estrutura open finance para mapeamento em futuras versões.
				//
				// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `reasonType` for igual a `OUTROS`.
				ReasonTypeAdditionalInfo *string `json:"reasonTypeAdditionalInfo,omitempty"`
			} `json:"ineligible,omitempty"`

			// IsEligible Sinaliza se as características do contrato é elegível para pedido de portabilidade de crédito via OFB (sem considerar a disponibilidade da portabilidade de crédito)
			IsEligible bool `json:"isEligible"`

			// Status Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
			Status *ResponsePortabilityEligibilityDataPortabilityStatus `json:"status,omitempty"`

			// StatusUpdateDateTime Data e hora em que o contrato teve o status atualizado. Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC(UTC time format).
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
			StatusUpdateDateTime *string `json:"statusUpdateDateTime,omitempty"`
		} `json:"portability"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponsePortabilityEligibilityDataPortabilityChannel Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
//
// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
type ResponsePortabilityEligibilityDataPortabilityChannel string

// ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
// Informação sobre o motivo de inelegibilidade
// -`CONTRATO_LIQUIDADO`: Contrato liquidado pelo cliente.
// -`CLIENTE_COM_ACAO_JUDICIAL`: Cliente possui ação judicial
// -`MODALIDADE_OPERACAO_INCOMPATIVEL`: Caso o contrato tenha uma modalidade diferente do praticado no escopo de modalidades disponiveis para portabilidade de crédito
// -`OUTROS`: Caso exista algum motivo de recusa que não se encaixa nas opções disponiveis de `reasonType`, o campo `reasonTypeAdditionalInfo` deverá ser preenchido com o motivo da inelegibilidade.
type ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType string

// ResponsePortabilityEligibilityDataPortabilityStatus Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
//
// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
type ResponsePortabilityEligibilityDataPortabilityStatus string

// XV defines model for X-V.
type XV = string

// Authorization defines model for Authorization.
type Authorization = string

// ContractID defines model for contractId.
type ContractID = string

// PortabilityID defines model for portabilityId.
type PortabilityID = string

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// XIdempotencyKey defines model for xIdempotencyKey.
type XIdempotencyKey = string

// BadRequest defines model for BadRequest.
type BadRequest = ResponseErrorWithAbleAdditionalProperties

// Default defines model for Default.
type Default = ResponseErrorWithAbleAdditionalProperties

// Forbidden defines model for Forbidden.
type Forbidden = ResponseErrorWithAbleAdditionalProperties

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseErrorWithAbleAdditionalProperties

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseErrorWithAbleAdditionalProperties

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseErrorWithAbleAdditionalProperties

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseErrorWithAbleAdditionalProperties

// NotFound defines model for NotFound.
type NotFound = ResponseErrorWithAbleAdditionalProperties

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded = ResponseErrorWithAbleAdditionalProperties

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseErrorWithAbleAdditionalProperties

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams defines parameters for CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility.
type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesParams defines parameters for CreditPortabilityPostPortabilities.
type CreditPortabilityPostPortabilitiesParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`

	// XIdempotencyKey Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.
	XIdempotencyKey XIdempotencyKey `json:"x-idempotency-key"`
}

// CreditPortabilityGetPortabilitiesByPortabilityIDParams defines parameters for CreditPortabilityGetPortabilitiesByPortabilityID.
type CreditPortabilityGetPortabilitiesByPortabilityIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityGetAccountDataParams defines parameters for CreditPortabilityGetAccountData.
type CreditPortabilityGetAccountDataParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams defines parameters for CreditPortabilityPatchPortabilitiesPortabilityIDCancel.
type CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams defines parameters for CreditPortabilityPostPortabilitiesPortabilityIDPayment.
type CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Informa se um contrato pertencente a um determinado cliente estará habilitado para a realização do pedido de portabilidade de crédito considerando a regra de só existir um pedido de portabilidade para um determinado contrato.
	// (GET /credit-operations/{contractId}/portability-eligibility)
	CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request, contractID ContractID, params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams)
	// Realiza pedido de portabilidade de crédito para um determinado contrato junto a instituição credora
	// (POST /portabilities)
	CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request, params CreditPortabilityPostPortabilitiesParams)
	// Consulta portabilidade de crédito através da propriedade portabilityId.
	// (GET /portabilities/{portabilityId})
	CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetPortabilitiesByPortabilityIDParams)
	// Obtém os dados necessários para realização do pagamento da operação via TED.
	// (GET /portabilities/{portabilityId}/account-data)
	CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetAccountDataParams)
	// Comunica a Instituição Credora a respeito do cancelamento da portabilidade de crédito.
	// (PATCH /portabilities/{portabilityId}/cancel)
	CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams)
	// Comunica a Instituição Credora a respeito da liquidação da portabilidade de crédito.
	// (POST /portabilities/{portabilityId}/payment)
	CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeLoansScopes, []string{"openId", "consent:consentId", "loans"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPostPortabilities operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeLoansScopes, []string{"openId", "consent:consentId", "loans"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPostPortabilitiesParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	// ------------- Required header parameter "x-idempotency-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-idempotency-key")]; found {
		var XIdempotencyKey XIdempotencyKey
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-idempotency-key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-idempotency-key", valueList[0], &XIdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-idempotency-key", Err: err})
			return
		}

		params.XIdempotencyKey = XIdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter x-idempotency-key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-idempotency-key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPostPortabilities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityGetPortabilitiesByPortabilityID operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetPortabilitiesByPortabilityIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetPortabilitiesByPortabilityID(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityGetAccountData operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetAccountDataParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetAccountData(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancel operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPostPortabilitiesPortabilityIDPayment operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPostPortabilitiesPortabilityIDPayment(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/credit-operations/{contractId}/portability-eligibility", wrapper.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility)
	m.HandleFunc("POST "+options.BaseURL+"/portabilities", wrapper.CreditPortabilityPostPortabilities)
	m.HandleFunc("GET "+options.BaseURL+"/portabilities/{portabilityId}", wrapper.CreditPortabilityGetPortabilitiesByPortabilityID)
	m.HandleFunc("GET "+options.BaseURL+"/portabilities/{portabilityId}/account-data", wrapper.CreditPortabilityGetAccountData)
	m.HandleFunc("PATCH "+options.BaseURL+"/portabilities/{portabilityId}/cancel", wrapper.CreditPortabilityPatchPortabilitiesPortabilityIDCancel)
	m.HandleFunc("POST "+options.BaseURL+"/portabilities/{portabilityId}/payment", wrapper.CreditPortabilityPostPortabilitiesPortabilityIDPayment)

	return m
}

type BadRequestResponseHeaders struct {
	XV XV
}
type BadRequestApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers BadRequestResponseHeaders
}

type DefaultResponseHeaders struct {
	XV XV
}
type DefaultApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers DefaultResponseHeaders
}

type ForbiddenResponseHeaders struct {
	XV XV
}
type ForbiddenApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers ForbiddenResponseHeaders
}

type GatewayTimeoutResponseHeaders struct {
	XV XV
}
type GatewayTimeoutApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers GatewayTimeoutResponseHeaders
}

type InternalServerErrorResponseHeaders struct {
	XV XV
}
type InternalServerErrorApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers InternalServerErrorResponseHeaders
}

type MethodNotAllowedResponseHeaders struct {
	XV XV
}
type MethodNotAllowedApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers MethodNotAllowedResponseHeaders
}

type NotAcceptableResponseHeaders struct {
	XV XV
}
type NotAcceptableApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers NotAcceptableResponseHeaders
}

type NotFoundResponseHeaders struct {
	XV XV
}
type NotFoundApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers NotFoundResponseHeaders
}

type OKResponseAccountDataResponseHeaders struct {
	XV XV
}
type OKResponseAccountDataApplicationJwtResponse struct {
	Body io.Reader

	Headers       OKResponseAccountDataResponseHeaders
	ContentLength int64
}

type OKResponsePortabilitiesByPortabilityIDResponseHeaders struct {
	XV XV
}
type OKResponsePortabilitiesByPortabilityIDApplicationJwtResponse struct {
	Body io.Reader

	Headers       OKResponsePortabilitiesByPortabilityIDResponseHeaders
	ContentLength int64
}

type OKResponsePortabilityEligibilityResponseHeaders struct {
	XV XV
}
type OKResponsePortabilityEligibilityApplicationJwtResponse struct {
	Body io.Reader

	Headers       OKResponsePortabilityEligibilityResponseHeaders
	ContentLength int64
}

type POSTResponseCreditPortabilityResponseHeaders struct {
	XV XV
}
type POSTResponseCreditPortabilityApplicationJwtResponse struct {
	Body io.Reader

	Headers       POSTResponseCreditPortabilityResponseHeaders
	ContentLength int64
}

type POSTResponseCreditPortabilityPaymentResponseHeaders struct {
	XV XV
}
type POSTResponseCreditPortabilityPaymentApplicationJwtResponse struct {
	Body io.Reader

	Headers       POSTResponseCreditPortabilityPaymentResponseHeaders
	ContentLength int64
}

type PatchResponseCreditPortabilityCancelResponseHeaders struct {
	XV XV
}
type PatchResponseCreditPortabilityCancelApplicationJwtResponse struct {
	Body io.Reader

	Headers       PatchResponseCreditPortabilityCancelResponseHeaders
	ContentLength int64
}

type SiteIsOverloadedResponseHeaders struct {
	XV XV
}
type SiteIsOverloadedApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers SiteIsOverloadedResponseHeaders
}

type UnauthorizedResponseHeaders struct {
	XV XV
}
type UnauthorizedApplicationJSONCharsetUTF8Response struct {
	Body ResponseErrorWithAbleAdditionalProperties

	Headers UnauthorizedResponseHeaders
}

type UnprocessableEntityResponseHeaders struct {
	XV XV
}
type UnprocessableEntityApplicationJwtResponse struct {
	Body io.Reader

	Headers       UnprocessableEntityResponseHeaders
	ContentLength int64
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject interface {
	VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility200ApplicationJwtResponse struct {
	OKResponsePortabilityEligibilityApplicationJwtResponse
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility200ApplicationJwtResponse) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility422ApplicationJwtResponse) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilitydefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilitydefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesRequestObject struct {
	Params CreditPortabilityPostPortabilitiesParams
	Body   io.Reader
}

type CreditPortabilityPostPortabilitiesResponseObject interface {
	VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error
}

type CreditPortabilityPostPortabilities202ApplicationJwtResponse struct {
	POSTResponseCreditPortabilityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilities202ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(202)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilities400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilities422ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilities500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilities529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityPostPortabilitiesdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityGetPortabilitiesByPortabilityIDParams
}

type CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject interface {
	VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetPortabilitiesByPortabilityID200ApplicationJwtResponse struct {
	OKResponsePortabilitiesByPortabilityIDApplicationJwtResponse
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID200ApplicationJwtResponse) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetPortabilitiesByPortabilityID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID422ApplicationJwtResponse) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetPortabilitiesByPortabilityID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityIDdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityGetPortabilitiesByPortabilityIDdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountDataRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityGetAccountDataParams
}

type CreditPortabilityGetAccountDataResponseObject interface {
	VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetAccountData200ApplicationJwtResponse struct {
	OKResponseAccountDataApplicationJwtResponse
}

func (response CreditPortabilityGetAccountData200ApplicationJwtResponse) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetAccountData400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetAccountData422ApplicationJwtResponse) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetAccountData500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountData529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountDatadefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityGetAccountDatadefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams
	Body          io.Reader
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject interface {
	VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel200ApplicationJwtResponse struct {
	PatchResponseCreditPortabilityCancelApplicationJwtResponse
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel200ApplicationJwtResponse) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel422ApplicationJwtResponse) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCanceldefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCanceldefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams
	Body          io.Reader
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject interface {
	VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment202ApplicationJwtResponse struct {
	POSTResponseCreditPortabilityPaymentApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment202ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(202)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment422ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	Headers    DefaultResponseHeaders
	StatusCode int
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPaymentdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("x-v", fmt.Sprint(response.Headers.XV))
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Informa se um contrato pertencente a um determinado cliente estará habilitado para a realização do pedido de portabilidade de crédito considerando a regra de só existir um pedido de portabilidade para um determinado contrato.
	// (GET /credit-operations/{contractId}/portability-eligibility)
	CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(ctx context.Context, request CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject) (CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject, error)
	// Realiza pedido de portabilidade de crédito para um determinado contrato junto a instituição credora
	// (POST /portabilities)
	CreditPortabilityPostPortabilities(ctx context.Context, request CreditPortabilityPostPortabilitiesRequestObject) (CreditPortabilityPostPortabilitiesResponseObject, error)
	// Consulta portabilidade de crédito através da propriedade portabilityId.
	// (GET /portabilities/{portabilityId})
	CreditPortabilityGetPortabilitiesByPortabilityID(ctx context.Context, request CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject) (CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject, error)
	// Obtém os dados necessários para realização do pagamento da operação via TED.
	// (GET /portabilities/{portabilityId}/account-data)
	CreditPortabilityGetAccountData(ctx context.Context, request CreditPortabilityGetAccountDataRequestObject) (CreditPortabilityGetAccountDataResponseObject, error)
	// Comunica a Instituição Credora a respeito do cancelamento da portabilidade de crédito.
	// (PATCH /portabilities/{portabilityId}/cancel)
	CreditPortabilityPatchPortabilitiesPortabilityIDCancel(ctx context.Context, request CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject) (CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject, error)
	// Comunica a Instituição Credora a respeito da liquidação da portabilidade de crédito.
	// (POST /portabilities/{portabilityId}/payment)
	CreditPortabilityPostPortabilitiesPortabilityIDPayment(ctx context.Context, request CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject) (CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility operation middleware
func (sh *strictHandler) CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request, contractID ContractID, params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams) {
	var request CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(ctx, request.(CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPostPortabilities operation middleware
func (sh *strictHandler) CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request, params CreditPortabilityPostPortabilitiesParams) {
	var request CreditPortabilityPostPortabilitiesRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPostPortabilities(ctx, request.(CreditPortabilityPostPortabilitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPostPortabilities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPostPortabilitiesResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPostPortabilitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityGetPortabilitiesByPortabilityID operation middleware
func (sh *strictHandler) CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetPortabilitiesByPortabilityIDParams) {
	var request CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetPortabilitiesByPortabilityID(ctx, request.(CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetPortabilitiesByPortabilityID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityGetAccountData operation middleware
func (sh *strictHandler) CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetAccountDataParams) {
	var request CreditPortabilityGetAccountDataRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetAccountData(ctx, request.(CreditPortabilityGetAccountDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetAccountData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetAccountDataResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetAccountDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancel operation middleware
func (sh *strictHandler) CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams) {
	var request CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPatchPortabilitiesPortabilityIDCancel(ctx, request.(CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPatchPortabilitiesPortabilityIDCancel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPostPortabilitiesPortabilityIDPayment operation middleware
func (sh *strictHandler) CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams) {
	var request CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPostPortabilitiesPortabilityIDPayment(ctx, request.(CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPostPortabilitiesPortabilityIDPayment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N9B6wl7ePH3zfwMAAP//pzCPxzhkAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
