//go:build go1.22

// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v3

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luikyv/mock-bank/internal/api"
	"github.com/luikyv/mock-bank/internal/timeutil"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeScopes = "OAuth2AuthorizationCode.Scopes"
	OAuth2SecurityScopes          = "OAuth2Security.Scopes"
)

// Defines values for N422ResponseErrorCreateConsentErrorsCode.
const (
	N422ResponseErrorCreateConsentErrorsCodeDATAEXPIRACAOINVALIDA       N422ResponseErrorCreateConsentErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	N422ResponseErrorCreateConsentErrorsCodeDEPENDEMULTIPLAALCADA       N422ResponseErrorCreateConsentErrorsCode = "DEPENDE_MULTIPLA_ALCADA"
	N422ResponseErrorCreateConsentErrorsCodeERRONAOMAPEADO              N422ResponseErrorCreateConsentErrorsCode = "ERRO_NAO_MAPEADO"
	N422ResponseErrorCreateConsentErrorsCodeESTADOCONSENTIMENTOINVALIDO N422ResponseErrorCreateConsentErrorsCode = "ESTADO_CONSENTIMENTO_INVALIDO"
)

// Defines values for CreateConsentDataPermissions.
const (
	CreateConsentDataPermissionsACCOUNTSBALANCESREAD                                CreateConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	CreateConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         CreateConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	CreateConsentDataPermissionsACCOUNTSREAD                                        CreateConsentDataPermissions = "ACCOUNTS_READ"
	CreateConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            CreateConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsBANKFIXEDINCOMESREAD                                CreateConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITFIXEDINCOMESREAD                              CreateConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsEXCHANGESREAD                                       CreateConsentDataPermissions = "EXCHANGES_READ"
	CreateConsentDataPermissionsFINANCINGSPAYMENTSREAD                              CreateConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSREAD                                      CreateConsentDataPermissions = "FINANCINGS_READ"
	CreateConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  CreateConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSWARRANTIESREAD                            CreateConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsFUNDSREAD                                           CreateConsentDataPermissions = "FUNDS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       CreateConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSREAD                               CreateConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           CreateConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     CreateConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsLOANSPAYMENTSREAD                                   CreateConsentDataPermissions = "LOANS_PAYMENTS_READ"
	CreateConsentDataPermissionsLOANSREAD                                           CreateConsentDataPermissions = "LOANS_READ"
	CreateConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       CreateConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsLOANSWARRANTIESREAD                                 CreateConsentDataPermissions = "LOANS_WARRANTIES_READ"
	CreateConsentDataPermissionsRESOURCESREAD                                       CreateConsentDataPermissions = "RESOURCES_READ"
	CreateConsentDataPermissionsTREASURETITLESREAD                                  CreateConsentDataPermissions = "TREASURE_TITLES_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	CreateConsentDataPermissionsVARIABLEINCOMESREAD                                 CreateConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for EnumRejectedBy.
const (
	ASPSP EnumRejectedBy = "ASPSP"
	TPP   EnumRejectedBy = "TPP"
	USER  EnumRejectedBy = "USER"
)

// Defines values for ResponseConsentDataPermissions.
const (
	ResponseConsentDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentDataPermissionsACCOUNTSREAD                                        ResponseConsentDataPermissions = "ACCOUNTS_READ"
	ResponseConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsEXCHANGESREAD                                       ResponseConsentDataPermissions = "EXCHANGES_READ"
	ResponseConsentDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSREAD                                      ResponseConsentDataPermissions = "FINANCINGS_READ"
	ResponseConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsFUNDSREAD                                           ResponseConsentDataPermissions = "FUNDS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentDataPermissionsLOANSREAD                                           ResponseConsentDataPermissions = "LOANS_READ"
	ResponseConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentDataPermissionsRESOURCESREAD                                       ResponseConsentDataPermissions = "RESOURCES_READ"
	ResponseConsentDataPermissionsTREASURETITLESREAD                                  ResponseConsentDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentDataStatus.
const (
	ResponseConsentDataStatusAUTHORISED            ResponseConsentDataStatus = "AUTHORISED"
	ResponseConsentDataStatusAWAITINGAUTHORISATION ResponseConsentDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentDataStatusREJECTED              ResponseConsentDataStatus = "REJECTED"
)

// Defines values for ResponseConsentExtensionsDataPermissions.
const (
	ResponseConsentExtensionsDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentExtensionsDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentExtensionsDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSREAD                                        ResponseConsentExtensionsDataPermissions = "ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentExtensionsDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentExtensionsDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentExtensionsDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentExtensionsDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSREAD                                      ResponseConsentExtensionsDataPermissions = "FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentExtensionsDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentExtensionsDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsFUNDSREAD                                           ResponseConsentExtensionsDataPermissions = "FUNDS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentExtensionsDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSREAD                                           ResponseConsentExtensionsDataPermissions = "LOANS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentExtensionsDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentExtensionsDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsRESOURCESREAD                                       ResponseConsentExtensionsDataPermissions = "RESOURCES_READ"
	ResponseConsentExtensionsDataPermissionsTREASURETITLESREAD                                  ResponseConsentExtensionsDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentExtensionsDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentExtensionsDataStatus.
const (
	ResponseConsentExtensionsDataStatusAUTHORISED            ResponseConsentExtensionsDataStatus = "AUTHORISED"
	ResponseConsentExtensionsDataStatusAWAITINGAUTHORISATION ResponseConsentExtensionsDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentExtensionsDataStatusREJECTED              ResponseConsentExtensionsDataStatus = "REJECTED"
)

// Defines values for ResponseConsentReadDataPermissions.
const (
	ResponseConsentReadDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentReadDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentReadDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentReadDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSREAD                                        ResponseConsentReadDataPermissions = "ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentReadDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentReadDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentReadDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsEXCHANGESREAD                                       ResponseConsentReadDataPermissions = "EXCHANGES_READ"
	ResponseConsentReadDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentReadDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSREAD                                      ResponseConsentReadDataPermissions = "FINANCINGS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentReadDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentReadDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsFUNDSREAD                                           ResponseConsentReadDataPermissions = "FUNDS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentReadDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSREAD                                           ResponseConsentReadDataPermissions = "LOANS_READ"
	ResponseConsentReadDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentReadDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentReadDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsRESOURCESREAD                                       ResponseConsentReadDataPermissions = "RESOURCES_READ"
	ResponseConsentReadDataPermissionsTREASURETITLESREAD                                  ResponseConsentReadDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentReadDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentReadDataRejectionReasonCode.
const (
	CONSENTEXPIRED           ResponseConsentReadDataRejectionReasonCode = "CONSENT_EXPIRED"
	CONSENTMAXDATEREACHED    ResponseConsentReadDataRejectionReasonCode = "CONSENT_MAX_DATE_REACHED"
	CONSENTTECHNICALISSUE    ResponseConsentReadDataRejectionReasonCode = "CONSENT_TECHNICAL_ISSUE"
	CUSTOMERMANUALLYREJECTED ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REJECTED"
	CUSTOMERMANUALLYREVOKED  ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REVOKED"
	INTERNALSECURITYREASON   ResponseConsentReadDataRejectionReasonCode = "INTERNAL_SECURITY_REASON"
)

// Defines values for ResponseConsentReadDataStatus.
const (
	AUTHORISED            ResponseConsentReadDataStatus = "AUTHORISED"
	AWAITINGAUTHORISATION ResponseConsentReadDataStatus = "AWAITING_AUTHORISATION"
	REJECTED              ResponseConsentReadDataStatus = "REJECTED"
)

// Defines values for ResponseErrorUnprocessableEntityErrorsCode.
const (
	ResponseErrorUnprocessableEntityErrorsCodeCOMBINACAOPERMISSOESINCORRETA    ResponseErrorUnprocessableEntityErrorsCode = "COMBINACAO_PERMISSOES_INCORRETA"
	ResponseErrorUnprocessableEntityErrorsCodeDATAEXPIRACAOINVALIDA            ResponseErrorUnprocessableEntityErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	ResponseErrorUnprocessableEntityErrorsCodeERRONAOMAPEADO                   ResponseErrorUnprocessableEntityErrorsCode = "ERRO_NAO_MAPEADO"
	ResponseErrorUnprocessableEntityErrorsCodeINFORMACOESPJNAOINFORMADAS       ResponseErrorUnprocessableEntityErrorsCode = "INFORMACOES_PJ_NAO_INFORMADAS"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSAOPFPJEMCONJUNTO          ResponseErrorUnprocessableEntityErrorsCode = "PERMISSAO_PF_PJ_EM_CONJUNTO"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSOESPJINCORRETAS           ResponseErrorUnprocessableEntityErrorsCode = "PERMISSOES_PJ_INCORRETAS"
	ResponseErrorUnprocessableEntityErrorsCodeSEMPERMISSOESFUNCIONAISRESTANTES ResponseErrorUnprocessableEntityErrorsCode = "SEM_PERMISSOES_FUNCIONAIS_RESTANTES"
)

// Defines values for ResponseErrorUnprocessableEntityDeleteErrorsCode.
const (
	CONSENTIMENTOEMSTATUSREJEITADO ResponseErrorUnprocessableEntityDeleteErrorsCode = "CONSENTIMENTO_EM_STATUS_REJEITADO"
)

// N422ResponseErrorCreateConsent defines model for 422ResponseErrorCreateConsent.
type N422ResponseErrorCreateConsent struct {
	Errors []struct {
		// Code Códigos de erros previstos na durante o processo de extensão do consentimento:
		//  - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		//  - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		//  - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		//  - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
		Code N422ResponseErrorCreateConsentErrorsCode `json:"code"`

		// Detail Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: O consentimento informado não pode ser renovado sem redirecionamento porque depende de múltipla alçada para aprovação.
		// - ESTADO_CONSENTIMENTO_INVALIDO: O consentimento informado não pode ser renovado sem redirecionamento porque está em um estado que não permite a renovação.
		// - DATA_EXPIRACAO_INVALIDA: O consentimento informado não pode ser renovado pois a nova data de expiração não segue a convenção do ecossistema.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Detail string `json:"detail"`

		// Title Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		// - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		// - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// N422ResponseErrorCreateConsentErrorsCode Códigos de erros previstos na durante o processo de extensão do consentimento:
//   - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
//   - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
//   - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
//   - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
type N422ResponseErrorCreateConsentErrorsCode string

// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
//
// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
type BusinessEntity struct {
	Document BusinessEntityDocument `json:"document"`
}

// BusinessEntityDocument defines model for BusinessEntityDocument.
type BusinessEntityDocument struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityDocumentExtensions defines model for BusinessEntityDocumentExtensions.
type BusinessEntityDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityExtensions Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
// Deve ser informado apenas para casos de consentimento pessoa jurídica.
// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
type BusinessEntityExtensions struct {
	Document BusinessEntityDocumentExtensions `json:"document"`
}

// CreateConsent defines model for CreateConsent.
type CreateConsent struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		//
		// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
		BusinessEntity *BusinessEntity `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		//
		// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
		LoggedUser  LoggedUser                     `json:"loggedUser"`
		Permissions []CreateConsentDataPermissions `json:"permissions"`
	} `json:"data"`
}

// CreateConsentDataPermissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
type CreateConsentDataPermissions string

// CreateConsentExtensions defines model for CreateConsentExtensions.
type CreateConsentExtensions struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		// Deve ser informado apenas para casos de consentimento pessoa jurídica.
		// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
		BusinessEntity *BusinessEntityExtensions `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`
	} `json:"data"`
}

// EnumRejectedBy Informar usuário responsável pela rejeição.
// 1. USER usuário
// 2. ASPSP instituição transmissora
// 3. TPP instituição receptora
type EnumRejectedBy string

// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
//
// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
type LoggedUser struct {
	Document LoggedUserDocument `json:"document"`
}

// LoggedUserDocument defines model for LoggedUserDocument.
type LoggedUserDocument struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserDocumentExtensions defines model for LoggedUserDocumentExtensions.
type LoggedUserDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserExtensions Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
type LoggedUserExtensions struct {
	Document LoggedUserDocumentExtensions `json:"document"`
}

// ResponseConsent defines model for ResponseConsent.
type ResponseConsent struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentDataPermissions defines model for ResponseConsent.Data.Permissions.
type ResponseConsentDataPermissions string

// ResponseConsentDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentDataStatus string

// ResponseConsentExtensions defines model for ResponseConsentExtensions.
type ResponseConsentExtensions struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentExtensionsDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentExtensionsDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentExtensionsDataPermissions defines model for ResponseConsentExtensions.Data.Permissions.
type ResponseConsentExtensionsDataPermissions string

// ResponseConsentExtensionsDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentExtensionsDataStatus string

// ResponseConsentRead defines model for ResponseConsentRead.
type ResponseConsentRead struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado o campo não deve ser preenchido.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentReadDataPermissions `json:"permissions"`

		// Rejection Objeto a ser retornado caso o consentimento seja rejeitado.
		Rejection *struct {
			// Reason Define a razão pela qual o consentimento foi rejeitado.
			Reason struct {
				// AdditionalInformation Contém informações adicionais a critério da transmissora.
				AdditionalInformation *string `json:"additionalInformation,omitempty"`

				// Code Define o código da razão pela qual o consentimento foi rejeitado.
				//
				// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
				// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
				// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
				// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
				// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
				// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
				Code ResponseConsentReadDataRejectionReasonCode `json:"code"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição.
			// 1. USER usuário
			// 2. ASPSP instituição transmissora
			// 3. TPP instituição receptora
			RejectedBy EnumRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentReadDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentReadDataPermissions defines model for ResponseConsentRead.Data.Permissions.
type ResponseConsentReadDataPermissions string

// ResponseConsentReadDataRejectionReasonCode Define o código da razão pela qual o consentimento foi rejeitado.
//
// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
type ResponseConsentReadDataRejectionReasonCode string

// ResponseConsentReadDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentReadDataStatus string

// ResponseConsentReadExtensions defines model for ResponseConsentReadExtensions.
type ResponseConsentReadExtensions struct {
	Data []struct {
		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format), utilizado apenas para consulta de alterações históricas de extensão do consentimento.
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		//
		// Em casos de consentimento com prazo indeterminada o campo não deve ser preenchido.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`

		// PreviousExpirationDateTime Data e hora de expiração anteriores a renovação. Reflete a data limite anterior de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado, ou renovações feitas com a v2.2.0 em que não exista persistência dessa informação, o campo não deve ser preenchido.
		PreviousExpirationDateTime *timeutil.DateTime `json:"previousExpirationDateTime,omitempty"`

		// RequestDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		RequestDateTime timeutil.DateTime `json:"requestDateTime"`

		// XCustomerUserAgent Indica o user-agent que o usuário utilizou quando solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XCustomerUserAgent *string `json:"xCustomerUserAgent,omitempty"`

		// XFapiCustomerIPAddress O endereço IP do usuário logado com o receptor que solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XFapiCustomerIPAddress *string `json:"xFapiCustomerIpAddress,omitempty"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntity defines model for ResponseErrorUnprocessableEntity.
type ResponseErrorUnprocessableEntity struct {
	Errors []struct {
		// Code - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
		// - INFORMACOES_PJ_NAO_INFORMADAS
		// - PERMISSOES_PJ_INCORRETAS
		// - PERMISSAO_PF_PJ_EM_CONJUNTO
		// - COMBINACAO_PERMISSOES_INCORRETA
		// - DATA_EXPIRACAO_INVALIDA
		// - ERRO_NAO_MAPEADO
		//
		// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
		Code ResponseErrorUnprocessableEntityErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico.
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityErrorsCode - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
// - INFORMACOES_PJ_NAO_INFORMADAS
// - PERMISSOES_PJ_INCORRETAS
// - PERMISSAO_PF_PJ_EM_CONJUNTO
// - COMBINACAO_PERMISSOES_INCORRETA
// - DATA_EXPIRACAO_INVALIDA
// - ERRO_NAO_MAPEADO
//
// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
type ResponseErrorUnprocessableEntityErrorsCode string

// ResponseErrorUnprocessableEntityDelete defines model for ResponseErrorUnprocessableEntityDelete.
type ResponseErrorUnprocessableEntityDelete struct {
	Errors []struct {
		// Code - CONSENTIMENTO_EM_STATUS_REJEITADO
		Code ResponseErrorUnprocessableEntityDeleteErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityDeleteErrorsCode - CONSENTIMENTO_EM_STATUS_REJEITADO
type ResponseErrorUnprocessableEntityDeleteErrorsCode string

// Authorization defines model for Authorization.
type Authorization = string

// AuthorizationExtensions defines model for AuthorizationExtensions.
type AuthorizationExtensions = string

// ConsentID defines model for ConsentId.
type ConsentID = string

// Page defines model for Page.
type Page = int32

// PageSize defines model for PageSize.
type PageSize = int32

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XCustomerUserAgentExtensions defines model for xCustomerUserAgentExtensions.
type XCustomerUserAgentExtensions = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiCustomerIPAddressExtensions defines model for xFapiCustomerIpAddressExtensions.
type XFapiCustomerIPAddressExtensions = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// N200ConsentsConsentIDRead defines model for 200ConsentsConsentIdRead.
type N200ConsentsConsentIDRead = ResponseConsentRead

// N200ConsentsConsentIDReadExtensions defines model for 200ConsentsConsentIdReadExtensions.
type N200ConsentsConsentIDReadExtensions = ResponseConsentReadExtensions

// N201ConsentsCreated defines model for 201ConsentsCreated.
type N201ConsentsCreated = ResponseConsent

// N201ConsentsCreatedExtensions defines model for 201ConsentsCreatedExtensions.
type N201ConsentsCreatedExtensions = ResponseConsentExtensions

// BadRequest defines model for BadRequest.
type BadRequest = ResponseError

// Forbidden defines model for Forbidden.
type Forbidden = ResponseError

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseError

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseError

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseError

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseError

// NotFound defines model for NotFound.
type NotFound = ResponseError

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timeutil.BrazilDate `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = ResponseError

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseError

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ResponseErrorUnprocessableEntity

// UnprocessableEntityConsents defines model for UnprocessableEntityConsents.
type UnprocessableEntityConsents = N422ResponseErrorCreateConsent

// UnprocessableEntityDelete defines model for UnprocessableEntityDelete.
type UnprocessableEntityDelete = ResponseErrorUnprocessableEntityDelete

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = ResponseError

// ConsentsPostConsentsParams defines parameters for ConsentsPostConsents.
type ConsentsPostConsentsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsDeleteConsentsConsentIDParams defines parameters for ConsentsDeleteConsentsConsentID.
type ConsentsDeleteConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsGetConsentsConsentIDParams defines parameters for ConsentsGetConsentsConsentID.
type ConsentsGetConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsConsentIDExtendsParams defines parameters for ConsentsPostConsentsConsentIDExtends.
type ConsentsPostConsentsConsentIDExtendsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions `json:"x-fapi-customer-ip-address"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent XCustomerUserAgentExtensions `json:"x-customer-user-agent"`
}

// ConsentsGetConsentsConsentIDExtensionsParams defines parameters for ConsentsGetConsentsConsentIDExtensions.
type ConsentsGetConsentsConsentIDExtensionsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas. A transmissora deve considerar entrada como 25, caso seja informado algum valor menor pela receptora. Enquanto houver mais que 25 registros a enviar, a transmissora deve considerar o mínimo por página como 25. Somente a última página retornada (ou primeira, no caso de página única) pode conter menos de 25 registros. Mais informações, acesse Especificações de APIs > Padrões > Paginação.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsJSONRequestBody defines body for ConsentsPostConsents for application/json ContentType.
type ConsentsPostConsentsJSONRequestBody = CreateConsent

// ConsentsPostConsentsConsentIDExtendsJSONRequestBody defines body for ConsentsPostConsentsConsentIDExtends for application/json ContentType.
type ConsentsPostConsentsConsentIDExtendsJSONRequestBody = CreateConsentExtensions

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConsentsPostConsents operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsDeleteConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsDeleteConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsDeleteConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeScopes, []string{"openid", "consent:consentId"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsConsentIDExtendsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Required header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = XFapiCustomerIPAddress

	} else {
		err := fmt.Errorf("Header parameter x-fapi-customer-ip-address is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-customer-ip-address", Err: err})
		return
	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Required header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgentExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = XCustomerUserAgent

	} else {
		err := fmt.Errorf("Header parameter x-customer-user-agent is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-customer-user-agent", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsentsConsentIDExtends(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDExtensionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentIDExtensions(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/consents", wrapper.ConsentsPostConsents)
	m.HandleFunc("DELETE "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsDeleteConsentsConsentID)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsGetConsentsConsentID)
	m.HandleFunc("POST "+options.BaseURL+"/consents/{consentId}/extends", wrapper.ConsentsPostConsentsConsentIDExtends)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}/extensions", wrapper.ConsentsGetConsentsConsentIDExtensions)

	return m
}

type N200ConsentsConsentIDReadJSONResponse ResponseConsentRead

type N200ConsentsConsentIDReadExtensionsJSONResponse ResponseConsentReadExtensions

type N201ConsentsCreatedJSONResponse ResponseConsent

type N201ConsentsCreatedExtensionsJSONResponse ResponseConsentExtensions

type N204ConsentsConsentIDDeletedResponse struct {
}

type BadRequestApplicationJSONCharsetUTF8Response ResponseError

type ForbiddenApplicationJSONCharsetUTF8Response ResponseError

type GatewayTimeoutApplicationJSONCharsetUTF8Response ResponseError

type InternalServerErrorApplicationJSONCharsetUTF8Response ResponseError

type MethodNotAllowedApplicationJSONCharsetUTF8Response ResponseError

type NotAcceptableApplicationJSONCharsetUTF8Response ResponseError

type NotFoundApplicationJSONCharsetUTF8Response ResponseError

type SiteIsOverloadedApplicationJSONCharsetUTF8Response struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timeutil.BrazilDate `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

type TooManyRequestsApplicationJSONCharsetUTF8Response ResponseError

type UnauthorizedApplicationJSONCharsetUTF8Response ResponseError

type UnprocessableEntityApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntity

type UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response N422ResponseErrorCreateConsent

type UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntityDelete

type UnsupportedMediaTypeApplicationJSONCharsetUTF8Response ResponseError

type ConsentsPostConsentsRequestObject struct {
	Params ConsentsPostConsentsParams
	Body   *ConsentsPostConsentsJSONRequestBody
}

type ConsentsPostConsentsResponseObject interface {
	VisitConsentsPostConsentsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsents201JSONResponse struct {
	N201ConsentsCreatedJSONResponse
}

func (response ConsentsPostConsents201JSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsdefaultJSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsDeleteConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsDeleteConsentsConsentIDParams
}

type ConsentsDeleteConsentsConsentIDResponseObject interface {
	VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsDeleteConsentsConsentID204Response = N204ConsentsConsentIDDeletedResponse

func (response ConsentsDeleteConsentsConsentID204Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsDeleteConsentsConsentIDdefaultJSONResponse) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDParams
}

type ConsentsGetConsentsConsentIDResponseObject interface {
	VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentID200JSONResponse struct {
	N200ConsentsConsentIDReadJSONResponse
}

func (response ConsentsGetConsentsConsentID200JSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDdefaultJSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsPostConsentsConsentIDExtendsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsPostConsentsConsentIDExtendsParams
	Body      *ConsentsPostConsentsConsentIDExtendsJSONRequestBody
}

type ConsentsPostConsentsConsentIDExtendsResponseObject interface {
	VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsentsConsentIDExtends201JSONResponse struct {
	N201ConsentsCreatedExtensionsJSONResponse
}

func (response ConsentsPostConsentsConsentIDExtends201JSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDExtensionsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDExtensionsParams
}

type ConsentsGetConsentsConsentIDExtensionsResponseObject interface {
	VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentIDExtensions200JSONResponse struct {
	N200ConsentsConsentIDReadExtensionsJSONResponse
}

func (response ConsentsGetConsentsConsentIDExtensions200JSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(ctx context.Context, request ConsentsPostConsentsRequestObject) (ConsentsPostConsentsResponseObject, error)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(ctx context.Context, request ConsentsDeleteConsentsConsentIDRequestObject) (ConsentsDeleteConsentsConsentIDResponseObject, error)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(ctx context.Context, request ConsentsGetConsentsConsentIDRequestObject) (ConsentsGetConsentsConsentIDResponseObject, error)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(ctx context.Context, request ConsentsPostConsentsConsentIDExtendsRequestObject) (ConsentsPostConsentsConsentIDExtendsResponseObject, error)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(ctx context.Context, request ConsentsGetConsentsConsentIDExtensionsRequestObject) (ConsentsGetConsentsConsentIDExtensionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ConsentsPostConsents operation middleware
func (sh *strictHandler) ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams) {
	var request ConsentsPostConsentsRequestObject

	request.Params = params

	var body ConsentsPostConsentsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsents(ctx, request.(ConsentsPostConsentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsDeleteConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams) {
	var request ConsentsDeleteConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsDeleteConsentsConsentID(ctx, request.(ConsentsDeleteConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsDeleteConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsDeleteConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsDeleteConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams) {
	var request ConsentsGetConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentID(ctx, request.(ConsentsGetConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (sh *strictHandler) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams) {
	var request ConsentsPostConsentsConsentIDExtendsRequestObject

	request.ConsentID = consentID
	request.Params = params

	var body ConsentsPostConsentsConsentIDExtendsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsentsConsentIDExtends(ctx, request.(ConsentsPostConsentsConsentIDExtendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsentsConsentIDExtends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsConsentIDExtendsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsConsentIDExtendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams) {
	var request ConsentsGetConsentsConsentIDExtensionsRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentIDExtensions(ctx, request.(ConsentsGetConsentsConsentIDExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentIDExtensions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDExtensionsResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDExtensionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/yhYZgFWJgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
