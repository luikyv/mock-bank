//go:build go1.22

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luikyv/mock-bank/internal/api"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeLoansScopes = "OAuth2AuthorizationCodeLoans.Scopes"
	OAuth2ClientCredentialsScopes      = "OAuth2ClientCredentials.Scopes"
)

// Defines values for EnumReferentialRateIndexerSubType.
const (
	EnumReferentialRateIndexerSubTypeCDI                   EnumReferentialRateIndexerSubType = "CDI"
	EnumReferentialRateIndexerSubTypeIGPM                  EnumReferentialRateIndexerSubType = "IGPM"
	EnumReferentialRateIndexerSubTypeIPCA                  EnumReferentialRateIndexerSubType = "IPCA"
	EnumReferentialRateIndexerSubTypeIPCC                  EnumReferentialRateIndexerSubType = "IPCC"
	EnumReferentialRateIndexerSubTypeLIBOR                 EnumReferentialRateIndexerSubType = "LIBOR"
	EnumReferentialRateIndexerSubTypeOUTRASTAXASFLUTUANTES EnumReferentialRateIndexerSubType = "OUTRAS_TAXAS_FLUTUANTES"
	EnumReferentialRateIndexerSubTypeOUTRASTAXASPOSFIXADAS EnumReferentialRateIndexerSubType = "OUTRAS_TAXAS_POS_FIXADAS"
	EnumReferentialRateIndexerSubTypeOUTROSINDEXADORES     EnumReferentialRateIndexerSubType = "OUTROS_INDEXADORES"
	EnumReferentialRateIndexerSubTypeOUTROSINDICESPRECO    EnumReferentialRateIndexerSubType = "OUTROS_INDICES_PRECO"
	EnumReferentialRateIndexerSubTypePREFIXADO             EnumReferentialRateIndexerSubType = "PRE_FIXADO"
	EnumReferentialRateIndexerSubTypeSELIC                 EnumReferentialRateIndexerSubType = "SELIC"
	EnumReferentialRateIndexerSubTypeSEMSUBTIPOINDEXADOR   EnumReferentialRateIndexerSubType = "SEM_SUB_TIPO_INDEXADOR"
	EnumReferentialRateIndexerSubTypeTCRPOS                EnumReferentialRateIndexerSubType = "TCR_POS"
	EnumReferentialRateIndexerSubTypeTCRPRE                EnumReferentialRateIndexerSubType = "TCR_PRE"
	EnumReferentialRateIndexerSubTypeTJLP                  EnumReferentialRateIndexerSubType = "TJLP"
	EnumReferentialRateIndexerSubTypeTLP                   EnumReferentialRateIndexerSubType = "TLP"
	EnumReferentialRateIndexerSubTypeTRFCPOS               EnumReferentialRateIndexerSubType = "TRFC_POS"
	EnumReferentialRateIndexerSubTypeTRFCPRE               EnumReferentialRateIndexerSubType = "TRFC_PRE"
	EnumReferentialRateIndexerSubTypeTRTBF                 EnumReferentialRateIndexerSubType = "TR_TBF"
)

// Defines values for LoansContractInterestRateCalculation.
const (
	N21252 LoansContractInterestRateCalculation = "21/252"
	N30360 LoansContractInterestRateCalculation = "30/360"
	N30365 LoansContractInterestRateCalculation = "30/365"
)

// Defines values for LoansContractInterestRateInterestRateType.
const (
	COMPOSTO LoansContractInterestRateInterestRateType = "COMPOSTO"
	SIMPLES  LoansContractInterestRateInterestRateType = "SIMPLES"
)

// Defines values for LoansContractInterestRateReferentialRateIndexerType.
const (
	LoansContractInterestRateReferentialRateIndexerTypeCREDITORURAL      LoansContractInterestRateReferentialRateIndexerType = "CREDITO_RURAL"
	LoansContractInterestRateReferentialRateIndexerTypeFLUTUANTES        LoansContractInterestRateReferentialRateIndexerType = "FLUTUANTES"
	LoansContractInterestRateReferentialRateIndexerTypeINDICESPRECOS     LoansContractInterestRateReferentialRateIndexerType = "INDICES_PRECOS"
	LoansContractInterestRateReferentialRateIndexerTypeOUTROSINDEXADORES LoansContractInterestRateReferentialRateIndexerType = "OUTROS_INDEXADORES"
	LoansContractInterestRateReferentialRateIndexerTypePOSFIXADO         LoansContractInterestRateReferentialRateIndexerType = "POS_FIXADO"
	LoansContractInterestRateReferentialRateIndexerTypePREFIXADO         LoansContractInterestRateReferentialRateIndexerType = "PRE_FIXADO"
	LoansContractInterestRateReferentialRateIndexerTypeSEMTIPOINDEXADOR  LoansContractInterestRateReferentialRateIndexerType = "SEM_TIPO_INDEXADOR"
)

// Defines values for LoansContractInterestRateTaxPeriodicity.
const (
	AA LoansContractInterestRateTaxPeriodicity = "AA"
	AM LoansContractInterestRateTaxPeriodicity = "AM"
)

// Defines values for LoansContractInterestRateTaxType.
const (
	EFETIVA LoansContractInterestRateTaxType = "EFETIVA"
	NOMINAL LoansContractInterestRateTaxType = "NOMINAL"
)

// Defines values for POSTResponseCreditPortabilityDataStatus.
const (
	POSTResponseCreditPortabilityDataStatusCANCELLED POSTResponseCreditPortabilityDataStatus = "CANCELLED"
	POSTResponseCreditPortabilityDataStatusPENDING   POSTResponseCreditPortabilityDataStatus = "PENDING"
	POSTResponseCreditPortabilityDataStatusRECEIVED  POSTResponseCreditPortabilityDataStatus = "RECEIVED"
)

// Defines values for PatchResponseCreditPortabilityCancelDataReasonType.
const (
	PatchResponseCreditPortabilityCancelDataReasonTypeCANCELADOPELOCLIENTE                             PatchResponseCreditPortabilityCancelDataReasonType = "CANCELADO_PELO_CLIENTE"
	PatchResponseCreditPortabilityCancelDataReasonTypeOUTROS                                           PatchResponseCreditPortabilityCancelDataReasonType = "OUTROS"
	PatchResponseCreditPortabilityCancelDataReasonTypePOLITICADECREDITO                                PatchResponseCreditPortabilityCancelDataReasonType = "POLITICA_DE_CREDITO"
	PatchResponseCreditPortabilityCancelDataReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE PatchResponseCreditPortabilityCancelDataReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for PatchResponseCreditPortabilityCancelDataRejectedBy.
const (
	PatchResponseCreditPortabilityCancelDataRejectedByPROPONENTE PatchResponseCreditPortabilityCancelDataRejectedBy = "PROPONENTE"
	PatchResponseCreditPortabilityCancelDataRejectedByUSUARIO    PatchResponseCreditPortabilityCancelDataRejectedBy = "USUARIO"
)

// Defines values for RequestCreditPortabilityDataCustomerContactType.
const (
	RequestCreditPortabilityDataCustomerContactTypeEMAIL    RequestCreditPortabilityDataCustomerContactType = "EMAIL"
	RequestCreditPortabilityDataCustomerContactTypeTELEFONE RequestCreditPortabilityDataCustomerContactType = "TELEFONE"
)

// Defines values for RequestCreditPortabilityDataInstitutionProposingContactType.
const (
	RequestCreditPortabilityDataInstitutionProposingContactTypeEMAIL    RequestCreditPortabilityDataInstitutionProposingContactType = "EMAIL"
	RequestCreditPortabilityDataInstitutionProposingContactTypeTELEFONE RequestCreditPortabilityDataInstitutionProposingContactType = "TELEFONE"
)

// Defines values for RequestCreditPortabilityDataProposedContractAmortizationScheduled.
const (
	RequestCreditPortabilityDataProposedContractAmortizationScheduledOUTROS                RequestCreditPortabilityDataProposedContractAmortizationScheduled = "OUTROS"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledPRICE                 RequestCreditPortabilityDataProposedContractAmortizationScheduled = "PRICE"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSAC                   RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SAC"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSAM                   RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SAM"
	RequestCreditPortabilityDataProposedContractAmortizationScheduledSEMSISTEMAAMORTIZACAO RequestCreditPortabilityDataProposedContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge.
const (
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeFIXO       RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "FIXO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeMAXIMO     RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "MAXIMO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeMINIMO     RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "MINIMO"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargePERCENTUAL RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge = "PERCENTUAL"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType.
const (
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeTypePORPARCELA RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType = "POR_PARCELA"
	RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeTypeUNICA      RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType = "UNICA"
)

// Defines values for RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType.
const (
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeIOFCONTRATACAO               RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "IOF_CONTRATACAO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeIOFPORATRASO                 RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "IOF_POR_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeJUROSMORAATRASO              RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "JUROS_MORA_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeJUROSREMUNERATORIOSPORATRASO RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeMULTAATRASOPAGAMENTO         RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "MULTA_ATRASO_PAGAMENTO"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeOUTROS                       RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "OUTROS"
	RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeTypeSEMENCARGO                   RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType = "SEM_ENCARGO"
)

// Defines values for RequestCreditPortabilityDataProposedContractInstalmentPeriodicity.
const (
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityANUAL                   RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "ANUAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityBIMESTRAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "BIMESTRAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityDIARIO                  RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "DIARIO"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityMENSAL                  RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "MENSAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityQUINZENAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "QUINZENAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMANAL                 RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEMANAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMESTRAL               RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEMESTRAL"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	RequestCreditPortabilityDataProposedContractInstalmentPeriodicityTRIMESTRAL              RequestCreditPortabilityDataProposedContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for RequestCreditPortabilityCancelDataReasonType.
const (
	RequestCreditPortabilityCancelDataReasonTypeCANCELADOPELOCLIENTE                             RequestCreditPortabilityCancelDataReasonType = "CANCELADO_PELO_CLIENTE"
	RequestCreditPortabilityCancelDataReasonTypeOUTROS                                           RequestCreditPortabilityCancelDataReasonType = "OUTROS"
	RequestCreditPortabilityCancelDataReasonTypePOLITICADECREDITO                                RequestCreditPortabilityCancelDataReasonType = "POLITICA_DE_CREDITO"
	RequestCreditPortabilityCancelDataReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE RequestCreditPortabilityCancelDataReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for RequestCreditPortabilityCancelDataRejectedBy.
const (
	RequestCreditPortabilityCancelDataRejectedByPROPONENTE RequestCreditPortabilityCancelDataRejectedBy = "PROPONENTE"
	RequestCreditPortabilityCancelDataRejectedByUSUARIO    RequestCreditPortabilityCancelDataRejectedBy = "USUARIO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataCustomerContactType.
const (
	ResponsePortabilitiesByPortabilityIDDataCustomerContactTypeEMAIL    ResponsePortabilitiesByPortabilityIDDataCustomerContactType = "EMAIL"
	ResponsePortabilitiesByPortabilityIDDataCustomerContactTypeTELEFONE ResponsePortabilitiesByPortabilityIDDataCustomerContactType = "TELEFONE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType.
const (
	ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactTypeEMAIL    ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType = "EMAIL"
	ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactTypeTELEFONE ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType = "TELEFONE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledOUTROS                ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledPRICE                 ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "PRICE"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSAC                   ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SAC"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSAM                   ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SAM"
	ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduledSEMSISTEMAAMORTIZACAO ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled = "SEM_SISTEMA_AMORTIZACAO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeFIXO       ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "FIXO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeMAXIMO     ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "MAXIMO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeMINIMO     ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "MINIMO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargePERCENTUAL ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge = "PERCENTUAL"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeTypePORPARCELA ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType = "POR_PARCELA"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeTypeUNICA      ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType = "UNICA"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeIOFCONTRATACAO               ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "IOF_CONTRATACAO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeIOFPORATRASO                 ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "IOF_POR_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeJUROSMORAATRASO              ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "JUROS_MORA_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeJUROSREMUNERATORIOSPORATRASO ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "JUROS_REMUNERATORIOS_POR_ATRASO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeMULTAATRASOPAGAMENTO         ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "MULTA_ATRASO_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeOUTROS                       ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeTypeSEMENCARGO                   ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType = "SEM_ENCARGO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity.
const (
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityANUAL                   ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "ANUAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityBIMESTRAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "BIMESTRAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityDIARIO                  ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "DIARIO"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityMENSAL                  ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "MENSAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityQUINZENAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "QUINZENAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMANAL                 ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEMANAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMESTRAL               ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEMESTRAL"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicitySEMPERIODICIDADEREGULAR ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "SEM_PERIODICIDADE_REGULAR"
	ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicityTRIMESTRAL              ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity = "TRIMESTRAL"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataRejectionReasonType.
const (
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCANCELADOPELOCLIENTE                             ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CANCELADO_PELO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCLIENTECOMACAOJUDICIAL                           ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeCONTRATOJALIQUIDADO                              ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "CONTRATO_JA_LIQUIDADO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeDECURSODOPRAZOPARAPAGAMENTO                      ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "DECURSO_DO_PRAZO_PARA_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeDIVERGENCIADEPAGAMENTOEFETUADO                   ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "DIVERGENCIA_DE_PAGAMENTO_EFETUADO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeMODALIDADEDAOPERACAOINCOMPATIVEL                 ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "MODALIDADE_DA_OPERACAO_INCOMPATIVEL"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeOUTROS                                           ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePOLITICADECREDITO                                ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "POLITICA_DE_CREDITO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePORTABILIDADECANCELADAPORFALTADELIQUIDACAO       ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypePORTABILIDADEEMANDAMENTO                         ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "PORTABILIDADE_EM_ANDAMENTO"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeRETENCAODOCLIENTE                                ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "RETENCAO_DO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataRejectionReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE ResponsePortabilitiesByPortabilityIDDataRejectionReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy.
const (
	CREDORA    ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "CREDORA"
	PROPONENTE ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "PROPONENTE"
	USUARIO    ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy = "USUARIO"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataStatus.
const (
	ResponsePortabilitiesByPortabilityIDDataStatusACCEPTEDSETTLEMENTCOMPLETED  ResponsePortabilitiesByPortabilityIDDataStatus = "ACCEPTED_SETTLEMENT_COMPLETED"
	ResponsePortabilitiesByPortabilityIDDataStatusACCEPTEDSETTLEMENTINPROGRESS ResponsePortabilitiesByPortabilityIDDataStatus = "ACCEPTED_SETTLEMENT_IN_PROGRESS"
	ResponsePortabilitiesByPortabilityIDDataStatusCANCELLED                    ResponsePortabilitiesByPortabilityIDDataStatus = "CANCELLED"
	ResponsePortabilitiesByPortabilityIDDataStatusPAYMENTISSUE                 ResponsePortabilitiesByPortabilityIDDataStatus = "PAYMENT_ISSUE"
	ResponsePortabilitiesByPortabilityIDDataStatusPENDING                      ResponsePortabilitiesByPortabilityIDDataStatus = "PENDING"
	ResponsePortabilitiesByPortabilityIDDataStatusPORTABILITYCOMPLETED         ResponsePortabilitiesByPortabilityIDDataStatus = "PORTABILITY_COMPLETED"
	ResponsePortabilitiesByPortabilityIDDataStatusRECEIVED                     ResponsePortabilitiesByPortabilityIDDataStatus = "RECEIVED"
	ResponsePortabilitiesByPortabilityIDDataStatusREJECTED                     ResponsePortabilitiesByPortabilityIDDataStatus = "REJECTED"
)

// Defines values for ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType.
const (
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCANCELADOPELOCLIENTE                             ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CANCELADO_PELO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCLIENTECOMACAOJUDICIAL                           ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeCONTRATOJALIQUIDADO                              ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "CONTRATO_JA_LIQUIDADO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeDECURSODOPRAZOPARAPAGAMENTO                      ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "DECURSO_DO_PRAZO_PARA_PAGAMENTO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeDIVERGENCIADEPAGAMENTOEFETUADO                   ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "DIVERGENCIA_DE_PAGAMENTO_EFETUADO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeMODALIDADEDAOPERACAOINCOMPATIVEL                 ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "MODALIDADE_DA_OPERACAO_INCOMPATIVEL"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeOUTROS                                           ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "OUTROS"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePOLITICADECREDITO                                ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "POLITICA_DE_CREDITO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePORTABILIDADECANCELADAPORFALTADELIQUIDACAO       ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypePORTABILIDADEEMANDAMENTO                         ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "PORTABILIDADE_EM_ANDAMENTO"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeRETENCAODOCLIENTE                                ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "RETENCAO_DO_CLIENTE"
	ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonTypeSALDODEVEDORATUALIZADOSUBSTANCIALMENTEDIVERGENTE ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType = "SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityChannel.
const (
	OFB          ResponsePortabilityEligibilityDataPortabilityChannel = "OFB"
	REGISTRADORA ResponsePortabilityEligibilityDataPortabilityChannel = "REGISTRADORA"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType.
const (
	CLIENTECOMACAOJUDICIAL         ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "CLIENTE_COM_ACAO_JUDICIAL"
	CONTRATOLIQUIDADO              ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "CONTRATO_LIQUIDADO"
	MODALIDADEOPERACAOINCOMPATIVEL ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "MODALIDADE_OPERACAO_INCOMPATIVEL"
	OUTROS                         ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType = "OUTROS"
)

// Defines values for ResponsePortabilityEligibilityDataPortabilityStatus.
const (
	DISPONIVEL  ResponsePortabilityEligibilityDataPortabilityStatus = "DISPONIVEL"
	EMANDAMENTO ResponsePortabilityEligibilityDataPortabilityStatus = "EM_ANDAMENTO"
)

// EnumReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type EnumReferentialRateIndexerSubType string

// LoansContractInterestRate Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito
type LoansContractInterestRate struct {
	// AdditionalInfo Texto com informações adicionais sobre a composição das taxas de juros pactuadas.
	//
	// [Restrição] Caso a instituição possua a informação para compartilhamento, esta deverá ser informada.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`

	// Calculation Base de cálculo
	Calculation LoansContractInterestRateCalculation `json:"calculation"`

	// InterestRateType "Tipo de Juros  (vide  Enum)
	// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
	// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
	InterestRateType LoansContractInterestRateInterestRateType `json:"interestRateType"`

	// PostFixedRate Taxa pós fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.0045 .O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.1500. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000)
	PostFixedRate string `json:"postFixedRate"`

	// PreFixedRate Taxa pré fixada aplicada sob o contrato da modalidade crédito. p.ex. 0.014500. O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Preencher o campo não aplicável ao contrato com zeros, seguindo o pattern (0.000000).
	PreFixedRate string `json:"preFixedRate"`

	// ReferentialRateIndexerAdditionalInfo Campo livre para complementar a informação relativa ao Tipo de taxa referencial ou indexador.
	// [Restrição] Obrigatório para complementar a informação relativa ao Tipo de taxa referencial ou indexador, quando selecionado o tipo ou subtipo `OUTRO`.
	ReferentialRateIndexerAdditionalInfo *string `json:"referentialRateIndexerAdditionalInfo,omitempty"`

	// ReferentialRateIndexerSubType "Sub tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerSubType *EnumReferentialRateIndexerSubType `json:"referentialRateIndexerSubType,omitempty"`

	// ReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
	ReferentialRateIndexerType LoansContractInterestRateReferentialRateIndexerType `json:"referentialRateIndexerType"`

	// TaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
	// a.m - ao mês
	// a.a. - ao ano"
	TaxPeriodicity LoansContractInterestRateTaxPeriodicity `json:"taxPeriodicity"`

	// TaxType "Tipo de Taxa (vide  Enum)
	// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
	// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
	TaxType LoansContractInterestRateTaxType `json:"taxType"`
}

// LoansContractInterestRateCalculation Base de cálculo
type LoansContractInterestRateCalculation string

// LoansContractInterestRateInterestRateType "Tipo de Juros  (vide  Enum)
// - SIMPLES (aplicada/cobrada sempre sobre o capital inicial, que é o valor emprestado/investido. Não há cobrança de juros sobre juros acumulados no(s) período(s) anterior(es). Exemplo: em um empréstimo de R$1.000, com taxa de juros simples de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano e R$ 80 no segundo ano. Ao final do contrato, o tomador irá devolver o principal e os juros simples de cada ano: R$1.000+R$80+R$80=R$1.160)
// - COMPOSTO (para cada período do contrato (diário, mensal, anual etc.), há um “novo capital” para a cobrança da taxa de juros contratada. Esse “novo capital” é a soma do capital e do juro cobrado no período anterior. Exemplo: em um empréstimo de R$1.000, com taxa de juros composta de 8% a.a., com duração de 2 anos, o total de juros será R$80 no primeiro ano. No segundo ano, os juros vão ser somados ao capital (R$1.000 + R$ 80 = R$ 1.080), resultando em juros de R$ 86 (8%de R$ 1.080))"
type LoansContractInterestRateInterestRateType string

// LoansContractInterestRateReferentialRateIndexerType "Tipos de taxas referenciais ou indexadores, conforme Anexo 5: Taxa referencial ou Indexador (Indx), do Documento 3040"
type LoansContractInterestRateReferentialRateIndexerType string

// LoansContractInterestRateTaxPeriodicity "Periodicidade da taxa . (Vide  Enum)
// a.m - ao mês
// a.a. - ao ano"
type LoansContractInterestRateTaxPeriodicity string

// LoansContractInterestRateTaxType "Tipo de Taxa (vide  Enum)
// - NOMINAL (taxa nominal é uma taxa de juros em que a unidade referencial não coincide com a unidade de tempo da capitalização. Ela é sempre fornecida em termos anuais, e seus períodos de capitalização podem ser diários, mensais, trimestrais ou semestrais. p.ex. Uma taxa de 12% ao ano com capitalização mensal)
// - EFETIVA (É a taxa de juros em que a unidade referencial coincide com a unidade de tempo da capitalização. Como as unidades de medida de tempo da taxa de juros e dos períodos de capitalização são iguais, usa-se exemplos simples como 1% ao mês, 60% ao ano)"
type LoansContractInterestRateTaxType string

// POSTResponseCreditPortability defines model for POSTResponseCreditPortability.
type POSTResponseCreditPortability struct {
	// Data Conjunto de informações de contratos de empréstimos/financiamentos mantidos pelo cliente na instituição credora e para os quais ele tenha fornecido consentimento
	Data struct {
		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// Status Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
		Status *POSTResponseCreditPortabilityDataStatus `json:"status,omitempty"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// POSTResponseCreditPortabilityDataStatus Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
type POSTResponseCreditPortabilityDataStatus string

// POSTResponseCreditPortabilityPayment defines model for POSTResponseCreditPortabilityPayment.
type POSTResponseCreditPortabilityPayment struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a credora
	Data struct {
		// PaymentAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
		PaymentAmount struct {
			// Amount Valor pago para liquidação do contrato de empréstimo.
			Amount string `json:"amount"`

			// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
			Currency string `json:"currency"`
		} `json:"paymentAmount"`

		// PaymentDateTime Data e hora em que o pagamento à instituição credora foi realizado pela instituição proponente.
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format)
		PaymentDateTime string `json:"paymentDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
		//
		// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
		TransactionID string `json:"transactionId"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// PatchResponseCreditPortabilityCancel defines model for PatchResponseCreditPortabilityCancel.
type PatchResponseCreditPortabilityCancel struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a Credora.
	Data struct {
		// Reason Motivo de recusa do pedido de portabilidade
		Reason struct {
			// Type Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			Type PatchResponseCreditPortabilityCancelDataReasonType `json:"type"`

			// TypeAdditionalInfo Informação adicional sobre rejeição de portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket para o GT de Portabilidade de Crédito como sugestão para estrutura Open Finance para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `type` for igual a `OUTROS`.
			TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
		} `json:"reason"`

		// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
		//
		// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
		//
		// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
		RejectedBy PatchResponseCreditPortabilityCancelDataRejectedBy `json:"rejectedBy"`
	} `json:"data"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// PatchResponseCreditPortabilityCancelDataReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type PatchResponseCreditPortabilityCancelDataReasonType string

// PatchResponseCreditPortabilityCancelDataRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
//
// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
//
// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
type PatchResponseCreditPortabilityCancelDataRejectedBy string

// RequestCreditPortability defines model for RequestCreditPortability.
type RequestCreditPortability struct {
	// Data Conjunto de informações referentes à Proposta de Portabilidade de Crédito da Proponente para a Credora
	Data struct {
		ContractIdentification struct {
			// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
			ContractID string `json:"contractId"`

			// ContractNumber Número do contrato dado pela instituição contratante.
			ContractNumber string `json:"contractNumber"`

			// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
			//
			//
			// CNPJ da instituição: 8 (oito) posições iniciais;
			// Modalidade da operação: 4 (quatro) posições;
			// Tipo do cliente: 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica
			//
			// – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
			//
			// - Código do cliente: O número de posições varia conforme o tipo do cliente:
			// Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
			// Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
			// Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
			//
			// - Código do contrato: 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
			IpocCode string `json:"ipocCode"`
		} `json:"contractIdentification"`

		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// CustomerContact Dados de contato do cliente
		CustomerContact []struct {
			// Type Tipo do contato do cliente.
			Type  RequestCreditPortabilityDataCustomerContactType `json:"type"`
			Value string                                          `json:"value"`
		} `json:"customerContact"`

		// Institution Informações sobre proponente e credora participantes do presente pedido de portabilidade de crédito
		Institution struct {
			// Creditor Informações sobre a instituição credora
			Creditor struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Credora.
				CompanyName string `json:"companyName"`
			} `json:"creditor"`

			// Proposing Informações sobre a instituição proponente
			Proposing struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Proponente
				CompanyName string `json:"companyName"`
				Contact     *[]struct {
					// Type Tipo do contato da Instituição Proponente.
					Type  *RequestCreditPortabilityDataInstitutionProposingContactType `json:"type,omitempty"`
					Value *string                                                      `json:"value,omitempty"`
				} `json:"contact,omitempty"`
			} `json:"proposing"`
		} `json:"institution"`

		// ProposedContract Proposta da Proponente para Portabilidade de Crédito
		ProposedContract struct {
			// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas). O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%). Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
			//
			//   - Em contratos anteriores a 2008 (para o público PF);
			//
			//   - Em contratos anteriores a 2011 (para o público PJ);
			//
			//   - Público PJ de médio ou grande porte.
			CET string `json:"CET"`

			// AmortizationScheduled Sistema de amortização (Vide Enum):
			//
			// - SAC (Sistema de Amortização Constante): É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
			//
			// - PRICE (Sistema Francês de Amortização): As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
			//
			// - SAM (Sistema de Amortização Misto): Cada prestação (pagamento) é a média aritmética das prestações
			// respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
			//
			// - SEM SISTEMA DE AMORTIZAÇÃO
			AmortizationScheduled RequestCreditPortabilityDataProposedContractAmortizationScheduled `json:"amortizationScheduled"`

			// AmortizationScheduledAdditionalInfo Informação relativa ao complemento da amortização
			//
			// [Restrição] Campo de preenchimento obrigatório quando o campo amortizationScheduled for igual `OUTROS`
			AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

			// ContractAmount Valor do saldo remanescente do contrato de empréstimo original utilizado para compor a proposta.
			ContractAmount struct {
				// Amount Valor do saldo remanescente do contrato de empréstimo original utilizado para compor a proposta.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217
				Currency string `json:"currency"`
			} `json:"contractAmount"`

			// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
			ContractedFees []struct {
				// FeeAmount Objeto para representar o valor monetário da tarifa pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
				FeeAmount *struct {
					// Amount Valor monetário da tarifa pactuada no contrato.
					Amount string `json:"amount"`

					// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
					Currency string `json:"currency"`
				} `json:"feeAmount,omitempty"`

				// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
				// - Mínimo
				// - Máximo
				// - Fixo
				// - Percentual"
				FeeCharge RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge `json:"feeCharge"`

				// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
				FeeChargeType RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType `json:"feeChargeType"`

				// FeeCode Sigla identificadora da tarifa pactuada
				FeeCode string `json:"feeCode"`

				// FeeName Denominação da Tarifa pactuada
				FeeName string `json:"feeName"`

				// FeeRate É o valor da tarifa em percentual pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
				FeeRate *string `json:"feeRate,omitempty"`
			} `json:"contractedFees"`

			// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
			ContractedFinanceCharges []struct {
				// ChargeAdditionalInfo Campo para informações adicionais.
				//
				// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
				ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

				// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
				//
				// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
				ChargeRate string `json:"chargeRate"`

				// ChargeType Tipo de encargo pactuado no contrato.
				ChargeType RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType `json:"chargeType"`
			} `json:"contractedFinanceCharges"`
			DigitalSignatureProof struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof"`

			// DueDate Prazo (data de vencimento final) da operação. Especificação RFC-3339.
			DueDate string `json:"dueDate"`

			// InstallmentAmount Objeto para representar o Valor da parcela regular da operação após portabilidade.
			InstallmentAmount struct {
				// Amount Valor da parcela regular da operação após portabilidade. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"installmentAmount"`

			// InstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diário, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
			InstalmentPeriodicity RequestCreditPortabilityDataProposedContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

			// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito.
			// Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
			InterestRates []LoansContractInterestRate `json:"interestRates"`

			// TotalNumberOfInstallments Total de parcelas, segundo a periodicidade regular das parcelas referente à Modalidade de Crédito informada.
			TotalNumberOfInstallments float32 `json:"totalNumberOfInstallments"`
		} `json:"proposedContract"`
	} `json:"data"`
}

// RequestCreditPortabilityDataCustomerContactType Tipo do contato do cliente.
type RequestCreditPortabilityDataCustomerContactType string

// RequestCreditPortabilityDataInstitutionProposingContactType Tipo do contato da Instituição Proponente.
type RequestCreditPortabilityDataInstitutionProposingContactType string

// RequestCreditPortabilityDataProposedContractAmortizationScheduled Sistema de amortização (Vide Enum):
//
// - SAC (Sistema de Amortização Constante): É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
//
// - PRICE (Sistema Francês de Amortização): As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
//
// - SAM (Sistema de Amortização Misto): Cada prestação (pagamento) é a média aritmética das prestações
// respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
//
// - SEM SISTEMA DE AMORTIZAÇÃO
type RequestCreditPortabilityDataProposedContractAmortizationScheduled string

// RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type RequestCreditPortabilityDataProposedContractContractedFeesFeeCharge string

// RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type RequestCreditPortabilityDataProposedContractContractedFeesFeeChargeType string

// RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType Tipo de encargo pactuado no contrato.
type RequestCreditPortabilityDataProposedContractContractedFinanceChargesChargeType string

// RequestCreditPortabilityDataProposedContractInstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diário, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
type RequestCreditPortabilityDataProposedContractInstalmentPeriodicity string

// RequestCreditPortabilityCancel defines model for RequestCreditPortabilityCancel.
type RequestCreditPortabilityCancel struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a Credora.
	Data struct {
		// Reason Motivo de recusa do pedido de portabilidade
		Reason struct {
			// Type Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			Type RequestCreditPortabilityCancelDataReasonType `json:"type"`

			// TypeAdditionalInfo Informação adicional sobre rejeição de portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket para o GT de Portabilidade de Crédito como sugestão para estrutura Open Finance para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `type` for igual a `OUTROS`.
			TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
		} `json:"reason"`

		// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
		//
		// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
		//
		// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
		RejectedBy RequestCreditPortabilityCancelDataRejectedBy `json:"rejectedBy"`
	} `json:"data"`
}

// RequestCreditPortabilityCancelDataReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type RequestCreditPortabilityCancelDataReasonType string

// RequestCreditPortabilityCancelDataRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
//
// `PROPONENTE ` - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
//
// `USUARIO` - Indica que o cliente cancelou o pedido de portabilidade de crédito.
type RequestCreditPortabilityCancelDataRejectedBy string

// RequestCreditPortabilityPayment defines model for RequestCreditPortabilityPayment.
type RequestCreditPortabilityPayment struct {
	// Data Objeto para notificar a respeito da liquidação efetuada pela proponente a credora
	Data struct {
		// PaymentAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
		PaymentAmount struct {
			// Amount Valor pago para liquidação do contrato de empréstimo.
			Amount string `json:"amount"`

			// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
			Currency string `json:"currency"`
		} `json:"paymentAmount"`

		// PaymentDateTime Data e hora em que o pagamento à instituição credora foi realizado pela instituição proponente.
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format)
		PaymentDateTime string `json:"paymentDateTime"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
		//
		// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
		TransactionID string `json:"transactionId"`
	} `json:"data"`
}

// ResponseAccountData defines model for ResponseAccountData.
type ResponseAccountData struct {
	// Data Dados para realização do pagamento da operação via TED
	Data struct {
		StrCode struct {
			// AccountNumber Número da conta bancária da credora a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			AccountNumber *float32 `json:"accountNumber,omitempty"`

			// BranchCode Número da Agência creditada a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			BranchCode float32 `json:"branchCode"`

			// CompanyCnpj CNPJ do proprietário da conta a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			CompanyCnpj *string `json:"companyCnpj,omitempty"`

			// HasFinancialAgent Instituição trabalha com agente financeiro ao invés da conta reserva?
			HasFinancialAgent bool `json:"hasFinancialAgent"`

			// Ispb Número do ISPB da Instituição credora a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			Ispb string `json:"ispb"`

			// Name Nome do proprietário da conta a ser usada na STR para pagamento de portabilidade de crédito exclusiva para o OFB.
			//
			// [RESTRIÇÃO] campo de preenchimento obrigatório quando campo `hasFinancialAgent` for igual a true
			Name *string `json:"name,omitempty"`
		} `json:"strCode"`
	} `json:"data"`
	Links api.Links `json:"links"`
	Meta  api.Meta  `json:"meta"`
}

// ResponseErrorWithAbleAdditionalProperties defines model for ResponseErrorWithAbleAdditionalProperties.
type ResponseErrorWithAbleAdditionalProperties struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponsePortabilitiesByPortabilityID defines model for ResponsePortabilitiesByPortabilityId.
type ResponsePortabilitiesByPortabilityID struct {
	// Data Conjunto de informações referentes à Proposta de Portabilidade de Crédito da Proponente para a Credora
	Data struct {
		ContractIdentification struct {
			// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
			ContractID string `json:"contractId"`

			// ContractNumber Número do contrato dado pela instituição contratante.
			ContractNumber string `json:"contractNumber"`

			// IpocCode Número padronizado do contrato - IPOC (Identificação Padronizada da Operação de Crédito). Segundo DOC 3040, composta por:
			//
			//
			// CNPJ da instituição: 8 (oito) posições iniciais;
			// Modalidade da operação: 4 (quatro) posições;
			// Tipo do cliente: 1 (uma) posição( 1 = pessoa natural - CPF, 2= pessoa jurídica
			//
			// – CNPJ, 3 = pessoa física no exterior, 4 = pessoa jurídica no exterior, 5 = pessoa natural sem CPF e 6 = pessoa jurídica sem CNPJ);
			//
			// - Código do cliente: O número de posições varia conforme o tipo do cliente:
			// Para clientes pessoa física com CPF (tipo de cliente = 1), informar as 11 (onze) posições do CPF;
			// Para clientes pessoa jurídica com CNPJ (tipo de cliente = 2), informar as 8 (oito) posições iniciais do CNPJ;
			// Para os demais clientes (tipos de cliente 3, 4, 5 e 6), informar 14 (catorze) posições com complemento de zeros à esquerda se a identificação tiver tamanho inferior;
			//
			// - Código do contrato: 1 (uma) até 40 (quarenta) posições, sem complemento de caracteres.
			IpocCode string `json:"ipocCode"`
		} `json:"contractIdentification"`

		// CreationDateTime Data e hora em que a Proponente registrou a presente proposta (chamada ao POST /portabilities).
		// Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC-0 (UTC time format).
		CreationDateTime string `json:"creationDateTime"`

		// CustomerContact Dados de contato do cliente.
		CustomerContact []struct {
			// Type Tipo do contato do cliente.
			Type  ResponsePortabilitiesByPortabilityIDDataCustomerContactType `json:"type"`
			Value string                                                      `json:"value"`
		} `json:"customerContact"`

		// Institution Informações sobre proponente e credora participantes do presente pedido de portabilidade de crédito.
		Institution struct {
			// Creditor Informações sobre a instituição credora.
			Creditor struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Credora.
				CompanyName string `json:"companyName"`
			} `json:"creditor"`

			// Proposing Informações sobre a instituição proponente
			Proposing struct {
				// CompanyCnpj Número completo do CNPJ da instituição responsável pelo Cadastro - o CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica. Deve-se ter apenas os números do CNPJ, sem máscara.
				CompanyCnpj string `json:"companyCnpj"`

				// CompanyName Nome da Instituição Proponente
				CompanyName string `json:"companyName"`
				Contact     *[]struct {
					// Type Tipo do contato da Instituição Proponente.
					Type  *ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType `json:"type,omitempty"`
					Value *string                                                                  `json:"value,omitempty"`
				} `json:"contact,omitempty"`
			} `json:"proposing"`
		} `json:"institution"`

		// LoanSettlementInstruction Objeto contendo o recibo de quitação do contrato original de empréstimo após finalizado o
		// pedido de portabilidade de crédito com sucesso junto a Instituição Credora.
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando `status` for igual a `PORTABILITY_COMPLETED`
		LoanSettlementInstruction *struct {
			// SettlementAmount Objeto para representar o valor pago para liquidação do contrato de empréstimo.
			SettlementAmount struct {
				// Amount Valor pago para liquidação do contrato de empréstimo.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"settlementAmount"`

			// SettlementDateTime Data e hora em que a instituição credora realizou a quitação do contrato de empréstimo.
			SettlementDateTime string `json:"settlementDateTime"`

			// TransactionID Identificador da transação utilizada para proponente liquidar a portabilidade de crédito com a credora.
			//
			// No contexto da STR0052, utilizar o valor do campo de retorno NumCtrlSTR (Numero de Controle da STR)
			TransactionID string `json:"transactionId"`
		} `json:"loanSettlementInstruction,omitempty"`

		// PortabilityID Código identificador do pedido de portabilidade realizado.
		PortabilityID string `json:"portabilityId"`

		// ProposedContract Proposta da Proponente para Portabilidade de Crédito.
		ProposedContract struct {
			// CET CET – Custo Efetivo Total deve ser expresso na forma de taxa percentual anual e incorpora todos os encargos e despesas incidentes nas operações de crédito (taxa de juro, mas também tarifas, tributos, seguros e outras despesas cobradas).
			//
			// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
			//
			// Para o público PF (pessoa física) o campo é de envio obrigatório para contratos firmados a partir de 2008, conforme Resolução CMN 3.517. Para o público PJ (pessoa jurídica) o campo é de envio obrigatório para contratos firmados a partir de 2011, conforme Resolução CMN 3.909. O campo poderá ser preenchido com 0.00 em cenários nos quais a casa não tenha a informação de CET (Custo efetivo total) apenas para as exceções listadas abaixo:
			//
			// - Em contratos anteriores a 2008 (para o público PF);
			// - Em contratos anteriores a 2011 (para o público PJ);
			// - Público PJ de médio ou grande porte.
			CET string `json:"CET"`

			// AmortizationScheduled Sistema de amortização (Vide Enum):
			// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
			// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
			// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
			// - SEM SISTEMA DE AMORTIZAÇÃO
			AmortizationScheduled ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled `json:"amortizationScheduled"`

			// AmortizationScheduledAdditionalInfo Informação relativa ao complemento da amortização
			//
			// [Restrição] Campo de preenchimento obrigatório quando o campo amortizationScheduled for igual `OUTROS`
			AmortizationScheduledAdditionalInfo *string `json:"amortizationScheduledAdditionalInfo,omitempty"`

			// ContractAmount Valor do saldo remanescente do contrato de empréstimo original utilizado para compor a proposta.
			ContractAmount struct {
				// Amount Valor do saldo remanescente do contrato de empréstimo original utilizado para compor a proposta.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217
				Currency string `json:"currency"`
			} `json:"contractAmount"`

			// ContractedFees Lista que traz as informações das tarifas pactuadas no contrato.
			ContractedFees []struct {
				// FeeAmount Objeto para representar o valor monetário da tarifa pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for diferente de Percentual.
				FeeAmount *struct {
					// Amount Valor monetário da tarifa pactuada no contrato.
					Amount string `json:"amount"`

					// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
					Currency string `json:"currency"`
				} `json:"feeAmount,omitempty"`

				// FeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
				// - Mínimo
				// - Máximo
				// - Fixo
				// - Percentual"
				FeeCharge ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge `json:"feeCharge"`

				// FeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
				FeeChargeType ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType `json:"feeChargeType"`

				// FeeCode Sigla identificadora da tarifa pactuada
				FeeCode string `json:"feeCode"`

				// FeeName Denominação da Tarifa pactuada
				FeeName string `json:"feeName"`

				// FeeRate É o valor da tarifa em percentual pactuada no contrato.
				//
				// [Restrição] Preenchimento obrigatório quando a forma de cobrança for Percentual.
				FeeRate *string `json:"feeRate,omitempty"`
			} `json:"contractedFees"`

			// ContractedFinanceCharges Lista que traz os encargos pactuados no contrato
			ContractedFinanceCharges []struct {
				// ChargeAdditionalInfo Campo para informações adicionais.
				//
				// [Restrição] Obrigatório se selecionada a opção 'OUTROS' em Tipo de encargo pactuado no contrato.
				ChargeAdditionalInfo *string `json:"chargeAdditionalInfo,omitempty"`

				// ChargeRate Representa o valor do encargo em percentual pactuado no contrato.
				//
				// O preenchimento deve respeitar as 6 casas decimais, mesmo que venham preenchidas com zeros(representação de porcentagem p.ex: 0.150000. Este valor representa 15%. O valor 1 representa 100%).
				ChargeRate *string `json:"chargeRate,omitempty"`

				// ChargeType Tipo de encargo pactuado no contrato.
				ChargeType ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType `json:"chargeType"`
			} `json:"contractedFinanceCharges"`
			DigitalSignatureProof struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof"`

			// DueDate Prazo (data de vencimento final) da operação. Especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339)
			DueDate string `json:"dueDate"`

			// InstallmentAmount Objeto para representar o Valor da parcela regular da operação após portabilidade.
			InstallmentAmount *struct {
				// Amount Valor da parcela regular da operação após portabilidade. Expresso em valor monetário com no mínimo 2 casas e no máximo 4 casas decimais.
				Amount string `json:"amount"`

				// Currency Moeda referenciada ao campo `amount`, segundo modelo ISO-4217.
				Currency string `json:"currency"`
			} `json:"installmentAmount,omitempty"`

			// InstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diario, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
			InstalmentPeriodicity ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity `json:"instalmentPeriodicity"`

			// InterestRates Objeto que traz o conjunto de informações necessárias para demonstrar a composição das taxas de juros remuneratórios da Modalidade de crédito.
			// Caso o contrato não possua taxas de juros, deve ser compartilhada uma lista vazia. Caso o contrato possua uma taxa de juros com valor 0, deve ser compartilhado um objeto com o valor 0 de forma explícita.
			InterestRates []LoansContractInterestRate `json:"interestRates"`

			// TotalNumberOfInstallments total de parcelas, segundo a periodicidade regular das parcelas referente à Modalidade de Crédito informada.
			TotalNumberOfInstallments float32 `json:"totalNumberOfInstallments"`
		} `json:"proposedContract"`

		// Rejection Objeto contendo detalhes do cancelamento do pedido de portabilidade de crédito junto a Instituição Credora.
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando `status` for igual a `REJECTED` ou `CANCELLED`
		Rejection *struct {
			// Reason Motivo de recusa do pedido de portabilidade de crédito.
			Reason struct {
				// Type Motivo de recusa do pedido de portabilidade, onde:
				// CANCELADO_PELO_CLIENTE - Cliente desiste do pedido da portabilidade;
				// SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente;
				// POLITICA_DE_CREDITO - Proponente desiste da oferta ao cliente por políticas internas;
				// RETENCAO_DO_CLIENTE - Cliente aceitou contraproposta da instituição credora (dentro do prazo);
				// CONTRATO_JA_LIQUIDADO - Contrato liquidado pelo cliente;
				// DIVERGENCIA_DE_PAGAMENTO_EFETUADO - Proponente realizou a liquidação com valor divergente;
				// DECURSO_DO_PRAZO_PARA_PAGAMENTO - Proponente realizou a liquidação fora do prazo;
				// PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO - Proponente não realizou a liquidação da Portabilidade;
				// PORTABILIDADE_EM_ANDAMENTO - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato;
				// CLIENTE_COM_ACAO_JUDICIAL - Possui ação judicial;
				// MODALIDADE_DA_OPERACAO_INCOMPATIVEL - Modalidade divergente da indicada pela instituição proponente;
				// OUTROS - Motivo da rejeição não se encaixa nas opções disponíveis.
				Type ResponsePortabilitiesByPortabilityIDDataRejectionReasonType `json:"type"`

				// TypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito.
				// Ao utilizar essa opção, é fortemente recomendável enviar um ticket como sugestão da estrutura Open Finance para discussão e mapeamento em futuras versões.
				//
				// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo type for igual a OUTROS.
				TypeAdditionalInfo *string `json:"typeAdditionalInfo,omitempty"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição da proposta, onde:
			// PROPONENTE - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a
			// proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
			// USUARIO - Indica que o cliente cancelou o pedido de portabilidade de crédito.
			// CREDORA- Indica que a Instituição Credora cancelou o contrato por retenção do cliente ou outros motivos
			// conforme motivo de recusa.
			RejectedBy ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Informação sobre o status de um pedido de portabilidade de crédito, onde:
		//
		// - `RECEIVED`: Estado inicial. Indica que o pedido de portabilidade foi solicitado junto a instituição credora. O pedido deve permanecer neste estado até que o próximo dia útil (D+1) aonde começará a contar o prazo de 3 dias úteis para a etapa de contraproposta e o pedido de portabilidade deverá ser movido para PENDING
		// - `PENDING`: Indica que o pedido de portabilidade de crédito está na fase de contraproposta, onde a instituição credora poderá enviar uma contraproposta ou não para o cliente por qualquer canal (email, telefone, etc.) porém o aceite só deverá ser valido se o cliente aprovar no canal digital da instituição credora
		// - `ACCEPTED_SETTLEMENT_IN_PROGRESS`: Indica que a contraproposta não foi aceita pelo cliente e a instituição proponente terá que quitar o valor do contrato no mesmo dia em que o estado foi ativado
		// - `ACCEPTED_SETTLEMENT_COMPLETED`: Indica que a instituição proponente já liquidou o contrato e comunicou a respeito a credora que está validando os dados do contratos bem como valores recebidos para a quitação do mesmo (nesta etapa a instituição credora tem 2 dias úteis para fornecer a confirmação e o recibo de quitação do contrato de empréstimo)
		// - `PORTABILITY_COMPLETED`: Indica que o pedido de portabilidade foi concluído com sucesso
		// - `REJECTED`: Indica que o pedido de portabilidade de crédito foi rejeitado, seja porque o cliente aceitou a contraproposta, ou porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades
		// - `CANCELLED`: Indica que o cliente cancelou o pedido de portabilidade de crédito
		// - `PAYMENT_ISSUE`: Indica que a Instituição Credora encontrou alguma inconsistência na liquidação efetuada e que a Instituição Proponente deverá realizar ajustes conforme sugerido pela Instituição Credora para solucionar a pendencia antes do cancelamento do pedido de portabilidade de crédito
		Status ResponsePortabilitiesByPortabilityIDDataStatus `json:"status"`

		// StatusReason Motivo de recusa do pedido de portabilidade
		//
		// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `status` for igual a `REJECTED` ou `CANCELADO` ou `PAYMENT_ISSUE`
		StatusReason *struct {
			// DigitalSignatureProof Comprovante de assinatura da contraproposta
			//
			// [RESTRIÇÃO] Objeto de preenchimento obrigatório quando campo `reasonType` for igual a `RETENCAO_DO_CLIENTE`
			DigitalSignatureProof *struct {
				// DocumentID Código identificador do Documento assinado na instituição proponente.
				DocumentID string `json:"documentId"`

				// SignatureDateTime Data e hora em que o contrato foi assinado pelo cliente  no canal digital da Instituição Proponente
				SignatureDateTime string `json:"signatureDateTime"`
			} `json:"digitalSignatureProof,omitempty"`

			// ReasonType Motivo de recusa do pedido de portabilidade, onde:
			//
			// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
			//
			// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
			//
			// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
			//
			// `RETENCAO_DO_CLIENTE` - Cliente aceitou contraproposta da instituição credora (dentro do prazo)
			//
			// `CONTRATO_JA_LIQUIDADO` - Contrato liquidado pelo cliente.
			//
			// `DIVERGENCIA_DE_PAGAMENTO_EFETUADO` - Proponente realizou a liquidação com valor divergente
			//
			// `DECURSO_DO_PRAZO_PARA_PAGAMENTO` - Proponente realizou a liquidação fora do prazo
			//
			// `PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO` - Proponente não realizou a liquidação do contrato
			//
			// `PORTABILIDADE_EM_ANDAMENTO` - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato.
			//
			// `CLIENTE_COM_ACAO_JUDICIAL` - Possui ação judicial
			//
			// `MODALIDADE_DA_OPERACAO_INCOMPATIVEL` - Modalidade divergente da indicada pela instituição proponente
			//
			// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
			ReasonType *ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType `json:"reasonType,omitempty"`

			// ReasonTypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito.
			// Ao utilizar essa opção, é fortemente recomendável enviar um ticket como sugestão da estrutura Open Finance
			// para discussão e mapeamento em futuras versões.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando campo `reasonType` for igual `OUTROS`
			ReasonTypeAdditionalInfo *string `json:"reasonTypeAdditionalInfo,omitempty"`
		} `json:"statusReason,omitempty"`

		// StatusUpdateDateTime Data e hora em que o contrato teve o status atualizado. Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime string `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links api.Links `json:"links"`
	Meta  api.Meta  `json:"meta"`
}

// ResponsePortabilitiesByPortabilityIDDataCustomerContactType Tipo do contato do cliente.
type ResponsePortabilitiesByPortabilityIDDataCustomerContactType string

// ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType Tipo do contato da Instituição Proponente.
type ResponsePortabilitiesByPortabilityIDDataInstitutionProposingContactType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled Sistema de amortização (Vide Enum):
// - SAC (Sistema de Amortização Constante) - É aquele em que o valor da amortização permanece igual até o final. Os juros cobrados sobre o parcelamento não entram nesta conta.
// - PRICE (Sistema Francês de Amortização) - As parcelas são fixas do início ao fim do contrato. Ou seja, todas as parcelas terão o mesmo valor, desde a primeira até a última. Nos primeiros pagamentos, a maior parte do valor da prestação corresponde aos juros. Ao longo do tempo, a taxa de juros vai decrescendo. Como o valor da prestação é fixo, com o passar das parcelas, o valor de amortização vai aumentando.
// - SAM (Sistema de Amortização Misto) - Cada prestação (pagamento) é a média aritmética das prestações respectivas no Sistemas Price e no Sistema de Amortização Constante (SAC).
// - SEM SISTEMA DE AMORTIZAÇÃO
type ResponsePortabilitiesByPortabilityIDDataProposedContractAmortizationScheduled string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge "Forma de cobrança relativa a tarifa pactuada no contrato. (Vide Enum)
// - Mínimo
// - Máximo
// - Fixo
// - Percentual"
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeCharge string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType Tipo de cobrança para a tarifa pactuada no contrato.
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFeesFeeChargeType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType Tipo de encargo pactuado no contrato.
type ResponsePortabilitiesByPortabilityIDDataProposedContractContractedFinanceChargesChargeType string

// ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity Informação relativa à periodicidade regular das parcelas. (Vide Enum) sem periodicidade regular, diario, semanal, quinzenal, mensal, bimestral, trimestral, semestral, anual.
type ResponsePortabilitiesByPortabilityIDDataProposedContractInstalmentPeriodicity string

// ResponsePortabilitiesByPortabilityIDDataRejectionReasonType Motivo de recusa do pedido de portabilidade, onde:
// CANCELADO_PELO_CLIENTE - Cliente desiste do pedido da portabilidade;
// SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente;
// POLITICA_DE_CREDITO - Proponente desiste da oferta ao cliente por políticas internas;
// RETENCAO_DO_CLIENTE - Cliente aceitou contraproposta da instituição credora (dentro do prazo);
// CONTRATO_JA_LIQUIDADO - Contrato liquidado pelo cliente;
// DIVERGENCIA_DE_PAGAMENTO_EFETUADO - Proponente realizou a liquidação com valor divergente;
// DECURSO_DO_PRAZO_PARA_PAGAMENTO - Proponente realizou a liquidação fora do prazo;
// PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO - Proponente não realizou a liquidação da Portabilidade;
// PORTABILIDADE_EM_ANDAMENTO - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato;
// CLIENTE_COM_ACAO_JUDICIAL - Possui ação judicial;
// MODALIDADE_DA_OPERACAO_INCOMPATIVEL - Modalidade divergente da indicada pela instituição proponente;
// OUTROS - Motivo da rejeição não se encaixa nas opções disponíveis.
type ResponsePortabilitiesByPortabilityIDDataRejectionReasonType string

// ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy Informar usuário responsável pela rejeição da proposta, onde:
// PROPONENTE - Indica que o pedido de portabilidade de crédito foi rejeitado pela proponente, seja porque a
// proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades.
// USUARIO - Indica que o cliente cancelou o pedido de portabilidade de crédito.
// CREDORA- Indica que a Instituição Credora cancelou o contrato por retenção do cliente ou outros motivos
// conforme motivo de recusa.
type ResponsePortabilitiesByPortabilityIDDataRejectionRejectedBy string

// ResponsePortabilitiesByPortabilityIDDataStatus Informação sobre o status de um pedido de portabilidade de crédito, onde:
//
// - `RECEIVED`: Estado inicial. Indica que o pedido de portabilidade foi solicitado junto a instituição credora. O pedido deve permanecer neste estado até que o próximo dia útil (D+1) aonde começará a contar o prazo de 3 dias úteis para a etapa de contraproposta e o pedido de portabilidade deverá ser movido para PENDING
// - `PENDING`: Indica que o pedido de portabilidade de crédito está na fase de contraproposta, onde a instituição credora poderá enviar uma contraproposta ou não para o cliente por qualquer canal (email, telefone, etc.) porém o aceite só deverá ser valido se o cliente aprovar no canal digital da instituição credora
// - `ACCEPTED_SETTLEMENT_IN_PROGRESS`: Indica que a contraproposta não foi aceita pelo cliente e a instituição proponente terá que quitar o valor do contrato no mesmo dia em que o estado foi ativado
// - `ACCEPTED_SETTLEMENT_COMPLETED`: Indica que a instituição proponente já liquidou o contrato e comunicou a respeito a credora que está validando os dados do contratos bem como valores recebidos para a quitação do mesmo (nesta etapa a instituição credora tem 2 dias úteis para fornecer a confirmação e o recibo de quitação do contrato de empréstimo)
// - `PORTABILITY_COMPLETED`: Indica que o pedido de portabilidade foi concluído com sucesso
// - `REJECTED`: Indica que o pedido de portabilidade de crédito foi rejeitado, seja porque o cliente aceitou a contraproposta, ou porque a proponente rejeitou a liquidação que excedeu em 15% o valor do contrato original, entre outras possibilidades
// - `CANCELLED`: Indica que o cliente cancelou o pedido de portabilidade de crédito
// - `PAYMENT_ISSUE`: Indica que a Instituição Credora encontrou alguma inconsistência na liquidação efetuada e que a Instituição Proponente deverá realizar ajustes conforme sugerido pela Instituição Credora para solucionar a pendencia antes do cancelamento do pedido de portabilidade de crédito
type ResponsePortabilitiesByPortabilityIDDataStatus string

// ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType Motivo de recusa do pedido de portabilidade, onde:
//
// `CANCELADO_PELO_CLIENTE` - Cliente desiste do pedido da portabilidade
//
// `SALDO_DEVEDOR_ATUALIZADO_SUBSTANCIALMENTE_DIVERGENTE` - Saldo devedor atualizado divergente (superior a 15%) do informado inicialmente
//
// `POLITICA_DE_CREDITO` - Proponente desiste da oferta ao cliente por políticas internas
//
// `RETENCAO_DO_CLIENTE` - Cliente aceitou contraproposta da instituição credora (dentro do prazo)
//
// `CONTRATO_JA_LIQUIDADO` - Contrato liquidado pelo cliente.
//
// `DIVERGENCIA_DE_PAGAMENTO_EFETUADO` - Proponente realizou a liquidação com valor divergente
//
// `DECURSO_DO_PRAZO_PARA_PAGAMENTO` - Proponente realizou a liquidação fora do prazo
//
// `PORTABILIDADE_CANCELADA_POR_FALTA_DE_LIQUIDACAO` - Proponente não realizou a liquidação do contrato
//
// `PORTABILIDADE_EM_ANDAMENTO` - Posteriormente à efetivação do pedido de portabilidade, a IF credora identificou que o cliente já possui outro pedido de portabilidade em andamento para o mesmo contrato.
//
// `CLIENTE_COM_ACAO_JUDICIAL` - Possui ação judicial
//
// `MODALIDADE_DA_OPERACAO_INCOMPATIVEL` - Modalidade divergente da indicada pela instituição proponente
//
// `OUTROS` - Motivo da rejeição não se encaixa nas opções disponíveis
type ResponsePortabilitiesByPortabilityIDDataStatusReasonReasonType string

// ResponsePortabilityEligibility defines model for ResponsePortabilityEligibility.
type ResponsePortabilityEligibility struct {
	// Data Conjunto de informações de contratos de empréstimos/financiamentos mantidos pelo cliente na instituição credora e para os quais ele tenha fornecido consentimento
	Data struct {
		// ContractID Identifica de forma única o contrato da operação de crédito do cliente, mantendo as regras de imutabilidade dentro da instituição transmissora.
		ContractID  string `json:"contractId"`
		Portability struct {
			// Channel Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			Channel *ResponsePortabilityEligibilityDataPortabilityChannel `json:"channel,omitempty"`

			// CompanyCnpj Número completo do CNPJ da instituição
			// O CNPJ corresponde ao número de inscrição no Cadastro de Pessoa Jurídica.
			// Deve-se ter apenas números do CNPJ, sem máscara
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			CompanyCnpj *string `json:"companyCnpj,omitempty"`

			// CompanyName Nome da Instituição Proponente responsável pelo pedido de portabilidade de credito anterior a atual consulta p.ex.Empresa A.
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
			CompanyName *string `json:"companyName,omitempty"`

			// Ineligible Objeto para auxiliar a Instituição Proponente a entender o porque um contrato está inelegivel para pedido de portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `FALSE`
			Ineligible *struct {
				// ReasonType Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
				// Informação sobre o motivo de inelegibilidade
				// -`CONTRATO_LIQUIDADO`: Contrato liquidado pelo cliente.
				// -`CLIENTE_COM_ACAO_JUDICIAL`: Cliente possui ação judicial
				// -`MODALIDADE_OPERACAO_INCOMPATIVEL`: Caso o contrato tenha uma modalidade diferente do praticado no escopo de modalidades disponiveis para portabilidade de crédito
				// -`OUTROS`: Caso exista algum motivo de recusa que não se encaixa nas opções disponiveis de `reasonType`, o campo `reasonTypeAdditionalInfo` deverá ser preenchido com o motivo da inelegibilidade.
				ReasonType ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType `json:"reasonType"`

				// ReasonTypeAdditionalInfo Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito. Deve ser preenchido como uma proposta para inclusão nas definições, exemplo `MOTIVO_NAO_MAPEADO`: descrição de usar esse motivo específico. Ao utilizar essa opção, é obrigatório enviar um ticket para a estrutura open finance para mapeamento em futuras versões.
				//
				// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `reasonType` for igual a `OUTROS`.
				ReasonTypeAdditionalInfo *string `json:"reasonTypeAdditionalInfo,omitempty"`
			} `json:"ineligible,omitempty"`

			// IsEligible Sinaliza se as características do contrato é elegível para pedido de portabilidade de crédito via OFB (sem considerar a disponibilidade da portabilidade de crédito)
			IsEligible bool `json:"isEligible"`

			// Status Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
			Status *ResponsePortabilityEligibilityDataPortabilityStatus `json:"status,omitempty"`

			// StatusUpdateDateTime Data e hora em que o contrato teve o status atualizado. Uma string com data e hora conforme especificação [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilização de timezone UTC(UTC time format).
			//
			// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
			StatusUpdateDateTime *string `json:"statusUpdateDateTime,omitempty"`
		} `json:"portability"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponsePortabilityEligibilityDataPortabilityChannel Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
//
// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `status` for igual a `EM_ANDAMENTO`
type ResponsePortabilityEligibilityDataPortabilityChannel string

// ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
// Informação sobre o motivo de inelegibilidade
// -`CONTRATO_LIQUIDADO`: Contrato liquidado pelo cliente.
// -`CLIENTE_COM_ACAO_JUDICIAL`: Cliente possui ação judicial
// -`MODALIDADE_OPERACAO_INCOMPATIVEL`: Caso o contrato tenha uma modalidade diferente do praticado no escopo de modalidades disponiveis para portabilidade de crédito
// -`OUTROS`: Caso exista algum motivo de recusa que não se encaixa nas opções disponiveis de `reasonType`, o campo `reasonTypeAdditionalInfo` deverá ser preenchido com o motivo da inelegibilidade.
type ResponsePortabilityEligibilityDataPortabilityIneligibleReasonType string

// ResponsePortabilityEligibilityDataPortabilityStatus Informação sobre a disponibilidade ou não de um contrato para a portabilidade de crédito
//
// [RESTRIÇÃO] Campo de preenchimento obrigatório quando o campo `isEligible` for igual a `TRUE`
type ResponsePortabilityEligibilityDataPortabilityStatus string

// Authorization defines model for Authorization.
type Authorization = string

// ContractID defines model for contractId.
type ContractID = string

// PortabilityID defines model for portabilityId.
type PortabilityID = string

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// XIdempotencyKey defines model for xIdempotencyKey.
type XIdempotencyKey = string

// BadRequest defines model for BadRequest.
type BadRequest = ResponseErrorWithAbleAdditionalProperties

// Default defines model for Default.
type Default = ResponseErrorWithAbleAdditionalProperties

// Forbidden defines model for Forbidden.
type Forbidden = ResponseErrorWithAbleAdditionalProperties

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseErrorWithAbleAdditionalProperties

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseErrorWithAbleAdditionalProperties

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseErrorWithAbleAdditionalProperties

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseErrorWithAbleAdditionalProperties

// NotFound defines model for NotFound.
type NotFound = ResponseErrorWithAbleAdditionalProperties

// OKResponseAccountData defines model for OKResponseAccountData.
type OKResponseAccountData = ResponseAccountData

// OKResponsePortabilitiesByPortabilityID defines model for OKResponsePortabilitiesByPortabilityId.
type OKResponsePortabilitiesByPortabilityID = ResponsePortabilitiesByPortabilityID

// OKResponsePortabilityEligibility defines model for OKResponsePortabilityEligibility.
type OKResponsePortabilityEligibility = ResponsePortabilityEligibility

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded = ResponseErrorWithAbleAdditionalProperties

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseErrorWithAbleAdditionalProperties

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams defines parameters for CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility.
type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesParams defines parameters for CreditPortabilityPostPortabilities.
type CreditPortabilityPostPortabilitiesParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`

	// XIdempotencyKey Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.
	XIdempotencyKey XIdempotencyKey `json:"x-idempotency-key"`
}

// CreditPortabilityGetPortabilitiesByPortabilityIDParams defines parameters for CreditPortabilityGetPortabilitiesByPortabilityID.
type CreditPortabilityGetPortabilitiesByPortabilityIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityGetAccountDataParams defines parameters for CreditPortabilityGetAccountData.
type CreditPortabilityGetAccountDataParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams defines parameters for CreditPortabilityPatchPortabilitiesPortabilityIDCancel.
type CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams defines parameters for CreditPortabilityPostPortabilitiesPortabilityIDPayment.
type CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado.
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela IF Proponente (client) e o seu valor deve ser “espelhado” pela IF Credora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a IF Credora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A IF Proponente deve acatar o valor recebido da IF Credora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// CreditPortabilityPostPortabilitiesJSONRequestBody defines body for CreditPortabilityPostPortabilities for application/json ContentType.
type CreditPortabilityPostPortabilitiesJSONRequestBody = RequestCreditPortability

// CreditPortabilityPatchPortabilitiesPortabilityIDCancelJSONRequestBody defines body for CreditPortabilityPatchPortabilitiesPortabilityIDCancel for application/json ContentType.
type CreditPortabilityPatchPortabilitiesPortabilityIDCancelJSONRequestBody = RequestCreditPortabilityCancel

// CreditPortabilityPostPortabilitiesPortabilityIDPaymentJSONRequestBody defines body for CreditPortabilityPostPortabilitiesPortabilityIDPayment for application/json ContentType.
type CreditPortabilityPostPortabilitiesPortabilityIDPaymentJSONRequestBody = RequestCreditPortabilityPayment

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Informa se um contrato pertencente a um determinado cliente estará habilitado para a realização do pedido de portabilidade de crédito considerando a regra de só existir um pedido de portabilidade para um determinado contrato.
	// (GET /credit-operations/{contractId}/portability-eligibility)
	CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request, contractID ContractID, params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams)
	// Realiza pedido de portabilidade de crédito para um determinado contrato junto a instituição credora
	// (POST /portabilities)
	CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request, params CreditPortabilityPostPortabilitiesParams)
	// Consulta portabilidade de crédito através da propriedade portabilityId.
	// (GET /portabilities/{portabilityId})
	CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetPortabilitiesByPortabilityIDParams)
	// Obtém os dados necessários para realização do pagamento da operação via TED.
	// (GET /portabilities/{portabilityId}/account-data)
	CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetAccountDataParams)
	// Comunica a Instituição Credora a respeito do cancelamento da portabilidade de crédito.
	// (PATCH /portabilities/{portabilityId}/cancel)
	CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams)
	// Comunica a Instituição Credora a respeito da liquidação da portabilidade de crédito.
	// (POST /portabilities/{portabilityId}/payment)
	CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "contractId" -------------
	var contractID ContractID

	err = runtime.BindStyledParameterWithOptions("simple", "contractId", r.PathValue("contractId"), &contractID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contractId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeLoansScopes, []string{"openId", "consent:consentId", "loans"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w, r, contractID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPostPortabilities operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeLoansScopes, []string{"openId", "consent:consentId", "loans"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPostPortabilitiesParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	// ------------- Required header parameter "x-idempotency-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-idempotency-key")]; found {
		var XIdempotencyKey XIdempotencyKey
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-idempotency-key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-idempotency-key", valueList[0], &XIdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-idempotency-key", Err: err})
			return
		}

		params.XIdempotencyKey = XIdempotencyKey

	} else {
		err := fmt.Errorf("Header parameter x-idempotency-key is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-idempotency-key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPostPortabilities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityGetPortabilitiesByPortabilityID operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetPortabilitiesByPortabilityIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetPortabilitiesByPortabilityID(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityGetAccountData operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityGetAccountDataParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityGetAccountData(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancel operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreditPortabilityPostPortabilitiesPortabilityIDPayment operation middleware
func (siw *ServerInterfaceWrapper) CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "portabilityId" -------------
	var portabilityID PortabilityID

	err = runtime.BindStyledParameterWithOptions("simple", "portabilityId", r.PathValue("portabilityId"), &portabilityID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "portabilityId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2ClientCredentialsScopes, []string{"credit-portability"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreditPortabilityPostPortabilitiesPortabilityIDPayment(w, r, portabilityID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/credit-operations/{contractId}/portability-eligibility", wrapper.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility)
	m.HandleFunc("POST "+options.BaseURL+"/portabilities", wrapper.CreditPortabilityPostPortabilities)
	m.HandleFunc("GET "+options.BaseURL+"/portabilities/{portabilityId}", wrapper.CreditPortabilityGetPortabilitiesByPortabilityID)
	m.HandleFunc("GET "+options.BaseURL+"/portabilities/{portabilityId}/account-data", wrapper.CreditPortabilityGetAccountData)
	m.HandleFunc("PATCH "+options.BaseURL+"/portabilities/{portabilityId}/cancel", wrapper.CreditPortabilityPatchPortabilitiesPortabilityIDCancel)
	m.HandleFunc("POST "+options.BaseURL+"/portabilities/{portabilityId}/payment", wrapper.CreditPortabilityPostPortabilitiesPortabilityIDPayment)

	return m
}

type BadRequestApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type DefaultApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type ForbiddenApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type GatewayTimeoutApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type InternalServerErrorApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type MethodNotAllowedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type NotAcceptableApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type NotFoundApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type OKResponseAccountDataJSONResponse ResponseAccountData

type OKResponsePortabilitiesByPortabilityIDJSONResponse ResponsePortabilitiesByPortabilityID

type OKResponsePortabilityEligibilityJSONResponse ResponsePortabilityEligibility

type POSTResponseCreditPortabilityJSONResponse POSTResponseCreditPortability

type POSTResponseCreditPortabilityPaymentJSONResponse POSTResponseCreditPortabilityPayment

type PatchResponseCreditPortabilityCancelJSONResponse PatchResponseCreditPortabilityCancel

type SiteIsOverloadedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type UnauthorizedApplicationJSONCharsetUTF8Response ResponseErrorWithAbleAdditionalProperties

type UnprocessableEntityApplicationJwtResponse struct {
	Body io.Reader

	ContentLength int64
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject struct {
	ContractID ContractID `json:"contractId"`
	Params     CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject interface {
	VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility200JSONResponse struct {
	OKResponsePortabilityEligibilityJSONResponse
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility200JSONResponse) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility422ApplicationJwtResponse) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilitydefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilitydefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesRequestObject struct {
	Params CreditPortabilityPostPortabilitiesParams
	Body   *CreditPortabilityPostPortabilitiesJSONRequestBody
}

type CreditPortabilityPostPortabilitiesResponseObject interface {
	VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error
}

type CreditPortabilityPostPortabilities202JSONResponse struct {
	POSTResponseCreditPortabilityJSONResponse
}

func (response CreditPortabilityPostPortabilities202JSONResponse) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilities422ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilities500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilities529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilities529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response CreditPortabilityPostPortabilitiesdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityGetPortabilitiesByPortabilityIDParams
}

type CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject interface {
	VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetPortabilitiesByPortabilityID200JSONResponse struct {
	OKResponsePortabilitiesByPortabilityIDJSONResponse
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID200JSONResponse) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID422ApplicationJwtResponse) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetPortabilitiesByPortabilityID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetPortabilitiesByPortabilityID529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetPortabilitiesByPortabilityIDdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response CreditPortabilityGetPortabilitiesByPortabilityIDdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityGetAccountDataRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityGetAccountDataParams
}

type CreditPortabilityGetAccountDataResponseObject interface {
	VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error
}

type CreditPortabilityGetAccountData200JSONResponse struct {
	OKResponseAccountDataJSONResponse
}

func (response CreditPortabilityGetAccountData200JSONResponse) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityGetAccountData422ApplicationJwtResponse) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityGetAccountData500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountData529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityGetAccountData529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityGetAccountDatadefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response CreditPortabilityGetAccountDatadefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityGetAccountDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams
	Body          *CreditPortabilityPatchPortabilitiesPortabilityIDCancelJSONRequestBody
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject interface {
	VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel200JSONResponse struct {
	PatchResponseCreditPortabilityCancelJSONResponse
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel200JSONResponse) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel422ApplicationJwtResponse) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCancel529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCancel529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPatchPortabilitiesPortabilityIDCanceldefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response CreditPortabilityPatchPortabilitiesPortabilityIDCanceldefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject struct {
	PortabilityID PortabilityID `json:"portabilityId"`
	Params        CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams
	Body          *CreditPortabilityPostPortabilitiesPortabilityIDPaymentJSONRequestBody
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject interface {
	VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment202JSONResponse struct {
	POSTResponseCreditPortabilityPaymentJSONResponse
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment202JSONResponse) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment400ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment401ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment403ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment404ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment405ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment406ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment422ApplicationJwtResponse struct {
	UnprocessableEntityApplicationJwtResponse
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment422ApplicationJwtResponse) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/jwt")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(422)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment500ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment504ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPayment529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPayment529ApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type CreditPortabilityPostPortabilitiesPortabilityIDPaymentdefaultApplicationJSONCharsetUTF8Response struct {
	Body       ResponseErrorWithAbleAdditionalProperties
	StatusCode int
}

func (response CreditPortabilityPostPortabilitiesPortabilityIDPaymentdefaultApplicationJSONCharsetUTF8Response) VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Informa se um contrato pertencente a um determinado cliente estará habilitado para a realização do pedido de portabilidade de crédito considerando a regra de só existir um pedido de portabilidade para um determinado contrato.
	// (GET /credit-operations/{contractId}/portability-eligibility)
	CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(ctx context.Context, request CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject) (CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject, error)
	// Realiza pedido de portabilidade de crédito para um determinado contrato junto a instituição credora
	// (POST /portabilities)
	CreditPortabilityPostPortabilities(ctx context.Context, request CreditPortabilityPostPortabilitiesRequestObject) (CreditPortabilityPostPortabilitiesResponseObject, error)
	// Consulta portabilidade de crédito através da propriedade portabilityId.
	// (GET /portabilities/{portabilityId})
	CreditPortabilityGetPortabilitiesByPortabilityID(ctx context.Context, request CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject) (CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject, error)
	// Obtém os dados necessários para realização do pagamento da operação via TED.
	// (GET /portabilities/{portabilityId}/account-data)
	CreditPortabilityGetAccountData(ctx context.Context, request CreditPortabilityGetAccountDataRequestObject) (CreditPortabilityGetAccountDataResponseObject, error)
	// Comunica a Instituição Credora a respeito do cancelamento da portabilidade de crédito.
	// (PATCH /portabilities/{portabilityId}/cancel)
	CreditPortabilityPatchPortabilitiesPortabilityIDCancel(ctx context.Context, request CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject) (CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject, error)
	// Comunica a Instituição Credora a respeito da liquidação da portabilidade de crédito.
	// (POST /portabilities/{portabilityId}/payment)
	CreditPortabilityPostPortabilitiesPortabilityIDPayment(ctx context.Context, request CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject) (CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility operation middleware
func (sh *strictHandler) CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(w http.ResponseWriter, r *http.Request, contractID ContractID, params CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityParams) {
	var request CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject

	request.ContractID = contractID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility(ctx, request.(CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetCreditOperationsContratIDPortabilityEligibility")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetCreditOperationsContratIDPortabilityEligibilityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPostPortabilities operation middleware
func (sh *strictHandler) CreditPortabilityPostPortabilities(w http.ResponseWriter, r *http.Request, params CreditPortabilityPostPortabilitiesParams) {
	var request CreditPortabilityPostPortabilitiesRequestObject

	request.Params = params

	var body CreditPortabilityPostPortabilitiesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPostPortabilities(ctx, request.(CreditPortabilityPostPortabilitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPostPortabilities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPostPortabilitiesResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPostPortabilitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityGetPortabilitiesByPortabilityID operation middleware
func (sh *strictHandler) CreditPortabilityGetPortabilitiesByPortabilityID(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetPortabilitiesByPortabilityIDParams) {
	var request CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetPortabilitiesByPortabilityID(ctx, request.(CreditPortabilityGetPortabilitiesByPortabilityIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetPortabilitiesByPortabilityID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetPortabilitiesByPortabilityIDResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetPortabilitiesByPortabilityIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityGetAccountData operation middleware
func (sh *strictHandler) CreditPortabilityGetAccountData(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityGetAccountDataParams) {
	var request CreditPortabilityGetAccountDataRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityGetAccountData(ctx, request.(CreditPortabilityGetAccountDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityGetAccountData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityGetAccountDataResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityGetAccountDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPatchPortabilitiesPortabilityIDCancel operation middleware
func (sh *strictHandler) CreditPortabilityPatchPortabilitiesPortabilityIDCancel(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPatchPortabilitiesPortabilityIDCancelParams) {
	var request CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	var body CreditPortabilityPatchPortabilitiesPortabilityIDCancelJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPatchPortabilitiesPortabilityIDCancel(ctx, request.(CreditPortabilityPatchPortabilitiesPortabilityIDCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPatchPortabilitiesPortabilityIDCancel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPatchPortabilitiesPortabilityIDCancelResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPatchPortabilitiesPortabilityIDCancelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreditPortabilityPostPortabilitiesPortabilityIDPayment operation middleware
func (sh *strictHandler) CreditPortabilityPostPortabilitiesPortabilityIDPayment(w http.ResponseWriter, r *http.Request, portabilityID PortabilityID, params CreditPortabilityPostPortabilitiesPortabilityIDPaymentParams) {
	var request CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject

	request.PortabilityID = portabilityID
	request.Params = params

	var body CreditPortabilityPostPortabilitiesPortabilityIDPaymentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreditPortabilityPostPortabilitiesPortabilityIDPayment(ctx, request.(CreditPortabilityPostPortabilitiesPortabilityIDPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreditPortabilityPostPortabilitiesPortabilityIDPayment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreditPortabilityPostPortabilitiesPortabilityIDPaymentResponseObject); ok {
		if err := validResponse.VisitCreditPortabilityPostPortabilitiesPortabilityIDPaymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z9/93wAAAP//NdZiP9RZAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
