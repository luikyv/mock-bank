//go:build go1.22

// Package consentv3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package consentv3

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luiky/mock-bank/internal/api"
	"github.com/luiky/mock-bank/internal/timeutil"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeScopes = "OAuth2AuthorizationCode.Scopes"
	OAuth2SecurityScopes          = "OAuth2Security.Scopes"
)

// Defines values for N422ResponseErrorCreateConsentErrorsCode.
const (
	N422ResponseErrorCreateConsentErrorsCodeDATAEXPIRACAOINVALIDA       N422ResponseErrorCreateConsentErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	N422ResponseErrorCreateConsentErrorsCodeDEPENDEMULTIPLAALCADA       N422ResponseErrorCreateConsentErrorsCode = "DEPENDE_MULTIPLA_ALCADA"
	N422ResponseErrorCreateConsentErrorsCodeERRONAOMAPEADO              N422ResponseErrorCreateConsentErrorsCode = "ERRO_NAO_MAPEADO"
	N422ResponseErrorCreateConsentErrorsCodeESTADOCONSENTIMENTOINVALIDO N422ResponseErrorCreateConsentErrorsCode = "ESTADO_CONSENTIMENTO_INVALIDO"
)

// Defines values for CreateConsentDataPermissions.
const (
	CreateConsentDataPermissionsACCOUNTSBALANCESREAD                                CreateConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	CreateConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         CreateConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	CreateConsentDataPermissionsACCOUNTSREAD                                        CreateConsentDataPermissions = "ACCOUNTS_READ"
	CreateConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            CreateConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsBANKFIXEDINCOMESREAD                                CreateConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITFIXEDINCOMESREAD                              CreateConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsEXCHANGESREAD                                       CreateConsentDataPermissions = "EXCHANGES_READ"
	CreateConsentDataPermissionsFINANCINGSPAYMENTSREAD                              CreateConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSREAD                                      CreateConsentDataPermissions = "FINANCINGS_READ"
	CreateConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  CreateConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSWARRANTIESREAD                            CreateConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsFUNDSREAD                                           CreateConsentDataPermissions = "FUNDS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       CreateConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSREAD                               CreateConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           CreateConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     CreateConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsLOANSPAYMENTSREAD                                   CreateConsentDataPermissions = "LOANS_PAYMENTS_READ"
	CreateConsentDataPermissionsLOANSREAD                                           CreateConsentDataPermissions = "LOANS_READ"
	CreateConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       CreateConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsLOANSWARRANTIESREAD                                 CreateConsentDataPermissions = "LOANS_WARRANTIES_READ"
	CreateConsentDataPermissionsRESOURCESREAD                                       CreateConsentDataPermissions = "RESOURCES_READ"
	CreateConsentDataPermissionsTREASURETITLESREAD                                  CreateConsentDataPermissions = "TREASURE_TITLES_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	CreateConsentDataPermissionsVARIABLEINCOMESREAD                                 CreateConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for EnumRejectedBy.
const (
	ASPSP EnumRejectedBy = "ASPSP"
	TPP   EnumRejectedBy = "TPP"
	USER  EnumRejectedBy = "USER"
)

// Defines values for ResponseConsentDataPermissions.
const (
	ResponseConsentDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentDataPermissionsACCOUNTSREAD                                        ResponseConsentDataPermissions = "ACCOUNTS_READ"
	ResponseConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsEXCHANGESREAD                                       ResponseConsentDataPermissions = "EXCHANGES_READ"
	ResponseConsentDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSREAD                                      ResponseConsentDataPermissions = "FINANCINGS_READ"
	ResponseConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsFUNDSREAD                                           ResponseConsentDataPermissions = "FUNDS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentDataPermissionsLOANSREAD                                           ResponseConsentDataPermissions = "LOANS_READ"
	ResponseConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentDataPermissionsRESOURCESREAD                                       ResponseConsentDataPermissions = "RESOURCES_READ"
	ResponseConsentDataPermissionsTREASURETITLESREAD                                  ResponseConsentDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentDataStatus.
const (
	ResponseConsentDataStatusAUTHORISED            ResponseConsentDataStatus = "AUTHORISED"
	ResponseConsentDataStatusAWAITINGAUTHORISATION ResponseConsentDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentDataStatusREJECTED              ResponseConsentDataStatus = "REJECTED"
)

// Defines values for ResponseConsentExtensionsDataPermissions.
const (
	ResponseConsentExtensionsDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentExtensionsDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentExtensionsDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSREAD                                        ResponseConsentExtensionsDataPermissions = "ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentExtensionsDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentExtensionsDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentExtensionsDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentExtensionsDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSREAD                                      ResponseConsentExtensionsDataPermissions = "FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentExtensionsDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentExtensionsDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsFUNDSREAD                                           ResponseConsentExtensionsDataPermissions = "FUNDS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentExtensionsDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSREAD                                           ResponseConsentExtensionsDataPermissions = "LOANS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentExtensionsDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentExtensionsDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsRESOURCESREAD                                       ResponseConsentExtensionsDataPermissions = "RESOURCES_READ"
	ResponseConsentExtensionsDataPermissionsTREASURETITLESREAD                                  ResponseConsentExtensionsDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentExtensionsDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentExtensionsDataStatus.
const (
	ResponseConsentExtensionsDataStatusAUTHORISED            ResponseConsentExtensionsDataStatus = "AUTHORISED"
	ResponseConsentExtensionsDataStatusAWAITINGAUTHORISATION ResponseConsentExtensionsDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentExtensionsDataStatusREJECTED              ResponseConsentExtensionsDataStatus = "REJECTED"
)

// Defines values for ResponseConsentReadDataPermissions.
const (
	ResponseConsentReadDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentReadDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentReadDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentReadDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSREAD                                        ResponseConsentReadDataPermissions = "ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentReadDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentReadDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentReadDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsEXCHANGESREAD                                       ResponseConsentReadDataPermissions = "EXCHANGES_READ"
	ResponseConsentReadDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentReadDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSREAD                                      ResponseConsentReadDataPermissions = "FINANCINGS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentReadDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentReadDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsFUNDSREAD                                           ResponseConsentReadDataPermissions = "FUNDS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentReadDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSREAD                                           ResponseConsentReadDataPermissions = "LOANS_READ"
	ResponseConsentReadDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentReadDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentReadDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsRESOURCESREAD                                       ResponseConsentReadDataPermissions = "RESOURCES_READ"
	ResponseConsentReadDataPermissionsTREASURETITLESREAD                                  ResponseConsentReadDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentReadDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentReadDataRejectionReasonCode.
const (
	CONSENTEXPIRED           ResponseConsentReadDataRejectionReasonCode = "CONSENT_EXPIRED"
	CONSENTMAXDATEREACHED    ResponseConsentReadDataRejectionReasonCode = "CONSENT_MAX_DATE_REACHED"
	CONSENTTECHNICALISSUE    ResponseConsentReadDataRejectionReasonCode = "CONSENT_TECHNICAL_ISSUE"
	CUSTOMERMANUALLYREJECTED ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REJECTED"
	CUSTOMERMANUALLYREVOKED  ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REVOKED"
	INTERNALSECURITYREASON   ResponseConsentReadDataRejectionReasonCode = "INTERNAL_SECURITY_REASON"
)

// Defines values for ResponseConsentReadDataStatus.
const (
	AUTHORISED            ResponseConsentReadDataStatus = "AUTHORISED"
	AWAITINGAUTHORISATION ResponseConsentReadDataStatus = "AWAITING_AUTHORISATION"
	REJECTED              ResponseConsentReadDataStatus = "REJECTED"
)

// Defines values for ResponseErrorUnprocessableEntityErrorsCode.
const (
	ResponseErrorUnprocessableEntityErrorsCodeCOMBINACAOPERMISSOESINCORRETA    ResponseErrorUnprocessableEntityErrorsCode = "COMBINACAO_PERMISSOES_INCORRETA"
	ResponseErrorUnprocessableEntityErrorsCodeDATAEXPIRACAOINVALIDA            ResponseErrorUnprocessableEntityErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	ResponseErrorUnprocessableEntityErrorsCodeERRONAOMAPEADO                   ResponseErrorUnprocessableEntityErrorsCode = "ERRO_NAO_MAPEADO"
	ResponseErrorUnprocessableEntityErrorsCodeINFORMACOESPJNAOINFORMADAS       ResponseErrorUnprocessableEntityErrorsCode = "INFORMACOES_PJ_NAO_INFORMADAS"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSAOPFPJEMCONJUNTO          ResponseErrorUnprocessableEntityErrorsCode = "PERMISSAO_PF_PJ_EM_CONJUNTO"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSOESPJINCORRETAS           ResponseErrorUnprocessableEntityErrorsCode = "PERMISSOES_PJ_INCORRETAS"
	ResponseErrorUnprocessableEntityErrorsCodeSEMPERMISSOESFUNCIONAISRESTANTES ResponseErrorUnprocessableEntityErrorsCode = "SEM_PERMISSOES_FUNCIONAIS_RESTANTES"
)

// Defines values for ResponseErrorUnprocessableEntityDeleteErrorsCode.
const (
	CONSENTIMENTOEMSTATUSREJEITADO ResponseErrorUnprocessableEntityDeleteErrorsCode = "CONSENTIMENTO_EM_STATUS_REJEITADO"
)

// N422ResponseErrorCreateConsent defines model for 422ResponseErrorCreateConsent.
type N422ResponseErrorCreateConsent struct {
	Errors []struct {
		// Code Códigos de erros previstos na durante o processo de extensão do consentimento:
		//  - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		//  - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		//  - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		//  - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
		Code N422ResponseErrorCreateConsentErrorsCode `json:"code"`

		// Detail Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: O consentimento informado não pode ser renovado sem redirecionamento porque depende de múltipla alçada para aprovação.
		// - ESTADO_CONSENTIMENTO_INVALIDO: O consentimento informado não pode ser renovado sem redirecionamento porque está em um estado que não permite a renovação.
		// - DATA_EXPIRACAO_INVALIDA: O consentimento informado não pode ser renovado pois a nova data de expiração não segue a convenção do ecossistema.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Detail string `json:"detail"`

		// Title Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		// - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		// - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// N422ResponseErrorCreateConsentErrorsCode Códigos de erros previstos na durante o processo de extensão do consentimento:
//   - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
//   - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
//   - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
//   - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
type N422ResponseErrorCreateConsentErrorsCode string

// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
//
// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
type BusinessEntity struct {
	Document BusinessEntityDocument `json:"document"`
}

// BusinessEntityDocument defines model for BusinessEntityDocument.
type BusinessEntityDocument struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityDocumentExtensions defines model for BusinessEntityDocumentExtensions.
type BusinessEntityDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityExtensions Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
// Deve ser informado apenas para casos de consentimento pessoa jurídica.
// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
type BusinessEntityExtensions struct {
	Document BusinessEntityDocumentExtensions `json:"document"`
}

// CreateConsent defines model for CreateConsent.
type CreateConsent struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		//
		// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
		BusinessEntity *BusinessEntity `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		//
		// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
		LoggedUser  LoggedUser                     `json:"loggedUser"`
		Permissions []CreateConsentDataPermissions `json:"permissions"`
	} `json:"data"`
}

// CreateConsentDataPermissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
type CreateConsentDataPermissions string

// CreateConsentExtensions defines model for CreateConsentExtensions.
type CreateConsentExtensions struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		// Deve ser informado apenas para casos de consentimento pessoa jurídica.
		// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
		BusinessEntity *BusinessEntityExtensions `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`
	} `json:"data"`
}

// EnumRejectedBy Informar usuário responsável pela rejeição.
// 1. USER usuário
// 2. ASPSP instituição transmissora
// 3. TPP instituição receptora
type EnumRejectedBy string

// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
//
// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
type LoggedUser struct {
	Document LoggedUserDocument `json:"document"`
}

// LoggedUserDocument defines model for LoggedUserDocument.
type LoggedUserDocument struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserDocumentExtensions defines model for LoggedUserDocumentExtensions.
type LoggedUserDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserExtensions Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
type LoggedUserExtensions struct {
	Document LoggedUserDocumentExtensions `json:"document"`
}

// ResponseConsent defines model for ResponseConsent.
type ResponseConsent struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentDataPermissions defines model for ResponseConsent.Data.Permissions.
type ResponseConsentDataPermissions string

// ResponseConsentDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentDataStatus string

// ResponseConsentExtensions defines model for ResponseConsentExtensions.
type ResponseConsentExtensions struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentExtensionsDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentExtensionsDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentExtensionsDataPermissions defines model for ResponseConsentExtensions.Data.Permissions.
type ResponseConsentExtensionsDataPermissions string

// ResponseConsentExtensionsDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentExtensionsDataStatus string

// ResponseConsentRead defines model for ResponseConsentRead.
type ResponseConsentRead struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado o campo não deve ser preenchido.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentReadDataPermissions `json:"permissions"`

		// Rejection Objeto a ser retornado caso o consentimento seja rejeitado.
		Rejection *struct {
			// Reason Define a razão pela qual o consentimento foi rejeitado.
			Reason struct {
				// AdditionalInformation Contém informações adicionais a critério da transmissora.
				AdditionalInformation *string `json:"additionalInformation,omitempty"`

				// Code Define o código da razão pela qual o consentimento foi rejeitado.
				//
				// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
				// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
				// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
				// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
				// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
				// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
				Code ResponseConsentReadDataRejectionReasonCode `json:"code"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição.
			// 1. USER usuário
			// 2. ASPSP instituição transmissora
			// 3. TPP instituição receptora
			RejectedBy EnumRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentReadDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentReadDataPermissions defines model for ResponseConsentRead.Data.Permissions.
type ResponseConsentReadDataPermissions string

// ResponseConsentReadDataRejectionReasonCode Define o código da razão pela qual o consentimento foi rejeitado.
//
// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
type ResponseConsentReadDataRejectionReasonCode string

// ResponseConsentReadDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentReadDataStatus string

// ResponseConsentReadExtensions defines model for ResponseConsentReadExtensions.
type ResponseConsentReadExtensions struct {
	Data []struct {
		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format), utilizado apenas para consulta de alterações históricas de extensão do consentimento.
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		//
		// Em casos de consentimento com prazo indeterminada o campo não deve ser preenchido.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`

		// PreviousExpirationDateTime Data e hora de expiração anteriores a renovação. Reflete a data limite anterior de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado, ou renovações feitas com a v2.2.0 em que não exista persistência dessa informação, o campo não deve ser preenchido.
		PreviousExpirationDateTime *timeutil.DateTime `json:"previousExpirationDateTime,omitempty"`

		// RequestDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		RequestDateTime timeutil.DateTime `json:"requestDateTime"`

		// XCustomerUserAgent Indica o user-agent que o usuário utilizou quando solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XCustomerUserAgent *string `json:"xCustomerUserAgent,omitempty"`

		// XFapiCustomerIPAddress O endereço IP do usuário logado com o receptor que solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XFapiCustomerIPAddress *string `json:"xFapiCustomerIpAddress,omitempty"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntity defines model for ResponseErrorUnprocessableEntity.
type ResponseErrorUnprocessableEntity struct {
	Errors []struct {
		// Code - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
		// - INFORMACOES_PJ_NAO_INFORMADAS
		// - PERMISSOES_PJ_INCORRETAS
		// - PERMISSAO_PF_PJ_EM_CONJUNTO
		// - COMBINACAO_PERMISSOES_INCORRETA
		// - DATA_EXPIRACAO_INVALIDA
		// - ERRO_NAO_MAPEADO
		//
		// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
		Code ResponseErrorUnprocessableEntityErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico.
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityErrorsCode - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
// - INFORMACOES_PJ_NAO_INFORMADAS
// - PERMISSOES_PJ_INCORRETAS
// - PERMISSAO_PF_PJ_EM_CONJUNTO
// - COMBINACAO_PERMISSOES_INCORRETA
// - DATA_EXPIRACAO_INVALIDA
// - ERRO_NAO_MAPEADO
//
// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
type ResponseErrorUnprocessableEntityErrorsCode string

// ResponseErrorUnprocessableEntityDelete defines model for ResponseErrorUnprocessableEntityDelete.
type ResponseErrorUnprocessableEntityDelete struct {
	Errors []struct {
		// Code - CONSENTIMENTO_EM_STATUS_REJEITADO
		Code ResponseErrorUnprocessableEntityDeleteErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityDeleteErrorsCode - CONSENTIMENTO_EM_STATUS_REJEITADO
type ResponseErrorUnprocessableEntityDeleteErrorsCode string

// Authorization defines model for Authorization.
type Authorization = string

// AuthorizationExtensions defines model for AuthorizationExtensions.
type AuthorizationExtensions = string

// ConsentID defines model for ConsentId.
type ConsentID = string

// Page defines model for Page.
type Page = int32

// PageSize defines model for PageSize.
type PageSize = int32

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XCustomerUserAgentExtensions defines model for xCustomerUserAgentExtensions.
type XCustomerUserAgentExtensions = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiCustomerIPAddressExtensions defines model for xFapiCustomerIpAddressExtensions.
type XFapiCustomerIPAddressExtensions = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// N200ConsentsConsentIDRead defines model for 200ConsentsConsentIdRead.
type N200ConsentsConsentIDRead = ResponseConsentRead

// N200ConsentsConsentIDReadExtensions defines model for 200ConsentsConsentIdReadExtensions.
type N200ConsentsConsentIDReadExtensions = ResponseConsentReadExtensions

// N201ConsentsCreated defines model for 201ConsentsCreated.
type N201ConsentsCreated = ResponseConsent

// N201ConsentsCreatedExtensions defines model for 201ConsentsCreatedExtensions.
type N201ConsentsCreatedExtensions = ResponseConsentExtensions

// BadRequest defines model for BadRequest.
type BadRequest = ResponseError

// Forbidden defines model for Forbidden.
type Forbidden = ResponseError

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseError

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseError

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseError

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseError

// NotFound defines model for NotFound.
type NotFound = ResponseError

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timeutil.Date `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = ResponseError

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseError

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ResponseErrorUnprocessableEntity

// UnprocessableEntityConsents defines model for UnprocessableEntityConsents.
type UnprocessableEntityConsents = N422ResponseErrorCreateConsent

// UnprocessableEntityDelete defines model for UnprocessableEntityDelete.
type UnprocessableEntityDelete = ResponseErrorUnprocessableEntityDelete

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = ResponseError

// ConsentsPostConsentsParams defines parameters for ConsentsPostConsents.
type ConsentsPostConsentsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsDeleteConsentsConsentIDParams defines parameters for ConsentsDeleteConsentsConsentID.
type ConsentsDeleteConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsGetConsentsConsentIDParams defines parameters for ConsentsGetConsentsConsentID.
type ConsentsGetConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsConsentIDExtendsParams defines parameters for ConsentsPostConsentsConsentIDExtends.
type ConsentsPostConsentsConsentIDExtendsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions `json:"x-fapi-customer-ip-address"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent XCustomerUserAgentExtensions `json:"x-customer-user-agent"`
}

// ConsentsGetConsentsConsentIDExtensionsParams defines parameters for ConsentsGetConsentsConsentIDExtensions.
type ConsentsGetConsentsConsentIDExtensionsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas. A transmissora deve considerar entrada como 25, caso seja informado algum valor menor pela receptora. Enquanto houver mais que 25 registros a enviar, a transmissora deve considerar o mínimo por página como 25. Somente a última página retornada (ou primeira, no caso de página única) pode conter menos de 25 registros. Mais informações, acesse Especificações de APIs > Padrões > Paginação.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsJSONRequestBody defines body for ConsentsPostConsents for application/json ContentType.
type ConsentsPostConsentsJSONRequestBody = CreateConsent

// ConsentsPostConsentsConsentIDExtendsJSONRequestBody defines body for ConsentsPostConsentsConsentIDExtends for application/json ContentType.
type ConsentsPostConsentsConsentIDExtendsJSONRequestBody = CreateConsentExtensions

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConsentsPostConsents operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsDeleteConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsDeleteConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsDeleteConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeScopes, []string{"openid", "consent:consentId"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsConsentIDExtendsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Required header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = XFapiCustomerIPAddress

	} else {
		err := fmt.Errorf("Header parameter x-fapi-customer-ip-address is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-customer-ip-address", Err: err})
		return
	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Required header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgentExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = XCustomerUserAgent

	} else {
		err := fmt.Errorf("Header parameter x-customer-user-agent is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-customer-user-agent", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsentsConsentIDExtends(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDExtensionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentIDExtensions(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/consents", wrapper.ConsentsPostConsents)
	m.HandleFunc("DELETE "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsDeleteConsentsConsentID)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsGetConsentsConsentID)
	m.HandleFunc("POST "+options.BaseURL+"/consents/{consentId}/extends", wrapper.ConsentsPostConsentsConsentIDExtends)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}/extensions", wrapper.ConsentsGetConsentsConsentIDExtensions)

	return m
}

type N200ConsentsConsentIDReadJSONResponse ResponseConsentRead

type N200ConsentsConsentIDReadExtensionsJSONResponse ResponseConsentReadExtensions

type N201ConsentsCreatedJSONResponse ResponseConsent

type N201ConsentsCreatedExtensionsJSONResponse ResponseConsentExtensions

type N204ConsentsConsentIDDeletedResponse struct {
}

type BadRequestApplicationJSONCharsetUTF8Response ResponseError

type ForbiddenApplicationJSONCharsetUTF8Response ResponseError

type GatewayTimeoutApplicationJSONCharsetUTF8Response ResponseError

type InternalServerErrorApplicationJSONCharsetUTF8Response ResponseError

type MethodNotAllowedApplicationJSONCharsetUTF8Response ResponseError

type NotAcceptableApplicationJSONCharsetUTF8Response ResponseError

type NotFoundApplicationJSONCharsetUTF8Response ResponseError

type SiteIsOverloadedApplicationJSONCharsetUTF8Response struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timeutil.Date `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

type TooManyRequestsApplicationJSONCharsetUTF8Response ResponseError

type UnauthorizedApplicationJSONCharsetUTF8Response ResponseError

type UnprocessableEntityApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntity

type UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response N422ResponseErrorCreateConsent

type UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntityDelete

type UnsupportedMediaTypeApplicationJSONCharsetUTF8Response ResponseError

type ConsentsPostConsentsRequestObject struct {
	Params ConsentsPostConsentsParams
	Body   *ConsentsPostConsentsJSONRequestBody
}

type ConsentsPostConsentsResponseObject interface {
	VisitConsentsPostConsentsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsents201JSONResponse struct {
	N201ConsentsCreatedJSONResponse
}

func (response ConsentsPostConsents201JSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsdefaultJSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsDeleteConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsDeleteConsentsConsentIDParams
}

type ConsentsDeleteConsentsConsentIDResponseObject interface {
	VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsDeleteConsentsConsentID204Response = N204ConsentsConsentIDDeletedResponse

func (response ConsentsDeleteConsentsConsentID204Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsDeleteConsentsConsentIDdefaultJSONResponse) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDParams
}

type ConsentsGetConsentsConsentIDResponseObject interface {
	VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentID200JSONResponse struct {
	N200ConsentsConsentIDReadJSONResponse
}

func (response ConsentsGetConsentsConsentID200JSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDdefaultJSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsPostConsentsConsentIDExtendsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsPostConsentsConsentIDExtendsParams
	Body      *ConsentsPostConsentsConsentIDExtendsJSONRequestBody
}

type ConsentsPostConsentsConsentIDExtendsResponseObject interface {
	VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsentsConsentIDExtends201JSONResponse struct {
	N201ConsentsCreatedExtensionsJSONResponse
}

func (response ConsentsPostConsentsConsentIDExtends201JSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDExtensionsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDExtensionsParams
}

type ConsentsGetConsentsConsentIDExtensionsResponseObject interface {
	VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentIDExtensions200JSONResponse struct {
	N200ConsentsConsentIDReadExtensionsJSONResponse
}

func (response ConsentsGetConsentsConsentIDExtensions200JSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(ctx context.Context, request ConsentsPostConsentsRequestObject) (ConsentsPostConsentsResponseObject, error)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(ctx context.Context, request ConsentsDeleteConsentsConsentIDRequestObject) (ConsentsDeleteConsentsConsentIDResponseObject, error)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(ctx context.Context, request ConsentsGetConsentsConsentIDRequestObject) (ConsentsGetConsentsConsentIDResponseObject, error)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(ctx context.Context, request ConsentsPostConsentsConsentIDExtendsRequestObject) (ConsentsPostConsentsConsentIDExtendsResponseObject, error)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(ctx context.Context, request ConsentsGetConsentsConsentIDExtensionsRequestObject) (ConsentsGetConsentsConsentIDExtensionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ConsentsPostConsents operation middleware
func (sh *strictHandler) ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams) {
	var request ConsentsPostConsentsRequestObject

	request.Params = params

	var body ConsentsPostConsentsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsents(ctx, request.(ConsentsPostConsentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsDeleteConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams) {
	var request ConsentsDeleteConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsDeleteConsentsConsentID(ctx, request.(ConsentsDeleteConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsDeleteConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsDeleteConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsDeleteConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams) {
	var request ConsentsGetConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentID(ctx, request.(ConsentsGetConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (sh *strictHandler) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams) {
	var request ConsentsPostConsentsConsentIDExtendsRequestObject

	request.ConsentID = consentID
	request.Params = params

	var body ConsentsPostConsentsConsentIDExtendsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsentsConsentIDExtends(ctx, request.(ConsentsPostConsentsConsentIDExtendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsentsConsentIDExtends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsConsentIDExtendsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsConsentIDExtendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams) {
	var request ConsentsGetConsentsConsentIDExtensionsRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentIDExtensions(ctx, request.(ConsentsGetConsentsConsentIDExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentIDExtensions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDExtensionsResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDExtensionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
