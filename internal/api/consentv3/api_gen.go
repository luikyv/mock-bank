//go:build go1.22

// Package consentv3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package consentv3

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luikyv/mock-bank/internal/api"
	"github.com/luikyv/mock-bank/internal/timeutil"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeScopes = "OAuth2AuthorizationCode.Scopes"
	OAuth2SecurityScopes          = "OAuth2Security.Scopes"
)

// Defines values for N422ResponseErrorCreateConsentErrorsCode.
const (
	N422ResponseErrorCreateConsentErrorsCodeDATAEXPIRACAOINVALIDA       N422ResponseErrorCreateConsentErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	N422ResponseErrorCreateConsentErrorsCodeDEPENDEMULTIPLAALCADA       N422ResponseErrorCreateConsentErrorsCode = "DEPENDE_MULTIPLA_ALCADA"
	N422ResponseErrorCreateConsentErrorsCodeERRONAOMAPEADO              N422ResponseErrorCreateConsentErrorsCode = "ERRO_NAO_MAPEADO"
	N422ResponseErrorCreateConsentErrorsCodeESTADOCONSENTIMENTOINVALIDO N422ResponseErrorCreateConsentErrorsCode = "ESTADO_CONSENTIMENTO_INVALIDO"
)

// Defines values for CreateConsentDataPermissions.
const (
	CreateConsentDataPermissionsACCOUNTSBALANCESREAD                                CreateConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	CreateConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         CreateConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	CreateConsentDataPermissionsACCOUNTSREAD                                        CreateConsentDataPermissions = "ACCOUNTS_READ"
	CreateConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            CreateConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsBANKFIXEDINCOMESREAD                                CreateConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITFIXEDINCOMESREAD                              CreateConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsEXCHANGESREAD                                       CreateConsentDataPermissions = "EXCHANGES_READ"
	CreateConsentDataPermissionsFINANCINGSPAYMENTSREAD                              CreateConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSREAD                                      CreateConsentDataPermissions = "FINANCINGS_READ"
	CreateConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  CreateConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSWARRANTIESREAD                            CreateConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsFUNDSREAD                                           CreateConsentDataPermissions = "FUNDS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       CreateConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSREAD                               CreateConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           CreateConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     CreateConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsLOANSPAYMENTSREAD                                   CreateConsentDataPermissions = "LOANS_PAYMENTS_READ"
	CreateConsentDataPermissionsLOANSREAD                                           CreateConsentDataPermissions = "LOANS_READ"
	CreateConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       CreateConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsLOANSWARRANTIESREAD                                 CreateConsentDataPermissions = "LOANS_WARRANTIES_READ"
	CreateConsentDataPermissionsRESOURCESREAD                                       CreateConsentDataPermissions = "RESOURCES_READ"
	CreateConsentDataPermissionsTREASURETITLESREAD                                  CreateConsentDataPermissions = "TREASURE_TITLES_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	CreateConsentDataPermissionsVARIABLEINCOMESREAD                                 CreateConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for EnumRejectedBy.
const (
	ASPSP EnumRejectedBy = "ASPSP"
	TPP   EnumRejectedBy = "TPP"
	USER  EnumRejectedBy = "USER"
)

// Defines values for ResponseConsentDataPermissions.
const (
	ResponseConsentDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentDataPermissionsACCOUNTSREAD                                        ResponseConsentDataPermissions = "ACCOUNTS_READ"
	ResponseConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsEXCHANGESREAD                                       ResponseConsentDataPermissions = "EXCHANGES_READ"
	ResponseConsentDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSREAD                                      ResponseConsentDataPermissions = "FINANCINGS_READ"
	ResponseConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsFUNDSREAD                                           ResponseConsentDataPermissions = "FUNDS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentDataPermissionsLOANSREAD                                           ResponseConsentDataPermissions = "LOANS_READ"
	ResponseConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentDataPermissionsRESOURCESREAD                                       ResponseConsentDataPermissions = "RESOURCES_READ"
	ResponseConsentDataPermissionsTREASURETITLESREAD                                  ResponseConsentDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentDataStatus.
const (
	ResponseConsentDataStatusAUTHORISED            ResponseConsentDataStatus = "AUTHORISED"
	ResponseConsentDataStatusAWAITINGAUTHORISATION ResponseConsentDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentDataStatusREJECTED              ResponseConsentDataStatus = "REJECTED"
)

// Defines values for ResponseConsentExtensionsDataPermissions.
const (
	ResponseConsentExtensionsDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentExtensionsDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentExtensionsDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSREAD                                        ResponseConsentExtensionsDataPermissions = "ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentExtensionsDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentExtensionsDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentExtensionsDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentExtensionsDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSREAD                                      ResponseConsentExtensionsDataPermissions = "FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentExtensionsDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentExtensionsDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsFUNDSREAD                                           ResponseConsentExtensionsDataPermissions = "FUNDS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentExtensionsDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSREAD                                           ResponseConsentExtensionsDataPermissions = "LOANS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentExtensionsDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentExtensionsDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsRESOURCESREAD                                       ResponseConsentExtensionsDataPermissions = "RESOURCES_READ"
	ResponseConsentExtensionsDataPermissionsTREASURETITLESREAD                                  ResponseConsentExtensionsDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentExtensionsDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentExtensionsDataStatus.
const (
	ResponseConsentExtensionsDataStatusAUTHORISED            ResponseConsentExtensionsDataStatus = "AUTHORISED"
	ResponseConsentExtensionsDataStatusAWAITINGAUTHORISATION ResponseConsentExtensionsDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentExtensionsDataStatusREJECTED              ResponseConsentExtensionsDataStatus = "REJECTED"
)

// Defines values for ResponseConsentReadDataPermissions.
const (
	ResponseConsentReadDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentReadDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentReadDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentReadDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSREAD                                        ResponseConsentReadDataPermissions = "ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentReadDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentReadDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentReadDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsEXCHANGESREAD                                       ResponseConsentReadDataPermissions = "EXCHANGES_READ"
	ResponseConsentReadDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentReadDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSREAD                                      ResponseConsentReadDataPermissions = "FINANCINGS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentReadDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentReadDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsFUNDSREAD                                           ResponseConsentReadDataPermissions = "FUNDS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentReadDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSREAD                                           ResponseConsentReadDataPermissions = "LOANS_READ"
	ResponseConsentReadDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentReadDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentReadDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsRESOURCESREAD                                       ResponseConsentReadDataPermissions = "RESOURCES_READ"
	ResponseConsentReadDataPermissionsTREASURETITLESREAD                                  ResponseConsentReadDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentReadDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentReadDataRejectionReasonCode.
const (
	CONSENTEXPIRED           ResponseConsentReadDataRejectionReasonCode = "CONSENT_EXPIRED"
	CONSENTMAXDATEREACHED    ResponseConsentReadDataRejectionReasonCode = "CONSENT_MAX_DATE_REACHED"
	CONSENTTECHNICALISSUE    ResponseConsentReadDataRejectionReasonCode = "CONSENT_TECHNICAL_ISSUE"
	CUSTOMERMANUALLYREJECTED ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REJECTED"
	CUSTOMERMANUALLYREVOKED  ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REVOKED"
	INTERNALSECURITYREASON   ResponseConsentReadDataRejectionReasonCode = "INTERNAL_SECURITY_REASON"
)

// Defines values for ResponseConsentReadDataStatus.
const (
	AUTHORISED            ResponseConsentReadDataStatus = "AUTHORISED"
	AWAITINGAUTHORISATION ResponseConsentReadDataStatus = "AWAITING_AUTHORISATION"
	REJECTED              ResponseConsentReadDataStatus = "REJECTED"
)

// Defines values for ResponseErrorUnprocessableEntityErrorsCode.
const (
	ResponseErrorUnprocessableEntityErrorsCodeCOMBINACAOPERMISSOESINCORRETA    ResponseErrorUnprocessableEntityErrorsCode = "COMBINACAO_PERMISSOES_INCORRETA"
	ResponseErrorUnprocessableEntityErrorsCodeDATAEXPIRACAOINVALIDA            ResponseErrorUnprocessableEntityErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	ResponseErrorUnprocessableEntityErrorsCodeERRONAOMAPEADO                   ResponseErrorUnprocessableEntityErrorsCode = "ERRO_NAO_MAPEADO"
	ResponseErrorUnprocessableEntityErrorsCodeINFORMACOESPJNAOINFORMADAS       ResponseErrorUnprocessableEntityErrorsCode = "INFORMACOES_PJ_NAO_INFORMADAS"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSAOPFPJEMCONJUNTO          ResponseErrorUnprocessableEntityErrorsCode = "PERMISSAO_PF_PJ_EM_CONJUNTO"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSOESPJINCORRETAS           ResponseErrorUnprocessableEntityErrorsCode = "PERMISSOES_PJ_INCORRETAS"
	ResponseErrorUnprocessableEntityErrorsCodeSEMPERMISSOESFUNCIONAISRESTANTES ResponseErrorUnprocessableEntityErrorsCode = "SEM_PERMISSOES_FUNCIONAIS_RESTANTES"
)

// Defines values for ResponseErrorUnprocessableEntityDeleteErrorsCode.
const (
	CONSENTIMENTOEMSTATUSREJEITADO ResponseErrorUnprocessableEntityDeleteErrorsCode = "CONSENTIMENTO_EM_STATUS_REJEITADO"
)

// N422ResponseErrorCreateConsent defines model for 422ResponseErrorCreateConsent.
type N422ResponseErrorCreateConsent struct {
	Errors []struct {
		// Code Códigos de erros previstos na durante o processo de extensão do consentimento:
		//  - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		//  - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		//  - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		//  - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
		Code N422ResponseErrorCreateConsentErrorsCode `json:"code"`

		// Detail Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: O consentimento informado não pode ser renovado sem redirecionamento porque depende de múltipla alçada para aprovação.
		// - ESTADO_CONSENTIMENTO_INVALIDO: O consentimento informado não pode ser renovado sem redirecionamento porque está em um estado que não permite a renovação.
		// - DATA_EXPIRACAO_INVALIDA: O consentimento informado não pode ser renovado pois a nova data de expiração não segue a convenção do ecossistema.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Detail string `json:"detail"`

		// Title Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		// - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		// - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// N422ResponseErrorCreateConsentErrorsCode Códigos de erros previstos na durante o processo de extensão do consentimento:
//   - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
//   - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
//   - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
//   - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
type N422ResponseErrorCreateConsentErrorsCode string

// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
//
// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
type BusinessEntity struct {
	Document BusinessEntityDocument `json:"document"`
}

// BusinessEntityDocument defines model for BusinessEntityDocument.
type BusinessEntityDocument struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityDocumentExtensions defines model for BusinessEntityDocumentExtensions.
type BusinessEntityDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityExtensions Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
// Deve ser informado apenas para casos de consentimento pessoa jurídica.
// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
type BusinessEntityExtensions struct {
	Document BusinessEntityDocumentExtensions `json:"document"`
}

// CreateConsent defines model for CreateConsent.
type CreateConsent struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		//
		// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
		BusinessEntity *BusinessEntity `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		//
		// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
		LoggedUser  LoggedUser                     `json:"loggedUser"`
		Permissions []CreateConsentDataPermissions `json:"permissions"`
	} `json:"data"`
}

// CreateConsentDataPermissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
type CreateConsentDataPermissions string

// CreateConsentExtensions defines model for CreateConsentExtensions.
type CreateConsentExtensions struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		// Deve ser informado apenas para casos de consentimento pessoa jurídica.
		// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
		BusinessEntity *BusinessEntityExtensions `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`
	} `json:"data"`
}

// EnumRejectedBy Informar usuário responsável pela rejeição.
// 1. USER usuário
// 2. ASPSP instituição transmissora
// 3. TPP instituição receptora
type EnumRejectedBy string

// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
//
// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
type LoggedUser struct {
	Document LoggedUserDocument `json:"document"`
}

// LoggedUserDocument defines model for LoggedUserDocument.
type LoggedUserDocument struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserDocumentExtensions defines model for LoggedUserDocumentExtensions.
type LoggedUserDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserExtensions Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
type LoggedUserExtensions struct {
	Document LoggedUserDocumentExtensions `json:"document"`
}

// ResponseConsent defines model for ResponseConsent.
type ResponseConsent struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentDataPermissions defines model for ResponseConsent.Data.Permissions.
type ResponseConsentDataPermissions string

// ResponseConsentDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentDataStatus string

// ResponseConsentExtensions defines model for ResponseConsentExtensions.
type ResponseConsentExtensions struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentExtensionsDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentExtensionsDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentExtensionsDataPermissions defines model for ResponseConsentExtensions.Data.Permissions.
type ResponseConsentExtensionsDataPermissions string

// ResponseConsentExtensionsDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentExtensionsDataStatus string

// ResponseConsentRead defines model for ResponseConsentRead.
type ResponseConsentRead struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado o campo não deve ser preenchido.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentReadDataPermissions `json:"permissions"`

		// Rejection Objeto a ser retornado caso o consentimento seja rejeitado.
		Rejection *struct {
			// Reason Define a razão pela qual o consentimento foi rejeitado.
			Reason struct {
				// AdditionalInformation Contém informações adicionais a critério da transmissora.
				AdditionalInformation *string `json:"additionalInformation,omitempty"`

				// Code Define o código da razão pela qual o consentimento foi rejeitado.
				//
				// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
				// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
				// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
				// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
				// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
				// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
				Code ResponseConsentReadDataRejectionReasonCode `json:"code"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição.
			// 1. USER usuário
			// 2. ASPSP instituição transmissora
			// 3. TPP instituição receptora
			RejectedBy EnumRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentReadDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timeutil.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentReadDataPermissions defines model for ResponseConsentRead.Data.Permissions.
type ResponseConsentReadDataPermissions string

// ResponseConsentReadDataRejectionReasonCode Define o código da razão pela qual o consentimento foi rejeitado.
//
// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
type ResponseConsentReadDataRejectionReasonCode string

// ResponseConsentReadDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentReadDataStatus string

// ResponseConsentReadExtensions defines model for ResponseConsentReadExtensions.
type ResponseConsentReadExtensions struct {
	Data []struct {
		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format), utilizado apenas para consulta de alterações históricas de extensão do consentimento.
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		//
		// Em casos de consentimento com prazo indeterminada o campo não deve ser preenchido.
		ExpirationDateTime *timeutil.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`

		// PreviousExpirationDateTime Data e hora de expiração anteriores a renovação. Reflete a data limite anterior de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado, ou renovações feitas com a v2.2.0 em que não exista persistência dessa informação, o campo não deve ser preenchido.
		PreviousExpirationDateTime *timeutil.DateTime `json:"previousExpirationDateTime,omitempty"`

		// RequestDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		RequestDateTime timeutil.DateTime `json:"requestDateTime"`

		// XCustomerUserAgent Indica o user-agent que o usuário utilizou quando solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XCustomerUserAgent *string `json:"xCustomerUserAgent,omitempty"`

		// XFapiCustomerIPAddress O endereço IP do usuário logado com o receptor que solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XFapiCustomerIPAddress *string `json:"xFapiCustomerIpAddress,omitempty"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntity defines model for ResponseErrorUnprocessableEntity.
type ResponseErrorUnprocessableEntity struct {
	Errors []struct {
		// Code - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
		// - INFORMACOES_PJ_NAO_INFORMADAS
		// - PERMISSOES_PJ_INCORRETAS
		// - PERMISSAO_PF_PJ_EM_CONJUNTO
		// - COMBINACAO_PERMISSOES_INCORRETA
		// - DATA_EXPIRACAO_INVALIDA
		// - ERRO_NAO_MAPEADO
		//
		// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
		Code ResponseErrorUnprocessableEntityErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico.
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityErrorsCode - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
// - INFORMACOES_PJ_NAO_INFORMADAS
// - PERMISSOES_PJ_INCORRETAS
// - PERMISSAO_PF_PJ_EM_CONJUNTO
// - COMBINACAO_PERMISSOES_INCORRETA
// - DATA_EXPIRACAO_INVALIDA
// - ERRO_NAO_MAPEADO
//
// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
type ResponseErrorUnprocessableEntityErrorsCode string

// ResponseErrorUnprocessableEntityDelete defines model for ResponseErrorUnprocessableEntityDelete.
type ResponseErrorUnprocessableEntityDelete struct {
	Errors []struct {
		// Code - CONSENTIMENTO_EM_STATUS_REJEITADO
		Code ResponseErrorUnprocessableEntityDeleteErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityDeleteErrorsCode - CONSENTIMENTO_EM_STATUS_REJEITADO
type ResponseErrorUnprocessableEntityDeleteErrorsCode string

// Authorization defines model for Authorization.
type Authorization = string

// AuthorizationExtensions defines model for AuthorizationExtensions.
type AuthorizationExtensions = string

// ConsentID defines model for ConsentId.
type ConsentID = string

// Page defines model for Page.
type Page = int32

// PageSize defines model for PageSize.
type PageSize = int32

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XCustomerUserAgentExtensions defines model for xCustomerUserAgentExtensions.
type XCustomerUserAgentExtensions = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiCustomerIPAddressExtensions defines model for xFapiCustomerIpAddressExtensions.
type XFapiCustomerIPAddressExtensions = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// N200ConsentsConsentIDRead defines model for 200ConsentsConsentIdRead.
type N200ConsentsConsentIDRead = ResponseConsentRead

// N200ConsentsConsentIDReadExtensions defines model for 200ConsentsConsentIdReadExtensions.
type N200ConsentsConsentIDReadExtensions = ResponseConsentReadExtensions

// N201ConsentsCreated defines model for 201ConsentsCreated.
type N201ConsentsCreated = ResponseConsent

// N201ConsentsCreatedExtensions defines model for 201ConsentsCreatedExtensions.
type N201ConsentsCreatedExtensions = ResponseConsentExtensions

// BadRequest defines model for BadRequest.
type BadRequest = ResponseError

// Forbidden defines model for Forbidden.
type Forbidden = ResponseError

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseError

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseError

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseError

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseError

// NotFound defines model for NotFound.
type NotFound = ResponseError

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timeutil.BrazilDate `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = ResponseError

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseError

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ResponseErrorUnprocessableEntity

// UnprocessableEntityConsents defines model for UnprocessableEntityConsents.
type UnprocessableEntityConsents = N422ResponseErrorCreateConsent

// UnprocessableEntityDelete defines model for UnprocessableEntityDelete.
type UnprocessableEntityDelete = ResponseErrorUnprocessableEntityDelete

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = ResponseError

// ConsentsPostConsentsParams defines parameters for ConsentsPostConsents.
type ConsentsPostConsentsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsDeleteConsentsConsentIDParams defines parameters for ConsentsDeleteConsentsConsentID.
type ConsentsDeleteConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsGetConsentsConsentIDParams defines parameters for ConsentsGetConsentsConsentID.
type ConsentsGetConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsConsentIDExtendsParams defines parameters for ConsentsPostConsentsConsentIDExtends.
type ConsentsPostConsentsConsentIDExtendsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions `json:"x-fapi-customer-ip-address"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent XCustomerUserAgentExtensions `json:"x-customer-user-agent"`
}

// ConsentsGetConsentsConsentIDExtensionsParams defines parameters for ConsentsGetConsentsConsentIDExtensions.
type ConsentsGetConsentsConsentIDExtensionsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas. A transmissora deve considerar entrada como 25, caso seja informado algum valor menor pela receptora. Enquanto houver mais que 25 registros a enviar, a transmissora deve considerar o mínimo por página como 25. Somente a última página retornada (ou primeira, no caso de página única) pode conter menos de 25 registros. Mais informações, acesse Especificações de APIs > Padrões > Paginação.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsJSONRequestBody defines body for ConsentsPostConsents for application/json ContentType.
type ConsentsPostConsentsJSONRequestBody = CreateConsent

// ConsentsPostConsentsConsentIDExtendsJSONRequestBody defines body for ConsentsPostConsentsConsentIDExtends for application/json ContentType.
type ConsentsPostConsentsConsentIDExtendsJSONRequestBody = CreateConsentExtensions

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConsentsPostConsents operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsDeleteConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsDeleteConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsDeleteConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeScopes, []string{"openid", "consent:consentId"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsConsentIDExtendsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Required header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = XFapiCustomerIPAddress

	} else {
		err := fmt.Errorf("Header parameter x-fapi-customer-ip-address is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-customer-ip-address", Err: err})
		return
	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Required header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgentExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = XCustomerUserAgent

	} else {
		err := fmt.Errorf("Header parameter x-customer-user-agent is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-customer-user-agent", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsentsConsentIDExtends(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDExtensionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentIDExtensions(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/consents", wrapper.ConsentsPostConsents)
	m.HandleFunc("DELETE "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsDeleteConsentsConsentID)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsGetConsentsConsentID)
	m.HandleFunc("POST "+options.BaseURL+"/consents/{consentId}/extends", wrapper.ConsentsPostConsentsConsentIDExtends)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}/extensions", wrapper.ConsentsGetConsentsConsentIDExtensions)

	return m
}

type N200ConsentsConsentIDReadJSONResponse ResponseConsentRead

type N200ConsentsConsentIDReadExtensionsJSONResponse ResponseConsentReadExtensions

type N201ConsentsCreatedJSONResponse ResponseConsent

type N201ConsentsCreatedExtensionsJSONResponse ResponseConsentExtensions

type N204ConsentsConsentIDDeletedResponse struct {
}

type BadRequestApplicationJSONCharsetUTF8Response ResponseError

type ForbiddenApplicationJSONCharsetUTF8Response ResponseError

type GatewayTimeoutApplicationJSONCharsetUTF8Response ResponseError

type InternalServerErrorApplicationJSONCharsetUTF8Response ResponseError

type MethodNotAllowedApplicationJSONCharsetUTF8Response ResponseError

type NotAcceptableApplicationJSONCharsetUTF8Response ResponseError

type NotFoundApplicationJSONCharsetUTF8Response ResponseError

type SiteIsOverloadedApplicationJSONCharsetUTF8Response struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timeutil.BrazilDate `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

type TooManyRequestsApplicationJSONCharsetUTF8Response ResponseError

type UnauthorizedApplicationJSONCharsetUTF8Response ResponseError

type UnprocessableEntityApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntity

type UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response N422ResponseErrorCreateConsent

type UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntityDelete

type UnsupportedMediaTypeApplicationJSONCharsetUTF8Response ResponseError

type ConsentsPostConsentsRequestObject struct {
	Params ConsentsPostConsentsParams
	Body   *ConsentsPostConsentsJSONRequestBody
}

type ConsentsPostConsentsResponseObject interface {
	VisitConsentsPostConsentsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsents201JSONResponse struct {
	N201ConsentsCreatedJSONResponse
}

func (response ConsentsPostConsents201JSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsdefaultJSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsDeleteConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsDeleteConsentsConsentIDParams
}

type ConsentsDeleteConsentsConsentIDResponseObject interface {
	VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsDeleteConsentsConsentID204Response = N204ConsentsConsentIDDeletedResponse

func (response ConsentsDeleteConsentsConsentID204Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsDeleteConsentsConsentIDdefaultJSONResponse) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDParams
}

type ConsentsGetConsentsConsentIDResponseObject interface {
	VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentID200JSONResponse struct {
	N200ConsentsConsentIDReadJSONResponse
}

func (response ConsentsGetConsentsConsentID200JSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDdefaultJSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsPostConsentsConsentIDExtendsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsPostConsentsConsentIDExtendsParams
	Body      *ConsentsPostConsentsConsentIDExtendsJSONRequestBody
}

type ConsentsPostConsentsConsentIDExtendsResponseObject interface {
	VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsentsConsentIDExtends201JSONResponse struct {
	N201ConsentsCreatedExtensionsJSONResponse
}

func (response ConsentsPostConsentsConsentIDExtends201JSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDExtensionsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDExtensionsParams
}

type ConsentsGetConsentsConsentIDExtensionsResponseObject interface {
	VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentIDExtensions200JSONResponse struct {
	N200ConsentsConsentIDReadExtensionsJSONResponse
}

func (response ConsentsGetConsentsConsentIDExtensions200JSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(ctx context.Context, request ConsentsPostConsentsRequestObject) (ConsentsPostConsentsResponseObject, error)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(ctx context.Context, request ConsentsDeleteConsentsConsentIDRequestObject) (ConsentsDeleteConsentsConsentIDResponseObject, error)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(ctx context.Context, request ConsentsGetConsentsConsentIDRequestObject) (ConsentsGetConsentsConsentIDResponseObject, error)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(ctx context.Context, request ConsentsPostConsentsConsentIDExtendsRequestObject) (ConsentsPostConsentsConsentIDExtendsResponseObject, error)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(ctx context.Context, request ConsentsGetConsentsConsentIDExtensionsRequestObject) (ConsentsGetConsentsConsentIDExtensionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ConsentsPostConsents operation middleware
func (sh *strictHandler) ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams) {
	var request ConsentsPostConsentsRequestObject

	request.Params = params

	var body ConsentsPostConsentsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsents(ctx, request.(ConsentsPostConsentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsDeleteConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams) {
	var request ConsentsDeleteConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsDeleteConsentsConsentID(ctx, request.(ConsentsDeleteConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsDeleteConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsDeleteConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsDeleteConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams) {
	var request ConsentsGetConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentID(ctx, request.(ConsentsGetConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (sh *strictHandler) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams) {
	var request ConsentsPostConsentsConsentIDExtendsRequestObject

	request.ConsentID = consentID
	request.Params = params

	var body ConsentsPostConsentsConsentIDExtendsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsentsConsentIDExtends(ctx, request.(ConsentsPostConsentsConsentIDExtendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsentsConsentIDExtends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsConsentIDExtendsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsConsentIDExtendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams) {
	var request ConsentsGetConsentsConsentIDExtensionsRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentIDExtensions(ctx, request.(ConsentsGetConsentsConsentIDExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentIDExtensions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDExtensionsResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDExtensionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
