//go:build go1.22

// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240908200014-2be24b11ae0f DO NOT EDIT.
package v3

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luiky/mock-bank/internal/api"
	"github.com/luiky/mock-bank/internal/timex"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2AuthorizationCodeScopes = "OAuth2AuthorizationCode.Scopes"
	OAuth2SecurityScopes          = "OAuth2Security.Scopes"
)

// Defines values for N422ResponseErrorCreateConsentErrorsCode.
const (
	N422ResponseErrorCreateConsentErrorsCodeDATAEXPIRACAOINVALIDA       N422ResponseErrorCreateConsentErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	N422ResponseErrorCreateConsentErrorsCodeDEPENDEMULTIPLAALCADA       N422ResponseErrorCreateConsentErrorsCode = "DEPENDE_MULTIPLA_ALCADA"
	N422ResponseErrorCreateConsentErrorsCodeERRONAOMAPEADO              N422ResponseErrorCreateConsentErrorsCode = "ERRO_NAO_MAPEADO"
	N422ResponseErrorCreateConsentErrorsCodeESTADOCONSENTIMENTOINVALIDO N422ResponseErrorCreateConsentErrorsCode = "ESTADO_CONSENTIMENTO_INVALIDO"
)

// Defines values for CreateConsentDataPermissions.
const (
	CreateConsentDataPermissionsACCOUNTSBALANCESREAD                                CreateConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	CreateConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         CreateConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	CreateConsentDataPermissionsACCOUNTSREAD                                        CreateConsentDataPermissions = "ACCOUNTS_READ"
	CreateConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            CreateConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsBANKFIXEDINCOMESREAD                                CreateConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	CreateConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 CreateConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	CreateConsentDataPermissionsCREDITFIXEDINCOMESREAD                              CreateConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	CreateConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                CreateConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	CreateConsentDataPermissionsEXCHANGESREAD                                       CreateConsentDataPermissions = "EXCHANGES_READ"
	CreateConsentDataPermissionsFINANCINGSPAYMENTSREAD                              CreateConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSREAD                                      CreateConsentDataPermissions = "FINANCINGS_READ"
	CreateConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  CreateConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsFINANCINGSWARRANTIESREAD                            CreateConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsFUNDSREAD                                           CreateConsentDataPermissions = "FUNDS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       CreateConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSREAD                               CreateConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           CreateConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     CreateConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	CreateConsentDataPermissionsLOANSPAYMENTSREAD                                   CreateConsentDataPermissions = "LOANS_PAYMENTS_READ"
	CreateConsentDataPermissionsLOANSREAD                                           CreateConsentDataPermissions = "LOANS_READ"
	CreateConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       CreateConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsLOANSWARRANTIESREAD                                 CreateConsentDataPermissions = "LOANS_WARRANTIES_READ"
	CreateConsentDataPermissionsRESOURCESREAD                                       CreateConsentDataPermissions = "RESOURCES_READ"
	CreateConsentDataPermissionsTREASURETITLESREAD                                  CreateConsentDataPermissions = "TREASURE_TITLES_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	CreateConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           CreateConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	CreateConsentDataPermissionsVARIABLEINCOMESREAD                                 CreateConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for EnumRejectedBy.
const (
	ASPSP EnumRejectedBy = "ASPSP"
	TPP   EnumRejectedBy = "TPP"
	USER  EnumRejectedBy = "USER"
)

// Defines values for ResponseConsentDataPermissions.
const (
	ResponseConsentDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentDataPermissionsACCOUNTSREAD                                        ResponseConsentDataPermissions = "ACCOUNTS_READ"
	ResponseConsentDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentDataPermissionsEXCHANGESREAD                                       ResponseConsentDataPermissions = "EXCHANGES_READ"
	ResponseConsentDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSREAD                                      ResponseConsentDataPermissions = "FINANCINGS_READ"
	ResponseConsentDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsFUNDSREAD                                           ResponseConsentDataPermissions = "FUNDS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentDataPermissionsLOANSREAD                                           ResponseConsentDataPermissions = "LOANS_READ"
	ResponseConsentDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentDataPermissionsRESOURCESREAD                                       ResponseConsentDataPermissions = "RESOURCES_READ"
	ResponseConsentDataPermissionsTREASURETITLESREAD                                  ResponseConsentDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentDataStatus.
const (
	ResponseConsentDataStatusAUTHORISED            ResponseConsentDataStatus = "AUTHORISED"
	ResponseConsentDataStatusAWAITINGAUTHORISATION ResponseConsentDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentDataStatusREJECTED              ResponseConsentDataStatus = "REJECTED"
)

// Defines values for ResponseConsentExtensionsDataPermissions.
const (
	ResponseConsentExtensionsDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentExtensionsDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentExtensionsDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSREAD                                        ResponseConsentExtensionsDataPermissions = "ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentExtensionsDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentExtensionsDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentExtensionsDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentExtensionsDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentExtensionsDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentExtensionsDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentExtensionsDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentExtensionsDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSREAD                                      ResponseConsentExtensionsDataPermissions = "FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentExtensionsDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentExtensionsDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsFUNDSREAD                                           ResponseConsentExtensionsDataPermissions = "FUNDS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentExtensionsDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentExtensionsDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSREAD                                           ResponseConsentExtensionsDataPermissions = "LOANS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentExtensionsDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentExtensionsDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsRESOURCESREAD                                       ResponseConsentExtensionsDataPermissions = "RESOURCES_READ"
	ResponseConsentExtensionsDataPermissionsTREASURETITLESREAD                                  ResponseConsentExtensionsDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentExtensionsDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentExtensionsDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentExtensionsDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentExtensionsDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentExtensionsDataStatus.
const (
	ResponseConsentExtensionsDataStatusAUTHORISED            ResponseConsentExtensionsDataStatus = "AUTHORISED"
	ResponseConsentExtensionsDataStatusAWAITINGAUTHORISATION ResponseConsentExtensionsDataStatus = "AWAITING_AUTHORISATION"
	ResponseConsentExtensionsDataStatusREJECTED              ResponseConsentExtensionsDataStatus = "REJECTED"
)

// Defines values for ResponseConsentReadDataPermissions.
const (
	ResponseConsentReadDataPermissionsACCOUNTSBALANCESREAD                                ResponseConsentReadDataPermissions = "ACCOUNTS_BALANCES_READ"
	ResponseConsentReadDataPermissionsACCOUNTSOVERDRAFTLIMITSREAD                         ResponseConsentReadDataPermissions = "ACCOUNTS_OVERDRAFT_LIMITS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSREAD                                        ResponseConsentReadDataPermissions = "ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsACCOUNTSTRANSACTIONSREAD                            ResponseConsentReadDataPermissions = "ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsBANKFIXEDINCOMESREAD                                ResponseConsentReadDataPermissions = "BANK_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSREAD                        ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSBILLSTRANSACTIONSREAD            ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_BILLS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSLIMITSREAD                       ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_LIMITS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSREAD                             ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_READ"
	ResponseConsentReadDataPermissionsCREDITCARDSACCOUNTSTRANSACTIONSREAD                 ResponseConsentReadDataPermissions = "CREDIT_CARDS_ACCOUNTS_TRANSACTIONS_READ"
	ResponseConsentReadDataPermissionsCREDITFIXEDINCOMESREAD                              ResponseConsentReadDataPermissions = "CREDIT_FIXED_INCOMES_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSBUSINESSIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALADITTIONALINFOREAD                 ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_ADITTIONALINFO_READ"
	ResponseConsentReadDataPermissionsCUSTOMERSPERSONALIDENTIFICATIONSREAD                ResponseConsentReadDataPermissions = "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ"
	ResponseConsentReadDataPermissionsEXCHANGESREAD                                       ResponseConsentReadDataPermissions = "EXCHANGES_READ"
	ResponseConsentReadDataPermissionsFINANCINGSPAYMENTSREAD                              ResponseConsentReadDataPermissions = "FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSREAD                                      ResponseConsentReadDataPermissions = "FINANCINGS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSSCHEDULEDINSTALMENTSREAD                  ResponseConsentReadDataPermissions = "FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsFINANCINGSWARRANTIESREAD                            ResponseConsentReadDataPermissions = "FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsFUNDSREAD                                           ResponseConsentReadDataPermissions = "FUNDS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSPAYMENTSREAD                       ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSREAD                               ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSSCHEDULEDINSTALMENTSREAD           ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsINVOICEFINANCINGSWARRANTIESREAD                     ResponseConsentReadDataPermissions = "INVOICE_FINANCINGS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsLOANSPAYMENTSREAD                                   ResponseConsentReadDataPermissions = "LOANS_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSREAD                                           ResponseConsentReadDataPermissions = "LOANS_READ"
	ResponseConsentReadDataPermissionsLOANSSCHEDULEDINSTALMENTSREAD                       ResponseConsentReadDataPermissions = "LOANS_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsLOANSWARRANTIESREAD                                 ResponseConsentReadDataPermissions = "LOANS_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsRESOURCESREAD                                       ResponseConsentReadDataPermissions = "RESOURCES_READ"
	ResponseConsentReadDataPermissionsTREASURETITLESREAD                                  ResponseConsentReadDataPermissions = "TREASURE_TITLES_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTPAYMENTSREAD             ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_PAYMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTREAD                     ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTSCHEDULEDINSTALMENTSREAD ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_SCHEDULED_INSTALMENTS_READ"
	ResponseConsentReadDataPermissionsUNARRANGEDACCOUNTSOVERDRAFTWARRANTIESREAD           ResponseConsentReadDataPermissions = "UNARRANGED_ACCOUNTS_OVERDRAFT_WARRANTIES_READ"
	ResponseConsentReadDataPermissionsVARIABLEINCOMESREAD                                 ResponseConsentReadDataPermissions = "VARIABLE_INCOMES_READ"
)

// Defines values for ResponseConsentReadDataRejectionReasonCode.
const (
	CONSENTEXPIRED           ResponseConsentReadDataRejectionReasonCode = "CONSENT_EXPIRED"
	CONSENTMAXDATEREACHED    ResponseConsentReadDataRejectionReasonCode = "CONSENT_MAX_DATE_REACHED"
	CONSENTTECHNICALISSUE    ResponseConsentReadDataRejectionReasonCode = "CONSENT_TECHNICAL_ISSUE"
	CUSTOMERMANUALLYREJECTED ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REJECTED"
	CUSTOMERMANUALLYREVOKED  ResponseConsentReadDataRejectionReasonCode = "CUSTOMER_MANUALLY_REVOKED"
	INTERNALSECURITYREASON   ResponseConsentReadDataRejectionReasonCode = "INTERNAL_SECURITY_REASON"
)

// Defines values for ResponseConsentReadDataStatus.
const (
	AUTHORISED            ResponseConsentReadDataStatus = "AUTHORISED"
	AWAITINGAUTHORISATION ResponseConsentReadDataStatus = "AWAITING_AUTHORISATION"
	REJECTED              ResponseConsentReadDataStatus = "REJECTED"
)

// Defines values for ResponseErrorUnprocessableEntityErrorsCode.
const (
	ResponseErrorUnprocessableEntityErrorsCodeCOMBINACAOPERMISSOESINCORRETA    ResponseErrorUnprocessableEntityErrorsCode = "COMBINACAO_PERMISSOES_INCORRETA"
	ResponseErrorUnprocessableEntityErrorsCodeDATAEXPIRACAOINVALIDA            ResponseErrorUnprocessableEntityErrorsCode = "DATA_EXPIRACAO_INVALIDA"
	ResponseErrorUnprocessableEntityErrorsCodeERRONAOMAPEADO                   ResponseErrorUnprocessableEntityErrorsCode = "ERRO_NAO_MAPEADO"
	ResponseErrorUnprocessableEntityErrorsCodeINFORMACOESPJNAOINFORMADAS       ResponseErrorUnprocessableEntityErrorsCode = "INFORMACOES_PJ_NAO_INFORMADAS"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSAOPFPJEMCONJUNTO          ResponseErrorUnprocessableEntityErrorsCode = "PERMISSAO_PF_PJ_EM_CONJUNTO"
	ResponseErrorUnprocessableEntityErrorsCodePERMISSOESPJINCORRETAS           ResponseErrorUnprocessableEntityErrorsCode = "PERMISSOES_PJ_INCORRETAS"
	ResponseErrorUnprocessableEntityErrorsCodeSEMPERMISSOESFUNCIONAISRESTANTES ResponseErrorUnprocessableEntityErrorsCode = "SEM_PERMISSOES_FUNCIONAIS_RESTANTES"
)

// Defines values for ResponseErrorUnprocessableEntityDeleteErrorsCode.
const (
	CONSENTIMENTOEMSTATUSREJEITADO ResponseErrorUnprocessableEntityDeleteErrorsCode = "CONSENTIMENTO_EM_STATUS_REJEITADO"
)

// N422ResponseErrorCreateConsent defines model for 422ResponseErrorCreateConsent.
type N422ResponseErrorCreateConsent struct {
	Errors []struct {
		// Code Códigos de erros previstos na durante o processo de extensão do consentimento:
		//  - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		//  - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		//  - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		//  - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
		Code N422ResponseErrorCreateConsentErrorsCode `json:"code"`

		// Detail Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: O consentimento informado não pode ser renovado sem redirecionamento porque depende de múltipla alçada para aprovação.
		// - ESTADO_CONSENTIMENTO_INVALIDO: O consentimento informado não pode ser renovado sem redirecionamento porque está em um estado que não permite a renovação.
		// - DATA_EXPIRACAO_INVALIDA: O consentimento informado não pode ser renovado pois a nova data de expiração não segue a convenção do ecossistema.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Detail string `json:"detail"`

		// Title Título específico do erro reportado, de acordo com o código enviado:
		// - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
		// - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
		// - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
		// - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido. O texto deve deixar claro o motivo do erro ocorrido.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// N422ResponseErrorCreateConsentErrorsCode Códigos de erros previstos na durante o processo de extensão do consentimento:
//   - DEPENDE_MULTIPLA_ALCADA: Necessário aprovação de múltipla alçada.
//   - ESTADO_CONSENTIMENTO_INVALIDO: Estado inválido do consentimento.
//   - DATA_EXPIRACAO_INVALIDA: Nova data para expiração do consentimento é inválida.
//   - ERRO_NAO_MAPEADO: Utilizado quando não houver um code de erro definido.
type N422ResponseErrorCreateConsentErrorsCode string

// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
//
// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
type BusinessEntity struct {
	Document BusinessEntityDocument `json:"document"`
}

// BusinessEntityDocument defines model for BusinessEntityDocument.
type BusinessEntityDocument struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityDocumentExtensions defines model for BusinessEntityDocumentExtensions.
type BusinessEntityDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do titular pessoa jurídica.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do titular pessoa jurídica.
	Rel string `json:"rel"`
}

// BusinessEntityExtensions Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
// Deve ser informado apenas para casos de consentimento pessoa jurídica.
// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
type BusinessEntityExtensions struct {
	Document BusinessEntityDocumentExtensions `json:"document"`
}

// CreateConsent defines model for CreateConsent.
type CreateConsent struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		//
		// É obrigatório que o número do CNPJ utilizado seja um número válido. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CNPJ.
		BusinessEntity *BusinessEntity `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timex.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		//
		// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
		LoggedUser  LoggedUser                     `json:"loggedUser"`
		Permissions []CreateConsentDataPermissions `json:"permissions"`
	} `json:"data"`
}

// CreateConsentDataPermissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
type CreateConsentDataPermissions string

// CreateConsentExtensions defines model for CreateConsentExtensions.
type CreateConsentExtensions struct {
	Data struct {
		// BusinessEntity Titular, pessoa jurídica a quem se referem os dados que são objeto de compartilhamento.
		// Deve ser informado apenas para casos de consentimento pessoa jurídica.
		// Não precisa ser armazenado separadamente. Para fins de renovação de consentimento, será utilizado apenas para verificação do consentimento vigente, pois é um atributo imutável.
		BusinessEntity *BusinessEntityExtensions `json:"businessEntity,omitempty"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timex.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`
	} `json:"data"`
}

// EnumRejectedBy Informar usuário responsável pela rejeição.
// 1. USER usuário
// 2. ASPSP instituição transmissora
// 3. TPP instituição receptora
type EnumRejectedBy string

// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
//
// É obrigatório que o número do documento utilizado seja um número válido e pertencente ao usuário logado. A transmissora pode utilizar algoritmos de validação de documento para garantir que se trata de um documento válido, como por exemplo: Cálculo de DV módulo 11 para o CPF.
type LoggedUser struct {
	Document LoggedUserDocument `json:"document"`
}

// LoggedUserDocument defines model for LoggedUserDocument.
type LoggedUserDocument struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserDocumentExtensions defines model for LoggedUserDocumentExtensions.
type LoggedUserDocumentExtensions struct {
	// Identification Número do documento de identificação oficial do usuário.
	Identification string `json:"identification"`

	// Rel Tipo do documento de identificação oficial do usuário.
	Rel string `json:"rel"`
}

// LoggedUserExtensions Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
type LoggedUserExtensions struct {
	Document LoggedUserDocumentExtensions `json:"document"`
}

// ResponseConsent defines model for ResponseConsent.
type ResponseConsent struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timex.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timex.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timex.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentDataPermissions defines model for ResponseConsent.Data.Permissions.
type ResponseConsentDataPermissions string

// ResponseConsentDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentDataStatus string

// ResponseConsentExtensions defines model for ResponseConsentExtensions.
type ResponseConsentExtensions struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timex.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento.
		// Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		// Em casos de consentimento com prazo indeterminado o campo não deve ser enviado.
		// Quando preenchido, o valor do campo não pode ultrapassar 12 meses.
		ExpirationDateTime *timex.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentExtensionsDataPermissions `json:"permissions"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentExtensionsDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timex.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentExtensionsDataPermissions defines model for ResponseConsentExtensions.Data.Permissions.
type ResponseConsentExtensionsDataPermissions string

// ResponseConsentExtensionsDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentExtensionsDataStatus string

// ResponseConsentRead defines model for ResponseConsentRead.
type ResponseConsentRead struct {
	Data struct {
		// ConsentID O consentId é o identificador único do consentimento e deverá ser um URN - Uniform Resource Name.
		// Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
		// Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
		// seja um identificador de recurso persistente e independente da localização.
		// Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
		// - o namespace(urn)
		// - o identificador associado ao namespace da instituição transnmissora (bancoex)
		// - o identificador específico dentro do namespace (C1DD33123).
		// Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
		ConsentID string `json:"consentId"`

		// CreationDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		CreationDateTime timex.DateTime `json:"creationDateTime"`

		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado o campo não deve ser preenchido.
		ExpirationDateTime *timex.DateTime `json:"expirationDateTime,omitempty"`

		// Permissions Especifica os tipos de permissões de acesso às APIs no escopo do Open Finance Brasil - Dados cadastrais e transacionais, de acordo com os blocos de consentimento fornecidos pelo usuário e necessários ao acesso a cada endpoint das APIs. Esse array não deve ter duplicidade de itens.
		Permissions []ResponseConsentReadDataPermissions `json:"permissions"`

		// Rejection Objeto a ser retornado caso o consentimento seja rejeitado.
		Rejection *struct {
			// Reason Define a razão pela qual o consentimento foi rejeitado.
			Reason struct {
				// AdditionalInformation Contém informações adicionais a critério da transmissora.
				AdditionalInformation *string `json:"additionalInformation,omitempty"`

				// Code Define o código da razão pela qual o consentimento foi rejeitado.
				//
				// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
				// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
				// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
				// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
				// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
				// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
				Code ResponseConsentReadDataRejectionReasonCode `json:"code"`
			} `json:"reason"`

			// RejectedBy Informar usuário responsável pela rejeição.
			// 1. USER usuário
			// 2. ASPSP instituição transmissora
			// 3. TPP instituição receptora
			RejectedBy EnumRejectedBy `json:"rejectedBy"`
		} `json:"rejection,omitempty"`

		// Status Estado atual do consentimento cadastrado.
		Status ResponseConsentReadDataStatus `json:"status"`

		// StatusUpdateDateTime Data e hora em que o recurso foi atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		StatusUpdateDateTime timex.DateTime `json:"statusUpdateDateTime"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseConsentReadDataPermissions defines model for ResponseConsentRead.Data.Permissions.
type ResponseConsentReadDataPermissions string

// ResponseConsentReadDataRejectionReasonCode Define o código da razão pela qual o consentimento foi rejeitado.
//
// - CONSENT_EXPIRED – consentimento que ultrapassou o tempo limite para autorização.
// - CUSTOMER_MANUALLY_REJECTED – cliente efetuou a rejeição do consentimento manualmente através de interação nas instituições participantes.
// - CUSTOMER_MANUALLY_REVOKED – cliente efetuou a revogação após a autorização do consentimento.
// - CONSENT_MAX_DATE_REACHED – consentimento que ultrapassou o tempo limite de compartilhamento.
// - CONSENT_TECHNICAL_ISSUE – consentimento que foi rejeitado devido a um problema técnico que impossibilita seu uso pela instituição receptora, por exemplo: falha associada a troca do AuthCode pelo AccessToken, durante o processo de Hybrid Flow.
// - INTERNAL_SECURITY_REASON – consentimento que foi rejeitado devido as políticas de segurança aplicada pela instituição transmissora.
type ResponseConsentReadDataRejectionReasonCode string

// ResponseConsentReadDataStatus Estado atual do consentimento cadastrado.
type ResponseConsentReadDataStatus string

// ResponseConsentReadExtensions defines model for ResponseConsentReadExtensions.
type ResponseConsentReadExtensions struct {
	Data []struct {
		// ExpirationDateTime Data e hora de expiração da permissão. Reflete a data limite de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format), utilizado apenas para consulta de alterações históricas de extensão do consentimento.
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada.
		//
		// Em casos de consentimento com prazo indeterminada o campo não deve ser preenchido.
		ExpirationDateTime *timex.DateTime `json:"expirationDateTime,omitempty"`

		// LoggedUser Usuário (pessoa natural) que encontra-se logado na instituição receptora e que iniciará o processo de consentimento para compartilhamento de dados.
		// Deve ser armazenado como novo usuário logado responsável pela renovação do consentimento atual.
		LoggedUser LoggedUserExtensions `json:"loggedUser"`

		// PreviousExpirationDateTime Data e hora de expiração anteriores a renovação. Reflete a data limite anterior de validade do consentimento. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC (UTC time format).
		//
		// [Restrição] De preenchimento obrigatório nos casos em que houver validade determinada. Em casos de consentimento com prazo indeterminado, ou renovações feitas com a v2.2.0 em que não exista persistência dessa informação, o campo não deve ser preenchido.
		PreviousExpirationDateTime *timex.DateTime `json:"previousExpirationDateTime,omitempty"`

		// RequestDateTime Data e hora em que o recurso foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
		RequestDateTime timex.DateTime `json:"requestDateTime"`

		// XCustomerUserAgent Indica o user-agent que o usuário utilizou quando solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XCustomerUserAgent *string `json:"xCustomerUserAgent,omitempty"`

		// XFapiCustomerIPAddress O endereço IP do usuário logado com o receptor que solicitou a renovação sem redirecionamento.
		//
		// [Restrição] De preenchimento obrigatório a partir da v3.0.0. Opcional para renovações feitas com a v2.2.0 quando não existir persistência dessa informação.
		XFapiCustomerIPAddress *string `json:"xFapiCustomerIpAddress,omitempty"`
	} `json:"data"`
	Links *api.Links `json:"links,omitempty"`
	Meta  *api.Meta  `json:"meta,omitempty"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntity defines model for ResponseErrorUnprocessableEntity.
type ResponseErrorUnprocessableEntity struct {
	Errors []struct {
		// Code - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
		// - INFORMACOES_PJ_NAO_INFORMADAS
		// - PERMISSOES_PJ_INCORRETAS
		// - PERMISSAO_PF_PJ_EM_CONJUNTO
		// - COMBINACAO_PERMISSOES_INCORRETA
		// - DATA_EXPIRACAO_INVALIDA
		// - ERRO_NAO_MAPEADO
		//
		// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
		Code ResponseErrorUnprocessableEntityErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico.
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico.
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityErrorsCode - SEM_PERMISSOES_FUNCIONAIS_RESTANTES
// - INFORMACOES_PJ_NAO_INFORMADAS
// - PERMISSOES_PJ_INCORRETAS
// - PERMISSAO_PF_PJ_EM_CONJUNTO
// - COMBINACAO_PERMISSOES_INCORRETA
// - DATA_EXPIRACAO_INVALIDA
// - ERRO_NAO_MAPEADO
//
// A opção “ERRO_NAO_MAPEADO” só deve ser utilizada caso não haja um code especifico mapeado para o erro.
type ResponseErrorUnprocessableEntityErrorsCode string

// ResponseErrorUnprocessableEntityDelete defines model for ResponseErrorUnprocessableEntityDelete.
type ResponseErrorUnprocessableEntityDelete struct {
	Errors []struct {
		// Code - CONSENTIMENTO_EM_STATUS_REJEITADO
		Code ResponseErrorUnprocessableEntityDeleteErrorsCode `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`
	Meta *api.Meta `json:"meta,omitempty"`
}

// ResponseErrorUnprocessableEntityDeleteErrorsCode - CONSENTIMENTO_EM_STATUS_REJEITADO
type ResponseErrorUnprocessableEntityDeleteErrorsCode string

// Authorization defines model for Authorization.
type Authorization = string

// AuthorizationExtensions defines model for AuthorizationExtensions.
type AuthorizationExtensions = string

// ConsentID defines model for ConsentId.
type ConsentID = string

// Page defines model for Page.
type Page = int32

// PageSize defines model for PageSize.
type PageSize = int32

// XCustomerUserAgent defines model for xCustomerUserAgent.
type XCustomerUserAgent = string

// XCustomerUserAgentExtensions defines model for xCustomerUserAgentExtensions.
type XCustomerUserAgentExtensions = string

// XFapiAuthDate defines model for xFapiAuthDate.
type XFapiAuthDate = string

// XFapiCustomerIPAddress defines model for xFapiCustomerIpAddress.
type XFapiCustomerIPAddress = string

// XFapiCustomerIPAddressExtensions defines model for xFapiCustomerIpAddressExtensions.
type XFapiCustomerIPAddressExtensions = string

// XFapiInteractionID defines model for xFapiInteractionId.
type XFapiInteractionID = openapi_types.UUID

// N200ConsentsConsentIDRead defines model for 200ConsentsConsentIdRead.
type N200ConsentsConsentIDRead = ResponseConsentRead

// N200ConsentsConsentIDReadExtensions defines model for 200ConsentsConsentIdReadExtensions.
type N200ConsentsConsentIDReadExtensions = ResponseConsentReadExtensions

// N201ConsentsCreated defines model for 201ConsentsCreated.
type N201ConsentsCreated = ResponseConsent

// N201ConsentsCreatedExtensions defines model for 201ConsentsCreatedExtensions.
type N201ConsentsCreatedExtensions = ResponseConsentExtensions

// BadRequest defines model for BadRequest.
type BadRequest = ResponseError

// Forbidden defines model for Forbidden.
type Forbidden = ResponseError

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ResponseError

// InternalServerError defines model for InternalServerError.
type InternalServerError = ResponseError

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ResponseError

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ResponseError

// NotFound defines model for NotFound.
type NotFound = ResponseError

// SiteIsOverloaded defines model for SiteIsOverloaded.
type SiteIsOverloaded struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timex.Date `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = ResponseError

// Unauthorized defines model for Unauthorized.
type Unauthorized = ResponseError

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ResponseErrorUnprocessableEntity

// UnprocessableEntityConsents defines model for UnprocessableEntityConsents.
type UnprocessableEntityConsents = N422ResponseErrorCreateConsent

// UnprocessableEntityDelete defines model for UnprocessableEntityDelete.
type UnprocessableEntityDelete = ResponseErrorUnprocessableEntityDelete

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = ResponseError

// ConsentsPostConsentsParams defines parameters for ConsentsPostConsents.
type ConsentsPostConsentsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsDeleteConsentsConsentIDParams defines parameters for ConsentsDeleteConsentsConsentID.
type ConsentsDeleteConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsGetConsentsConsentIDParams defines parameters for ConsentsGetConsentsConsentID.
type ConsentsGetConsentsConsentIDParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization Authorization `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsConsentIDExtendsParams defines parameters for ConsentsPostConsentsConsentIDExtends.
type ConsentsPostConsentsConsentIDExtendsParams struct {
	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions `json:"x-fapi-customer-ip-address"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent XCustomerUserAgentExtensions `json:"x-customer-user-agent"`
}

// ConsentsGetConsentsConsentIDExtensionsParams defines parameters for ConsentsGetConsentsConsentIDExtensions.
type ConsentsGetConsentsConsentIDExtensionsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas. A transmissora deve considerar entrada como 25, caso seja informado algum valor menor pela receptora. Enquanto houver mais que 25 registros a enviar, a transmissora deve considerar o mínimo por página como 25. Somente a última página retornada (ou primeira, no caso de página única) pode conter menos de 25 registros. Mais informações, acesse Especificações de APIs > Padrões > Paginação.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`

	// Authorization Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
	Authorization AuthorizationExtensions `json:"Authorization"`

	// XFapiAuthDate Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *XFapiAuthDate `json:"x-fapi-auth-date,omitempty"`

	// XFapiCustomerIPAddress O endereço IP do usuário se estiver atualmente logado com o receptor.
	XFapiCustomerIPAddress *XFapiCustomerIPAddress `json:"x-fapi-customer-ip-address,omitempty"`

	// XFapiInteractionID Um UUID RFC4122 usado como um ID de correlação entre request e response. Campo de geração e envio obrigatório pela receptora (client) e o seu valor deve ser “espelhado” pela transmissora (server) no cabeçalho de resposta. Caso não seja recebido ou se for recebido um valor inválido, a transmissora deve gerar um x-fapi-interaction-id e retorná-lo na resposta com o HTTP Status Code 400. A receptora deve acatar o valor recebido da transmissora.
	XFapiInteractionID XFapiInteractionID `json:"x-fapi-interaction-id"`

	// XCustomerUserAgent Indica o user-agent que o usuário utiliza.
	XCustomerUserAgent *XCustomerUserAgent `json:"x-customer-user-agent,omitempty"`
}

// ConsentsPostConsentsJSONRequestBody defines body for ConsentsPostConsents for application/json ContentType.
type ConsentsPostConsentsJSONRequestBody = CreateConsent

// ConsentsPostConsentsConsentIDExtendsJSONRequestBody defines body for ConsentsPostConsentsConsentIDExtends for application/json ContentType.
type ConsentsPostConsentsConsentIDExtendsJSONRequestBody = CreateConsentExtensions

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ConsentsPostConsents operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsDeleteConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsDeleteConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsDeleteConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentID operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentID(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (siw *ServerInterfaceWrapper) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2AuthorizationCodeScopes, []string{"openid", "consent:consentId"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsPostConsentsConsentIDExtendsParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Required header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddressExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = XFapiCustomerIPAddress

	} else {
		err := fmt.Errorf("Header parameter x-fapi-customer-ip-address is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-customer-ip-address", Err: err})
		return
	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Required header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgentExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = XCustomerUserAgent

	} else {
		err := fmt.Errorf("Header parameter x-customer-user-agent is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-customer-user-agent", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsPostConsentsConsentIDExtends(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (siw *ServerInterfaceWrapper) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "consentId" -------------
	var consentID ConsentID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuth2SecurityScopes, []string{"consents"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsentsGetConsentsConsentIDExtensionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization AuthorizationExtensions
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	// ------------- Optional header parameter "x-fapi-auth-date" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-auth-date")]; found {
		var XFapiAuthDate XFapiAuthDate
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-auth-date", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-auth-date", valueList[0], &XFapiAuthDate, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-auth-date", Err: err})
			return
		}

		params.XFapiAuthDate = &XFapiAuthDate

	}

	// ------------- Optional header parameter "x-fapi-customer-ip-address" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-customer-ip-address")]; found {
		var XFapiCustomerIPAddress XFapiCustomerIPAddress
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-customer-ip-address", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-customer-ip-address", valueList[0], &XFapiCustomerIPAddress, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-customer-ip-address", Err: err})
			return
		}

		params.XFapiCustomerIPAddress = &XFapiCustomerIPAddress

	}

	// ------------- Required header parameter "x-fapi-interaction-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-fapi-interaction-id")]; found {
		var XFapiInteractionID XFapiInteractionID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-fapi-interaction-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-fapi-interaction-id", valueList[0], &XFapiInteractionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-fapi-interaction-id", Err: err})
			return
		}

		params.XFapiInteractionID = XFapiInteractionID

	} else {
		err := fmt.Errorf("Header parameter x-fapi-interaction-id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "x-fapi-interaction-id", Err: err})
		return
	}

	// ------------- Optional header parameter "x-customer-user-agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-customer-user-agent")]; found {
		var XCustomerUserAgent XCustomerUserAgent
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "x-customer-user-agent", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-customer-user-agent", valueList[0], &XCustomerUserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "x-customer-user-agent", Err: err})
			return
		}

		params.XCustomerUserAgent = &XCustomerUserAgent

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ConsentsGetConsentsConsentIDExtensions(w, r, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/consents", wrapper.ConsentsPostConsents)
	m.HandleFunc("DELETE "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsDeleteConsentsConsentID)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}", wrapper.ConsentsGetConsentsConsentID)
	m.HandleFunc("POST "+options.BaseURL+"/consents/{consentId}/extends", wrapper.ConsentsPostConsentsConsentIDExtends)
	m.HandleFunc("GET "+options.BaseURL+"/consents/{consentId}/extensions", wrapper.ConsentsGetConsentsConsentIDExtensions)

	return m
}

type N200ConsentsConsentIDReadResponseHeaders struct {
	XFapiInteractionID openapi_types.UUID
}
type N200ConsentsConsentIDReadJSONResponse struct {
	Body ResponseConsentRead

	Headers N200ConsentsConsentIDReadResponseHeaders
}

type N200ConsentsConsentIDReadExtensionsResponseHeaders struct {
	XFapiInteractionID openapi_types.UUID
}
type N200ConsentsConsentIDReadExtensionsJSONResponse struct {
	Body ResponseConsentReadExtensions

	Headers N200ConsentsConsentIDReadExtensionsResponseHeaders
}

type N201ConsentsCreatedResponseHeaders struct {
	XFapiInteractionID openapi_types.UUID
}
type N201ConsentsCreatedJSONResponse struct {
	Body ResponseConsent

	Headers N201ConsentsCreatedResponseHeaders
}

type N201ConsentsCreatedExtensionsResponseHeaders struct {
	XFapiInteractionID openapi_types.UUID
}
type N201ConsentsCreatedExtensionsJSONResponse struct {
	Body ResponseConsentExtensions

	Headers N201ConsentsCreatedExtensionsResponseHeaders
}

type N204ConsentsConsentIDDeletedResponseHeaders struct {
	XFapiInteractionID openapi_types.UUID
}
type N204ConsentsConsentIDDeletedResponse struct {
	Headers N204ConsentsConsentIDDeletedResponseHeaders
}

type BadRequestApplicationJSONCharsetUTF8Response ResponseError

type ForbiddenApplicationJSONCharsetUTF8Response ResponseError

type GatewayTimeoutApplicationJSONCharsetUTF8Response ResponseError

type InternalServerErrorApplicationJSONCharsetUTF8Response ResponseError

type MethodNotAllowedApplicationJSONCharsetUTF8Response ResponseError

type NotAcceptableApplicationJSONCharsetUTF8Response ResponseError

type NotFoundApplicationJSONCharsetUTF8Response ResponseError

type SiteIsOverloadedApplicationJSONCharsetUTF8Response struct {
	Errors []struct {
		// Code Código de erro específico do endpoint
		Code string `json:"code"`

		// Detail Descrição legível por humanos deste erro específico
		Detail string `json:"detail"`

		// Title Título legível por humanos deste erro específico
		Title string `json:"title"`
	} `json:"errors"`

	// Meta Meta informações referente a API requisitada.
	Meta *struct {
		// RequestDateTime Data e hora da consulta, conforme especificação RFC-3339, formato UTC.
		RequestDateTime timex.Date `json:"requestDateTime"`
	} `json:"meta,omitempty"`
}

type TooManyRequestsApplicationJSONCharsetUTF8Response ResponseError

type UnauthorizedApplicationJSONCharsetUTF8Response ResponseError

type UnprocessableEntityApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntity

type UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response N422ResponseErrorCreateConsent

type UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response ResponseErrorUnprocessableEntityDelete

type UnsupportedMediaTypeApplicationJSONCharsetUTF8Response ResponseError

type ConsentsPostConsentsRequestObject struct {
	Params ConsentsPostConsentsParams
	Body   *ConsentsPostConsentsJSONRequestBody
}

type ConsentsPostConsentsResponseObject interface {
	VisitConsentsPostConsentsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsents201JSONResponse struct {
	N201ConsentsCreatedJSONResponse
}

func (response ConsentsPostConsents201JSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("x-fapi-interaction-id", fmt.Sprint(response.Headers.XFapiInteractionID))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsPostConsents400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsents529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsents529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsdefaultJSONResponse) VisitConsentsPostConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsDeleteConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsDeleteConsentsConsentIDParams
}

type ConsentsDeleteConsentsConsentIDResponseObject interface {
	VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsDeleteConsentsConsentID204Response = N204ConsentsConsentIDDeletedResponse

func (response ConsentsDeleteConsentsConsentID204Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("x-fapi-interaction-id", fmt.Sprint(response.Headers.XFapiInteractionID))
	w.WriteHeader(204)
	return nil
}

type ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityDeleteApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID422ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsDeleteConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsDeleteConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsDeleteConsentsConsentIDdefaultJSONResponse) VisitConsentsDeleteConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDParams
}

type ConsentsGetConsentsConsentIDResponseObject interface {
	VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentID200JSONResponse struct {
	N200ConsentsConsentIDReadJSONResponse
}

func (response ConsentsGetConsentsConsentID200JSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("x-fapi-interaction-id", fmt.Sprint(response.Headers.XFapiInteractionID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentID529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDdefaultJSONResponse) VisitConsentsGetConsentsConsentIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsPostConsentsConsentIDExtendsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsPostConsentsConsentIDExtendsParams
	Body      *ConsentsPostConsentsConsentIDExtendsJSONRequestBody
}

type ConsentsPostConsentsConsentIDExtendsResponseObject interface {
	VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error
}

type ConsentsPostConsentsConsentIDExtends201JSONResponse struct {
	N201ConsentsCreatedExtensionsJSONResponse
}

func (response ConsentsPostConsentsConsentIDExtends201JSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("x-fapi-interaction-id", fmt.Sprint(response.Headers.XFapiInteractionID))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends400ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends401ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends403ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends404ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends405ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends406ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response struct {
	UnsupportedMediaTypeApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends415ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response struct {
	UnprocessableEntityConsentsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends422ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends429ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends500ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends504ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsPostConsentsConsentIDExtends529ApplicationJSONCharsetUTF8Response) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsPostConsentsConsentIDExtendsdefaultJSONResponse) VisitConsentsPostConsentsConsentIDExtendsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDExtensionsRequestObject struct {
	ConsentID ConsentID `json:"consentId"`
	Params    ConsentsGetConsentsConsentIDExtensionsParams
}

type ConsentsGetConsentsConsentIDExtensionsResponseObject interface {
	VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error
}

type ConsentsGetConsentsConsentIDExtensions200JSONResponse struct {
	N200ConsentsConsentIDReadExtensionsJSONResponse
}

func (response ConsentsGetConsentsConsentIDExtensions200JSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("x-fapi-interaction-id", fmt.Sprint(response.Headers.XFapiInteractionID))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response struct {
	BadRequestApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions400ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response struct {
	UnauthorizedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions401ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response struct {
	ForbiddenApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions403ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response struct {
	NotFoundApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions404ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response struct {
	MethodNotAllowedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions405ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(405)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response struct {
	NotAcceptableApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions406ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response struct {
	TooManyRequestsApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions429ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response struct {
	InternalServerErrorApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions500ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response struct {
	GatewayTimeoutApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions504ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response struct {
	SiteIsOverloadedApplicationJSONCharsetUTF8Response
}

func (response ConsentsGetConsentsConsentIDExtensions529ApplicationJSONCharsetUTF8Response) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(529)

	return json.NewEncoder(w).Encode(response)
}

type ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse struct {
	Body       ResponseError
	StatusCode int
}

func (response ConsentsGetConsentsConsentIDExtensionsdefaultJSONResponse) VisitConsentsGetConsentsConsentIDExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Criar novo pedido de consentimento.
	// (POST /consents)
	ConsentsPostConsents(ctx context.Context, request ConsentsPostConsentsRequestObject) (ConsentsPostConsentsResponseObject, error)
	// Deletar / Revogar o consentimento identificado por consentId.
	// (DELETE /consents/{consentId})
	ConsentsDeleteConsentsConsentID(ctx context.Context, request ConsentsDeleteConsentsConsentIDRequestObject) (ConsentsDeleteConsentsConsentIDResponseObject, error)
	// Obter detalhes do consentimento identificado por consentId.
	// (GET /consents/{consentId})
	ConsentsGetConsentsConsentID(ctx context.Context, request ConsentsGetConsentsConsentIDRequestObject) (ConsentsGetConsentsConsentIDResponseObject, error)
	// Renovar consentimento identificado por consentId.
	// (POST /consents/{consentId}/extends)
	ConsentsPostConsentsConsentIDExtends(ctx context.Context, request ConsentsPostConsentsConsentIDExtendsRequestObject) (ConsentsPostConsentsConsentIDExtendsResponseObject, error)
	// Obter detalhes de extensões feitas no consentimento identificado por consentId.
	// (GET /consents/{consentId}/extensions)
	ConsentsGetConsentsConsentIDExtensions(ctx context.Context, request ConsentsGetConsentsConsentIDExtensionsRequestObject) (ConsentsGetConsentsConsentIDExtensionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ConsentsPostConsents operation middleware
func (sh *strictHandler) ConsentsPostConsents(w http.ResponseWriter, r *http.Request, params ConsentsPostConsentsParams) {
	var request ConsentsPostConsentsRequestObject

	request.Params = params

	var body ConsentsPostConsentsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsents(ctx, request.(ConsentsPostConsentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsDeleteConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsDeleteConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsDeleteConsentsConsentIDParams) {
	var request ConsentsDeleteConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsDeleteConsentsConsentID(ctx, request.(ConsentsDeleteConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsDeleteConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsDeleteConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsDeleteConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentID operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentID(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDParams) {
	var request ConsentsGetConsentsConsentIDRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentID(ctx, request.(ConsentsGetConsentsConsentIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsPostConsentsConsentIDExtends operation middleware
func (sh *strictHandler) ConsentsPostConsentsConsentIDExtends(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsPostConsentsConsentIDExtendsParams) {
	var request ConsentsPostConsentsConsentIDExtendsRequestObject

	request.ConsentID = consentID
	request.Params = params

	var body ConsentsPostConsentsConsentIDExtendsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsPostConsentsConsentIDExtends(ctx, request.(ConsentsPostConsentsConsentIDExtendsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsPostConsentsConsentIDExtends")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsPostConsentsConsentIDExtendsResponseObject); ok {
		if err := validResponse.VisitConsentsPostConsentsConsentIDExtendsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConsentsGetConsentsConsentIDExtensions operation middleware
func (sh *strictHandler) ConsentsGetConsentsConsentIDExtensions(w http.ResponseWriter, r *http.Request, consentID ConsentID, params ConsentsGetConsentsConsentIDExtensionsParams) {
	var request ConsentsGetConsentsConsentIDExtensionsRequestObject

	request.ConsentID = consentID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ConsentsGetConsentsConsentIDExtensions(ctx, request.(ConsentsGetConsentsConsentIDExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsentsGetConsentsConsentIDExtensions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ConsentsGetConsentsConsentIDExtensionsResponseObject); ok {
		if err := validResponse.VisitConsentsGetConsentsConsentIDExtensionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9TXMbOZLoX8FyZuNJ2yRFUnLb1sTGLE1SbnolkktSPR+SRoKqQAruqkI1gKIlW47o",
	"68Y7znU34vn1ocMvok8de5kr/0n/khcJoL7I4ocsyWrbpUO7WYUCEon8QiKR+aZgMddnHvGkKOy+KfiY",
	"Y5dIwtWveiAvGKevsaTMgwc2ERanvv5ZaOBzMv0JOxcMfTMc9pCPbT79kZVRj3CXSoK+DwjCAlmc2MSz",
	"KKYCCfISu2jEuEcsamOBbOITzyaezZDNkKQ+QzZBnFgBFwwJ5lCLSmyzQrFAYdALgm3CC8WCh11S2J2B",
	"sVjg5PuAcmIXdiUPSLEgrAviYgDexZf7xBvLi8JurbLzpFhwqRc+qBYLPpaScBji6Pj41fHxn46Pxcm/",
	"FIoFeeXDQEJy6o0Lb98W02O2LiXxBGWe+IIw9DdATgJP+kE2thrME8STbXseP11khS/R9D1iiNrEk3RE",
	"LWwzjqb/8KilZm2aUZd4kiGCbDIhfPoOCcJR4KLDfgeV0KFHR4y7qE8EC7hFUAe7pIzQsXeomhShG2gB",
	"34+oR22GPIyO+nuNJ9Wd6snGhZS+2N3akow5okyJHJUZH29dSNfZ4iMLGm0CnDDi7FjHXtvATjjA0m+j",
	"klre6XuEJafnwfRnG5brHDH1VqGdoONCwL3jAiLQK6yY8LFF1IyI8Ik1/XlELQaguwgj6kniTX+a/qho",
	"ALpnqumxB2QDXaQxmCAUn3BBhSSeJIgg6oVkJQmyMXKYhR36Gqu+Fc5g2ahNOAbCw0gvKAq4t3uOPYuR",
	"y91Gtdnc3q7WtgE4hsglcX2HIZAhiXWVxGVi99grIRbPbyPg3qZ+lgYYC8EsimHIRHOAkHpCUhlQPXvJ",
	"sSc8lwrBOEYbBqTMLhNoRPCCK4qK+96I5rFZPvbaikIAD/9DBHKBI20isXOBgRcFO+cE6elJHkQrEfUm",
	"FGm6ijChUeBI9eGN6ax87IUM7WN5EbNzhNm1WfnR1ylO/jrJyX+DBT3Cpdf10l8rpacn8f+WTt5UitvV",
	"t4m3G5tfFY+PS+Xdf/23P/z+9J/+5X/98/Hx1h9/d/LV7zMZv4fHZJ7nO9N/uATWACN/+m5MPazomAip",
	"+BmoTU1LgFDDaIOhCXaAlDHyOXUJ5fGH0/eoulkO8fR9QPhVjCgfhk/ixCYjHDhSyTK1yLKwW6Ce3K4V",
	"ioAw6gZuYbdW3Xm882T7653HCmv6YTWaH3DgmPBoggP6OmOS/xFgT1Ib2wRJJrGjGXFMheRMIJ/xcAqi",
	"jOqamENaBvpRpKOYjyOgWECE4rHaoyKyMIh9YHeqaRWYxRkHrkGUSzzonzgYeJ/4knFcRi3ve4CJoQsW",
	"TAjXlA2Irz1KQIYR8SYU8yLCy6FiyJ3+7FGXJScTwlhGA+YqyYLR9B+OpG68ZJxIxj29skG0okXkMT0x",
	"m8SrC+IfbyKf2WpsSfTkgMdSYJfRAcyGJlm3iIAbBUEtYH8lDAxP2wTVe22BjoNKZZugHuhkeB79hsG1",
	"HFxCWSUBC59JXrVHy+irWqlUEpQFjTNI67IRCMlcwg8F4fUx8eQ8kbU9m1oYMRQIwksYGhmVEIhg+o5T",
	"hgJJQaqXF9kGlyXLjFOKOyksECRVA/iHGU3zM1pmOd3j3NYSmrec6x72KdhdTSwzpEMTS4yIOzshh42B",
	"JYBxQ66ZkNdK87OIlcuoT3xOQAUAE9kEYYtxZSKBgQBK5nFte7WSgUab5ZbW2btoEHhFVK2gAfFRrVJ9",
	"jKpPd3e2d7er6HDYWIzhEfZpCQfyomTDTBdpoKcpXMLPhAbaOGDe9TAg138i9vXwIrje4/R6gOX1IPA2",
	"i+j42H5Te4s2XmDveo+cXx9gfl33+fUBvrp+EXjXLwLnuh6MrwfEv+5a8rrDJtdNYm2qD3femu93U/+g",
	"jecHw+vDYWPz94vXL6TXtl+3bU6EyLJfwYTiZPoTQ+0emBXRYgql0iiIWiwD7Gh56LAxNmuVWNIV+I3I",
	"mPolbEC5P7Kdm/YyNn1IBHwsPm6D4sEWzDhrDwN7i8N2E/X3GjvVWg0FwkyQgTnebiKlvDgnjlYqSqET",
	"ZeMQIRH8n/DBpiujBnb15m5MeNhYKWSG2DmnYyynvwBq07odbVgOJZ7cRCBNBAlCgwlUNtihv/7wX2AD",
	"gwnLfv3hv/XnKe2+IQifEL6ptXC0Z7UNcEJiAE4w5AFMyvaA4c9hB8UCWOoR4/GjyBSh3mT6zqE2y7Yn",
	"xsqUCFxk1pnGmC5RW6EGjIXpu5KjdmohMIZ81JZ6ILEMBGqAjbBTqYA5FWNGjYItLJXFomGKoLTTIK0i",
	"wjRwS+mPXGLXd+Bb+/GTkbVDHpW2H1u4tGPj7RK2R7XS0/PKk9r56Gmt9qRSSFgLQaC6ThDw9teL6fdv",
	"R5XSU1wa1Ut7J2+evC0lf+7c5Ge19jZLEL6FSWriVLxfq1TMZl5Em/o+wYoplH2mrRTs+w61lLth66XQ",
	"nqMYOb/nZFTYLfxuK/Y8bem3YqtvRjO9q74VGDNulZQ3INpmabEiArD7lO2mV1KBnr2IOTN/rsyMzJ/a",
	"RX+GnPm2uJAb0/r6vvgyMUoGh/aJxyaJDZeVc2zOsTnHVqoRx3KCJbk3zbmG1uQ057+c/+b578tiwPtX",
	"lmsqyh8zzrlG1FOHMtr7m/NpzqdJPv28GXVnzrZtEocYlblMsXEyiX1MOcvkLPNFmJbPsN3XdLdCj/0B",
	"WReYCyL/NZCj0pObq7UW54xnqbJ6eG6r6XvEKHKxo08ocRExl0qqYglUNIRkIkX6oqipz2PIx1cOwzbQ",
	"H5YcT6bv1R4y/s7D6LC/Xy68LRb2GD+ntk28B5t2F0n2HfGQJC4iwmI+Q9RTYkEqFgpcjHzmTH+W1FLn",
	"NYKMA4696U9Y4WhCmYNtDJN5jiV5ha+G1CUseLiFfF4ftv5U/wsatg9a3cMhKqGZpfXC9cWSeDZVx1Bh",
	"XIUkIOkcqsKbiJD4nDjEojaDCSpXuoedgRJKGoAHWze1RrA+iHDOgPDGGv8gP+q9Niyex5BLLc4EiFE6",
	"/UnN4oDIC2Z3mKw7Dnu1chN3n6SnPCkutRlHMDxwDCg8JRTDwB8QqYGL3Ol7yexQ0Ac+4ypo7G2xADOx",
	"QLDic4c8oPgIQ9k0kQEQ1LtQQU0JzaUhRTYdEa6Dl5hQQXFKRrjTn22Kka/C6yi8UhwInb0MwDoAlY1B",
	"ExFORLIXgg6He6UnBh97LPAecl3no/v0upFLKiRRlBnyIAUd5qrjYLWaAypJW3QnhIMQvR11Ytum0BI7",
	"Pc58wiUlorA7wo4gxYKfePSmADykrSsqiStu+LXF7Ixz8sb0F5uO1aIpFk1FcoG5ZfuMqjP9VLjTo/XP",
	"+ADzElMn44xe/dKk6JDx9OcJcVSsy0XgYh2DAisxC9cMLCqKcn1gJJVOBh6G059l4NwGjpvg5G3yaOtI",
	"L00IWoSvk+gzdv6SWBKgd/FlW699dVtZQ+GvqC3mHF+ppkSuJrA0Eg6IxOkQH8RJyL5aYCfixsDiT5OY",
	"McubWBJQsIuiMtCFMi9x5KRORI2SZCjRjww2BqXt7e2nRaQtQ4YOhw0YObYsa5VatVR5VKpVh5Unu9uV",
	"3Urlr0lL0oRNpGhmdkWKhcvSmJXMQ9jnXJab+rvoRYm6INF1DDd0UxhTeRGcly3mbjkB/e5qy2XWd6Vz",
	"7H23RY0a3lJ9hQd98ZLPomp+sWc+MMyf0S5DtgljGUzf6XBKC3NO1I4N1hGWDMcWJAhCoexHn1FhjA7q",
	"jdX+JDQz3Om7S+oqOTHsDdDYYefYKSJPcYarQtGYshaHjB1g78pYyuIBdd3yaboBlSraNFKIQO4jxrGL",
	"RkS9Cy0uFTdsEwkazwMk+oRPf2Z6+xZhSKNEb/tCQw66tJg2VT1J0sgFbB162ISOP6CN00htWnEAEEQM",
	"iAPY+JOtaDcKk9bmePRIz8TnTBlG5w5peZLKq48yoaxxs00f6kl8qeKcU5Y20Xti2EzgInKxiPW+z4Qw",
	"2sCMwREWKkxaBSbD8ppAMSLKC7AQOllujg0j4tSXHQK96rAf7PPYoQms+Q9HUt/BCDvTn2CfA5gMXBfz",
	"q8Luzb4sFibYCUjS2jgKTYdCs9VrdZqt04PD/WG7t18/re836s16rLEStw2MpygOn1VIVWGmgnDElU/W",
	"ZkgQF3FiU04s0FH6K5/x7wMS3srIhFSHwCfmE+nPm824XHh7EuvKOQW2SLmoiOMeHhOje+Fnn1iM2/BA",
	"+wvWI+adWi1Fz9ppvuSMaSklT9/dJylr9+BDsbUZ/SGZWwQ+mADEPiA2xUOliB9sAxMaRHbszlGT07dn",
	"wrfRNrRciIlSiZTllAdWzqrdxw02GCLcYSikTqgwTiY74BisSxaugt6KqAOdrAOb3WMPldACSbSLbsT6",
	"qqvWYFhvdk8b3c6g1Rm2D1qdYfe03fm2vt9udndRS6idYaz9ZgHSvTTrw/pp68+9dr/eqEffA0BsAqau",
	"NAKLXPqULzqLmr6PxgmB6/e7p5169/Sg3mvVAZ5DHZFtM/R9oK4NqSU3Fw7ULlwLTLVZCa9g6YsuxAtc",
	"sCQXi/GluCgUCwtmCV/OAAp2amyhLx5x7b1iuD+b3Z/CNDkxJF6cidVmyDLbW3XlwmbqjtRC4nk45VUG",
	"uFZQ4p1Cp1UFUV4rokkcHuuezMVJbLqKIVxI5TeGTZngGHkRdyimj3nDHJWMA3MTbBJdyWOIWEyoa3Yu",
	"1ni7IyZBXSTJpXJgTeA1vcQcWQ7msA1ymaSTmOQY6JSYsyJKf0ASule3yH2y3Q1l9p2I7PuR2L8tWryZ",
	"Gfygzqx1fVlJJw32afkAnt/aRYN9Ou+gWehvKRaeBYJ6RIh4lzvDNFQGDuZF5IM9g9HLgE9/Vnet1D1M",
	"Fwli/GouAsMI20zfE1QWD4xjvOjM9TGX1LnAId0ee9P/TB9n6wtOXnjjk6FGp/civLhlm/PmwI1aGKaY",
	"uxOpRJP5jCPsjBmn0tV22wQDgUfUYzMrMIIKOGSMwYSjXE+BQLdaoAduoml0lq0O933Gw8vMu6gxfedY",
	"IGVsgprfInf6iw2/qlXdv56Spu60xRn2vsqYTi9YM/xqdsmj7lYvejMxchqm+GJ0dkaHTrxSMXJskrhQ",
	"rfHMRtSi2NH5CBQ9zZFT2g1aTf2l+bm6kzosPz6231R3sg66ASFZ1pfKiHDXEMOypuFMg3lUL/315E0m",
	"nDMrN4N0PYu5VQRBwck4cLBk/Kq0pIOThQueDmbLl/4TWfq59Vx24+7e5DdCx14zDCxK3Cz3iYeFSeqA",
	"BcsI55/DJnTVUSYlWI4Cqy4xd/Fr4mmxD93ZamBSRj3oe0Q9of3TXtIYSI1UhI6m7xIKJAndhPDEqs+Z",
	"QxM6huGMh137IcKQEkTdQE7fTYhz95I8Ff95A5m+wuMBRuD80/M57b8+wDCoNiiB1NY8J0vvjGxz9C6E",
	"yiLSJyOHqM2aMlnNWUSks5W2nrN+D90o2QjY63ZitDUO4gRxfU7MZWhDJxExwSCvmUfQ4bCBNuA/8MR4",
	"ozaVBXPUJzC4+uQENQmQMPGsC0NEKevGY8KwhLnLbQzneHbRsQwY4C13EQMBtD7Hr5lKyxIf5TBkqbhB",
	"T8NveNPsW8ro2PsPbbWHMIIFE6XLSH2sDShHcuxj5Uys1pBLBBGzdvk655UlgHv+0DJ5pVvfvd4sbVSP",
	"KqXayXXlj0fV0tOTzdLG9lGlenJ9VK2dHFVKT+M3w40/7sKr42P7unZUqda2TzZ39bPa9s4jeD73+6/z",
	"EnjRWelQg3xH56XFgsPGY2IfCsJXMdl+3PJtsWDYI5TtEeKPCvVGo3vYGQ5O+616s1CMf3e/bfWb/fre",
	"8HS/fdCOG/Rbg+5hv9EyD06Kse8zzbBxBgyUjJUJOdVc0cLawTn9P0Knx/BYGM5mM9T1iYf2qIc9i6Bn",
	"HAvqoBJqKuViYRsLyTEViGizHSt3ARVze2+Bzh1mZbFAmO+KCeQTJ3GNnCAv3ioKhFkIKFYDR0EgyMYa",
	"8DJqCUGQ2p4lOEcSjuzAd6gV8iaiIJjLCefjwiV4Vt+vdyJMJ14M+/XOoN4Ytrud9Reu0W8128PTRr3f",
	"HJzOjpn98ll7f3+tJlkAZbdfB6bM3g4Hw+5Bqz847bX6g26nvn/abrY6w/Zeu1Ff1bLebA+hTX2/3dnr",
	"zjd8djhod1qDweouo5bZXe61O/VOo915Psh4Mmh802oe7reap+3OYFjfP2glFiDRrlf/y6JXf6r3+/XO",
	"sB3TRLvzbbfdaJ3Oj5zxZikEGe1nIcloMg/RfrfemfmxdFzdZHYo/XS+98OOevS81TzNoPi1Gi2FZvmn",
	"s1Aubz0P/YzwLBae1Tv/frrX/rMCptE9aM2yRua7vcNOM/rxbb3frj/bb802GvZb9cFhv3U6bA/348et",
	"Pze+AYhj+T236Vnid5oxJZN6JaWdbrLRTHeSYQuezFmwYIWutF6X7Uvv3o5NGty5RZtbtHdh0W58PJN2",
	"85OyaZfsbpcJobXlSMsL3D6BX8R+dpWVJ0wtJI8NRnPpSu3mw/tULwkNE1uiY69aRoeDVj/+BB7Wyqg+",
	"6A16WXkmQzc0tNsuo2FvtlV8L8lcMgotShgHTELoGTRBr5c+fDbv5wT/fmopZq6lhWBvGMeLh2XAsbOp",
	"8yh6FvMkxyURJVvy8EJwdQ5R6lGLYj59NxPpMOPm0Xk9024j5XKHbcB6/v/YUbfyEACpHYoknqUjfNOJ",
	"0vCndkrQ27uNaymmhw87IMj4/mN4iMMVW+gRnnEHV+fdwdV7dAdng9fo7c3c7cvw/m4/kON/fiE/stM/",
	"X9K1HPqZGvJTEeWpo4CE317JPY9N5kRxptJdkthAJQS8W3n4oW722cQpa25QrDypeZ7U/CMlNUe3zWoO",
	"M/9t5TWPRXMm7mcDfj5OyvJiweLkBq6CKINvSI0jRk1epTL6SJv++T1/fpzzAVvf3EuUe4lyRlmDUWbO",
	"L/ODxpsdNN7PcW9+fpmfX+bnl/n55ad0flksCJXfK0uLqCsSykcwv00OlYDNUpEbh8Nvuv32oKUE2J/q",
	"7WG78/w0fKp4UCHtRasxbDXTPviFzeemoyE+9MEYuMUWQc1M+b7zbcKnZP3M3SWJC3HNbRwj8l5ANWlL",
	"6o4P6YsFh3rfiaxLKfvqxR3dSnmQuy8LjwoX513NfXq5Ty/36d2jTy889c69er91dZ2713L32qflXsv9",
	"XLmfK/dz5X6u3M+V+7kewM+Vu7W+SLfWZ+5fyl1EUX3J3DmUO4dy51Ae8JUHfOUBXx/RI/Vw9ALC4R49",
	"UuiuHFKx+ykP1sqdWLkTK3di5U6s3ImVO7EeJFiLqzvYmZcIuzqnHDa5gyXj+rIYFkqzpwS6KTD5klBp",
	"XF2zRXqwyBqjCTtdlfUZv9ZpoB2Mvg+wMzeCrqaycIC44JDZH2XPqcE8OX3vztQbwjY1Ogz0DKdy+h6U",
	"0Wy5yZStMiSm8icYdVT3pQ3I+bTJ5NIiNrVn0yVXd2YMlz/+0/Gx2Ewmvj36G/yTvcXJzHxvEBpnQ7Zv",
	"jFuwIkvIJDrW2YpbTfTrD3+f+QoMxuiMUBWlSdUI1LmiA8l4YuOudsCh/D09qHcO6/v7fzkNPZ16FFUb",
	"lSAyIjJgAUpe9J/3trjYC7Dj6rvkiaqSujKpSextSiyYDboqsoC5pBb1sSq0sASwb7v/vgSuCRuHJWv8",
	"6S9APqkZZ2wPzEgGuwf1P58268MWcC/IsZujOTvlY2qQYavxTafdAB07GBy2FoyRIgKwoqjyrARg2rNz",
	"h7gYyel7S/m81I1U12dC0HPqUIlVEdtAGCJbcJW1mL5bP8LOBY5cKljVm2UWBpzVA3mh6sMq67BugQ04",
	"ZN8Rr7igdsM3V+ec2mjPYa/C2bc7w1YfzIVBq3HYbw9hMeuDbudG0xdxiU8xU+MTq6IbasPo4CXZJdJ1",
	"EGbYKmGNzHPDgpeKIuHdAhpKvJpZeaXzs7GSPmOYh3KN9NtZjlmeSvGx7ObvTEKQ+dJl0atiqE2yBsxP",
	"aXKXVR58fOfBx7/+8L/z+OP4cGmdGOQFBYu+XAdlcUF+5/AUQrmPHGO1gY12QYVyVBrdu7g+032H4t08",
	"GA8/jO8zT2e2Rjoz2DqSCWWBaN2OF8EO5ZRx2EGmyhYtYMuw/W+DPz92ROvNzw+KiAUxXlWlVF0jVU9u",
	"UivXypVw6LiMNg4Pk6f/z7MorJoQyQrDP6qw1xtz53apWilVnwyrOXcu484blWPOY/LvfgEuG4GQzCUc",
	"5F59bHIfzWZXVJUlGAoE4SUMjcxCRCcxGmUsCCtImZrFxu8R54DKqiV2Y0GCtT+Gg3kz2S5XypUy6vqq",
	"Q0cbCSvFQLLQlRIDlK+UA7NcfsBeU8fBW4/KFbRBexfMI9Wd4td/QId/QI3eIdKPUHeAqo9Od5BDvyPo",
	"AFvw4M+bM769SkV5XqPft/D0Xe5hn4ar2vbrts2JEFnxSsSzCSfTnxhq95JZ08J0XrpQWuiQ0VkRv4B1",
	"rT6ulWvVx+VarVzdua91WpwltbhG4fV5z/yXvNXSBWjvuBpsVPButq6gOVO+RTW6xSVEm+qXZimHjE3t",
	"X8bRReBiTxlDQs7Dda91FT8cjo9coa/6aZXoW1ki/q4IuoQGrYPTXqt/0B4Muq3B6d5hp9HudurtwWm/",
	"NRjWO8PWQPvA97r9g3oD2vReqBqR5lGzrhok+ui9UEeO/X5rmHpX75729uBt6+C00e28OOwMu/p04eBZ",
	"u6PqWCZ6ibpYUu4yq2YlaJY6Yr7mlF9/+K/ZBr/+8N9ITH+JjfXQmaDLV5kKl1iHmar6lpFtyJCLfaIq",
	"wOqkvYD2tFt+DXwq5/kSdBaKhUXYjF9lIVP565fi8hZVkNeb2H2Ls/JvRZ6Vc4F2hwItLs1/R2ItXV23",
	"dXA6GNaHhwN1ItYeKjExf5a2uHXmodaS5rlez9kgq6KBIFbAqbwaqEsRioK79UBe1OA/6rQfVqKRSdR7",
	"TnDJkGqeCG3Umuj7QBc8D1M9S+Jd4CjikYnINM3wmXlLz5xRH3YcfOaUfK7mN0E4kNBnorpiMtP2yGGv",
	"dHhN1kRTDw+5U9gthBcH4JUgfEJ42TDgliEUYTE/dfNmN3EDp9DSMagW8yTxVATxendutM9oRf7rcK9r",
	"Sk8zn3jUjr0hejXS8Ru6ZL1QsHCCjcFhTA8NoM+ZZBZz4kLaOiJAd19WfMu+I6sRpFopegspEBrVoANN",
	"bQNDhoC8aGV0VEqDE4Un7KiHc0gWIP84XRSVcgdAwiPYg5tBJbYUWxJXic/CWJYU/42Auv8NcAM8Sb3x",
	"OS8zPi4UC0CThd3CczYBLlUhFgtDkVtJt9//ENgNBynIEwOUztVXZSMZKNvCnGCbCOJNmDMhNuNbWtIn",
	"2bbeayuCMBUjVFhY6DwOD6yKKYcJSYUDzfKrCG3PrAmtiqxGJWQZ908J9s6JQqxMiIAiQcachEMTT3KC",
	"0onnEcmq5qpvDPwOdTnQUOiF0TJVBUaBTQ6YMEefwqCDXFpOIOhEF3pFCviMyeppNZLTGqamlb2+qqa9",
	"HjekXjR9r9iaCX1MGMtFWCN1ICqJu3vsIVRCPRVrp1ZgIcWHueyN5N1FZ73uYIi2wgHPdFdNMmFOEHXh",
	"Z/SsOkrK3l109ryV6GrrTSTg3p7NQrisKq4C2sScrQA3OcaWOie1M6dAkKMOSCzmxqeraUCAAlSEGyzb",
	"srnocdSZWsa0Epwwg/pddNZs7beGrYUoKqE+sZhLPFuVSBgxLokJ8EMOoUDQwJGC6AGO0uRbQkfNxklI",
	"snrM+EYbCIaRJjcjF7B0sBAUe2WPyK1X9Du6pS/KbXX3tnw8JmKrVn2686Sy87S6qQnbxfrUT9+7IwIE",
	"wZhjoWSAcY4CKLpes65yk1LmOMVVit7FTEyqvbgihGfU/YiMsQuGQIpFf/3h71qNpfR60swQBNnTd4lo",
	"SQYo698SSdXH24+fbFcebzWvPOxS66uGot2v+mRMgf9BsG4q3u5gZF1gV8XOqSDRLOGKllOR8gMAdUR1",
	"gQIXKeWExoSDLTChGJ1p/jm1YvV4Vp4bf2lJi/XGSZlCp2DqnGkxpqJCmebXs+UyqQjt9J4EWoJyMneA",
	"VRUOLfrii8Vn2SFmetxu3JMura0DK0IT6SwObTtDghnm0hGsacKZjW+GrQVYVyR1vLDUGFX6IawlVUKN",
	"tLdmze6THQKidPxT9nLp8ibhhG2yEFUGGWEE35lBwdcV5FIvkAbgIbOxQFioE0gRMp66M0tgUYD7BBkH",
	"xAVrENvcMNxRf6+xvb39dOV1Wmi0icLzR4aOC68DJzguGEVoJ7aaNkMjtaGYUxbJojI2hX273gt6DB31",
	"QJ+rsMeU2XN7hv/66XalsqX0/Fexnv+KfJXS879Te6DS+T83tv+5XhXUYiWblFLgbxqqxfz7gE7Cgyrl",
	"totCBHyHyNC6Oeszh4izIjrTpu4ZIugsEcR2Zix3jQkVpKzijjyGFiCjCO9cIlyGwJZA2KIuRqX1sG9W",
	"KhaxigxV5i0enogxTrW9pEbKMiXmy+LLkPQSU1PshMc88LExtqL9DQZ7SBlajjoWIy/xbI/RybnE59AK",
	"n2N6yXbBDkTo7Exp8uuS/gv/nflb8Hjt97f49FqBh/rd/Rb826gPW8+7/XYdNVuoWW92Bwge15/3D3t1",
	"5eZB83/XoWO73e0M0I3+rtGg0e21UBfECKqVK7PvPwnshXNZMMVVKFjz6l7Wp+EmRmR3nQbPyBM208fc",
	"pqK3l3x/C+ytmvmdYC99ZexGtMdNMo91sPfl0F7GzU10X7SXTr2hVRLIVQybgd5eTn1aBn/+1Lf0hvHH",
	"k3wvcsn35Um+ZXfWH0jyvfjiqe8zt/lS+SVuZjF/hMW9De1hy2KBJ8Va4DWYJ7GY3xRgByTzauylMoB8",
	"Dti7iWB+AM69CfZyzv0cOdcYpIs4d19dzBGrsZeZhSfn3Jxzc859GJ3bupQcy0VaN4G9uexTuc59cM79",
	"3D2kC1Ozfeq0Z3FiU1myMLdFaY6N57aSXJpjjQafvrepZOtp3ZWp5nLezbVuzrsPwrv6YNf4gW6AwTXU",
	"8JoYDE36nHtz7v1yuPdj+EhXZY1d8undCJc9FawqPkf8LZV/H0W0fMYe+nzPgeI0veimMS255EOZ6Ylz",
	"7N0Ie4vzMOfYW429VCrqnHPXxt5MovRc7n0o9m4m/HLspbF3M+F3jRyGPZFjL6swwRqcq0PVqTcWny72",
	"QjdG148TXiY3RGG8l83UEQjHcjYmZ3XthIUIDDzMOfbGxI42ayU2IdzmeCS/DPK7Ua2H9KfUmzBqkVI2",
	"GebYWyYN863uSuwtkYa52kXXaEGNnNzk+1DsrWf65djLxt56pl+OvWzsrWf65djLHaS3xN6C0lzrYO8c",
	"e9+VRvSS2CXqWcwl4ks9Gro5/qKjoQX4+7Q2a21vQkR44zoGz+zUcLSZ+3F2rxaXeLuxe36COcXnDsmi",
	"vS+E+jJr4q2HPckJFgEnJZWgTHyJeiOrcuCatDcKPFvkWje/OPSh2EuXp7z7Y8kovn/6f91zyuY6WSmZ",
	"b0N+5NK6wN44j8S9L/KLclKUUH1pghkyCSuq6JSHyYT0FuOcqGxaM2kzdIYPjyGXmdwxWOX0WZAjL8pd",
	"Y3LdzOdlIt6Epgttx1nriSfh9ywMcf0KAM/DJi1HEeGMGZryhGqKJn1IMq2TjXWWQsm4x9A3w2EPDXSW",
	"HFVKcadSMWlKsnpW1V15EXrUKcLikuEq6YhKlSlU7kRRDMs3MSSCc4t5LwOTZjH5har16GAkApVOzlbp",
	"8lw2UbkUo2Fmc5sQ5HNmB4Abhbzwa6aTaykwoYO56dUq1TKq6wSRuuKqKdKDVAJUlT2OS5NNRlWRiorX",
	"JAfVq2MzUYRP2CL3fDFlCgJsRgIVTZ6/MBPLbAYX3RFLUoFaAlclLXKxJ6mNRTmRJYkD/G7q+1HgRTXX",
	"8UrGCBfXJL7WqFM4Oy7s1GooldgX6cy+UfKhpQnqPJ2yydYZl8KscQgmQ2UQoy0qAiTKaPqfiuhVaiaT",
	"xGmnUkUsQDuVbY285MdRhRgF+ohxnYJQ58WydBKvVF3OMupBH9BchG1VN3Fjj4ynv1iwVngZugA3Uboc",
	"l3gCj4mXYlmsWNafvhtTD8/mofv1h7/fWSa6JscjGaej2649rT6qbD/ejGQSQ+70vWQ2C5PrnemSzDrP",
	"mcn6pRKjz9Y9fanSiUXpo0AemtRhKM6LZbJqJUnJtGl0my3AlCIXnQBQrExsGGYcA9JxTaYuHhbLShbH",
	"2ojwj0WYY89kWcVqUR8A55uIIKyOIBdU8CpCA1UctiRInF1tNkUmlnTCBNowTJBMyWbS5Jla26kcUcmK",
	"WJlpRhfW0sKzGQRTOaoQlpyeB5Kh+QKFhqVUr0l2ZiKqoxWlXVP92Wwd6bGxThLLzUR1LiZEnN/aqCCg",
	"aZMjU9e4KaNjry0EQ9RVa6CI/PsAOyofcpRSbuMsLtBytqmxFtVVDHO1puHt6QSqL8IEqjFkFvbxa5ig",
	"porXCqFRprCVVXU0emfW0YzWMflbI42bhNukPeYZ+ZDh1zgIB+eLyvkUigWHWsQTKqGzScFb97F1QVCt",
	"XEnl1d3d2nr16lUZq7cqgZ35VGzttxutzqBVgk/iPOWFVF7KUlau10KxMCFc6Jy722XzPbAp9ql6VFFQ",
	"+FheqHzGW3FC4zcFn4mM4lYHRhLO5paEtQhc5LHJXPpjNaQmepWGOgS6x4QM/19BwbEL5C8Ku0fZpQfj",
	"Jlup5OCFt8WVH6g6T/AVMN7aH8wXhlr3y7YqkW6ZWa/z1XxpsbcnUXWjZ8y+CrM/m6pj2Fc8CCNsvRS6",
	"IL8uzriqdGODEyzDkqs6u3R6lXv4ymHYNim/l6S2TqZ5lzwgKu+7rmugiKhWqS4CJmq3VatUQzrQkAG+",
	"CjuVyupPn2G7rxGkP1ljtEMvzCcajrO9+qM9xs+pbRNPf7Gz+osOk3ss8MwQj1Z/cEDkBbM7TNYdh70K",
	"Yft6rZHqFigfMDHVV9VH66BBBD5Y7cQ+IDbFwytff1yrrfPxfP0d9e3T1d8OGTvA3pVZNlUy9NE6S902",
	"FQYGKme6LmKlvl1jMZ5jSV7hK9C3LFCk8mgdUAdUkrboTggHbtBLYpMRDhx5Z7yYrsqVwYvwAlEvtOvL",
	"qaIJSlTOJrA/ihPTn4AIEYHrYn5lstRzLaQTOTJnWVrisVAlQOJe3hYLmaaEVhBhoZIlqkI1whxtmcTD",
	"fM4CSNYiUEZINMpiFaJrpETCw3zQvLE2aURVEtYQ1F+Q6klJ8p11JPnO7GLYeo1ykX47kf6BUtkUEcpl",
	"829fNjcjCdn/IAmZIbWLhTFZZcOzc0l4lGx/frPzIWL5OZG5TP4oMrmyjkyuzMnkPsG5QL6lQM7F6W9a",
	"nHZvJdduYAKH3rTVPpOwqCbLqIyxuDxNGXVnPbzTX+KDAd2LbdyZREjyEmv3Z+T9jJ2fm4iEddCc6U/Y",
	"xkhQ13f08Qv2eQTPhnFi+sTTbn13+g9HUt9hwrSzGSdis4xQ3fiYo4noWvLheYUprpOc6iSEfOQQSW2M",
	"JHbPp+9VtZWoQokde91Pn7eGmag/Xc+5FOmgllmpj6eKWlEZn4+olD5g0DtQT8lRP4bfKjneCg/Wsho0",
	"9+bDSq1Crmk/LW9WJPdzVf+wqj6jCOhRWFyymFHlcsYK6JsTmnvV/ZrJd9+svdtKV4fTfYRBEGtDeuwd",
	"e+2DXrevCk3vonoYWwJDaeGnzscS1a3MIaLk6vSKuIhxm7jIJhYnwopr4YVHxSYuxZgEZ/D46KRsJHt4",
	"gHm2WUbHXhPYRxdZKqooIeoSyk25nzggxedEqMzm03cIq4pA8Wj6bHRBpbAJHevyPj6jAo0YRRgpk8RN",
	"i/cRoRLrs7f196YJUf2ZmwYfd7+6+qseHpN12w3oa3LHe+BcR+e74S9yN5zSOkpmCuTdfousAIRV0rIz",
	"PR9YP6oCKgjqcWbruqlz1YWxT8vn2LNY2WJu+ZyruKKSqTcca+HJtpIbi4f4hrnMCUtcZo1yse4wJ9Fk",
	"Z8dLBjCmz8rXLGQ8V2ER6wrX8e4/Lt4c26Qnb/9/AAAA//+11UDXgzQBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
