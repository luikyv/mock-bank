//go:build go1.22

// Package app provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240908200014-2be24b11ae0f DO NOT EDIT.
package app

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/luiky/mock-bank/internal/apiutil"
	"github.com/luiky/mock-bank/internal/timeutil"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionCookieScopes = "SessionCookie.Scopes"
)

// Defines values for ResourceStatus.
const (
	AVAILABLE              ResourceStatus = "AVAILABLE"
	PENDINGAUTHORISATION   ResourceStatus = "PENDING_AUTHORISATION"
	TEMPORARILYUNAVAILABLE ResourceStatus = "TEMPORARILY_UNAVAILABLE"
	UNAVAILABLE            ResourceStatus = "UNAVAILABLE"
)

// Defines values for ResourceType.
const (
	ACCOUNT                    ResourceType = "ACCOUNT"
	BANKFIXEDINCOME            ResourceType = "BANK_FIXED_INCOME"
	CREDITCARDACCOUNT          ResourceType = "CREDIT_CARD_ACCOUNT"
	CREDITFIXEDINCOME          ResourceType = "CREDIT_FIXED_INCOME"
	EXCHANGE                   ResourceType = "EXCHANGE"
	FINANCING                  ResourceType = "FINANCING"
	FUND                       ResourceType = "FUND"
	INVOICEFINANCING           ResourceType = "INVOICE_FINANCING"
	LOAN                       ResourceType = "LOAN"
	TREASURETITLE              ResourceType = "TREASURE_TITLE"
	UNARRANGEDACCOUNTOVERDRAFT ResourceType = "UNARRANGED_ACCOUNT_OVERDRAFT"
	VARIABLEINCOME             ResourceType = "VARIABLE_INCOME"
)

// AccountData defines model for AccountData.
type AccountData struct {
	AccountID                   string `json:"accountId"`
	AutomaticallyInvestedAmount string `json:"automaticallyInvestedAmount"`
	AvailableAmount             string `json:"availableAmount"`
	BlockedAmount               string `json:"blockedAmount"`
	BranchCode                  string `json:"branchCode"`
	CheckDigit                  string `json:"checkDigit"`
	CompeCode                   string `json:"compeCode"`
	Number                      string `json:"number"`
	Subtype                     string `json:"subtype"`
	Type                        string `json:"type"`
}

// AccountRequest defines model for AccountRequest.
type AccountRequest struct {
	Data struct {
		AutomaticallyInvestedAmount string  `json:"automaticallyInvestedAmount"`
		AvailableAmount             string  `json:"availableAmount"`
		BlockedAmount               string  `json:"blockedAmount"`
		Number                      string  `json:"number"`
		OverdraftLimitContracted    *string `json:"overdraftLimitContracted,omitempty"`
		OverdraftLimitUnarraged     *string `json:"overdraftLimitUnarraged,omitempty"`
		OverdraftLimitUsed          *string `json:"overdraftLimitUsed,omitempty"`
		Subtype                     string  `json:"subtype"`
		Type                        string  `json:"type"`
	} `json:"data"`
}

// AccountResponse defines model for AccountResponse.
type AccountResponse struct {
	Data AccountData `json:"data"`
}

// AccountsResponse defines model for AccountsResponse.
type AccountsResponse struct {
	Data  []AccountData `json:"data"`
	Links *apiutil.Links    `json:"links,omitempty"`
	Meta  *apiutil.Meta     `json:"meta,omitempty"`
}

// AuthURLResponse defines model for AuthUrlResponse.
type AuthURLResponse struct {
	Data struct {
		URL string `json:"url"`
	} `json:"data"`
}

// ConsentsResponse defines model for ConsentsResponse.
type ConsentsResponse struct {
	Data []struct {
		ClientID             string          `json:"clientId"`
		ConsentID            string          `json:"consentId"`
		CreationDateTime     timeutil.DateTime  `json:"creationDateTime"`
		ExpirationDateTime   *timeutil.DateTime `json:"expirationDateTime,omitempty"`
		Permissions          []string        `json:"permissions"`
		RejectedBy           *string         `json:"rejectedBy,omitempty"`
		RejectionReason      *string         `json:"rejectionReason,omitempty"`
		Status               string          `json:"status"`
		StatusUpdateDateTime timeutil.DateTime  `json:"statusUpdateDateTime"`
		UserID               string          `json:"userId"`
	} `json:"data"`
	Links *apiutil.Links `json:"links,omitempty"`
	Meta  *apiutil.Meta  `json:"meta,omitempty"`
}

// MockUserRequest defines model for MockUserRequest.
type MockUserRequest struct {
	Data struct {
		Cpf      string  `json:"cpf"`
		Name     string  `json:"name"`
		Password *string `json:"password,omitempty"`
		Username string  `json:"username"`
	} `json:"data"`
}

// MockUserResponse defines model for MockUserResponse.
type MockUserResponse struct {
	Data struct {
		Cpf      string  `json:"cpf"`
		ID       string  `json:"id"`
		Name     string  `json:"name"`
		Password *string `json:"password,omitempty"`
		Username string  `json:"username"`
	} `json:"data"`
}

// MockUsersResponse defines model for MockUsersResponse.
type MockUsersResponse struct {
	Data []struct {
		Cpf      string `json:"cpf"`
		ID       string `json:"id"`
		Name     string `json:"name"`
		Username string `json:"username"`
	} `json:"data"`
	Links *apiutil.Links `json:"links,omitempty"`
	Meta  *apiutil.Meta  `json:"meta,omitempty"`
}

// ResourceStatus defines model for ResourceStatus.
type ResourceStatus string

// ResourceType defines model for ResourceType.
type ResourceType string

// ResourcesResponse defines model for ResourcesResponse.
type ResourcesResponse struct {
	Data []struct {
		ConsentID        string         `json:"consentId"`
		CreationDateTime timeutil.DateTime `json:"creationDateTime"`
		ResourceID       string         `json:"resourceId"`
		Status           ResourceStatus `json:"status"`
		Type             ResourceType   `json:"type"`
	} `json:"data"`
	Links apiutil.Links `json:"links"`
	Meta  apiutil.Meta  `json:"meta"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data struct {
		Organizations []struct {
			ID   string `json:"id"`
			Name string `json:"name"`
		} `json:"organizations"`
		Username string `json:"username"`
	} `json:"data"`
}

// AccountID defines model for accountId.
type AccountID = openapi_types.UUID

// MockUserID defines model for mockUserId.
type MockUserID = openapi_types.UUID

// OrganizationID defines model for organizationId.
type OrganizationID = string

// Page defines model for page.
type Page = int32

// PageSize defines model for pageSize.
type PageSize = int32

// HandleDirectoryCallbackParams defines parameters for HandleDirectoryCallback.
type HandleDirectoryCallbackParams struct {
	IDToken string `form:"id_token" json:"id_token"`
	Nonce   string `form:"nonce" json:"nonce"`
}

// GetMockUsersParams defines parameters for GetMockUsers.
type GetMockUsersParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// GetConsentsParams defines parameters for GetConsents.
type GetConsentsParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// GetResourcesParams defines parameters for GetResources.
type GetResourcesParams struct {
	// Page Número da página que está sendo requisitada (o valor da primeira página é 1).
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Quantidade total de registros por páginas.
	PageSize *PageSize `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// PatchResourceStatusJSONBody defines parameters for PatchResourceStatus.
type PatchResourceStatusJSONBody struct {
	Data struct {
		Status ResourceStatus `json:"status"`
	} `json:"data"`
}

// PatchResourceStatusParams defines parameters for PatchResourceStatus.
type PatchResourceStatusParams struct {
	Type ResourceType `form:"type" json:"type"`
}

// CreateMockUserJSONRequestBody defines body for CreateMockUser for application/json ContentType.
type CreateMockUserJSONRequestBody = MockUserRequest

// UpdateMockUserJSONRequestBody defines body for UpdateMockUser for application/json ContentType.
type UpdateMockUserJSONRequestBody = MockUserRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = AccountRequest

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody = AccountRequest

// PatchResourceStatusJSONRequestBody defines body for PatchResourceStatus for application/json ContentType.
type PatchResourceStatusJSONRequestBody PatchResourceStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the authentication URL for the directory service
	// (GET /api/directory/auth-url)
	GetDirectoryAuthURL(w http.ResponseWriter, r *http.Request)

	// (GET /api/directory/callback)
	HandleDirectoryCallback(w http.ResponseWriter, r *http.Request, params HandleDirectoryCallbackParams)
	// Logout the current user
	// (POST /api/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Get current user information
	// (GET /api/me)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// List mock users in an organization
	// (GET /api/orgs/{orgId}/users)
	GetMockUsers(w http.ResponseWriter, r *http.Request, orgID OrganizationID, params GetMockUsersParams)
	// Create a new user in an organization
	// (POST /api/orgs/{orgId}/users)
	CreateMockUser(w http.ResponseWriter, r *http.Request, orgID OrganizationID)
	// Delete a mock user in an organization
	// (DELETE /api/orgs/{orgId}/users/{userId})
	DeleteMockUser(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID)
	// Update a user in an organization
	// (PUT /api/orgs/{orgId}/users/{userId})
	UpdateMockUser(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID)
	// Get accounts of a user
	// (GET /api/orgs/{orgId}/users/{userId}/accounts)
	GetAccounts(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, params GetAccountsParams)
	// Create a new account
	// (POST /api/orgs/{orgId}/users/{userId}/accounts)
	CreateAccount(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID)
	// Delete an account
	// (DELETE /api/orgs/{orgId}/users/{userId}/accounts/{accountId})
	DeleteAccount(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, accountID AccountID)
	// Update an account
	// (PUT /api/orgs/{orgId}/users/{userId}/accounts/{accountId})
	UpdateAccount(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, accountID AccountID)
	// Get consents of a user
	// (GET /api/orgs/{orgId}/users/{userId}/consents)
	GetConsents(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, params GetConsentsParams)
	// Get shared resources of a user
	// (GET /api/orgs/{orgId}/users/{userId}/resources)
	GetResources(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, params GetResourcesParams)
	// Update status of a shared resource
	// (PATCH /api/orgs/{orgId}/users/{userId}/resources/{resourceId}/consents/{consentId})
	PatchResourceStatus(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, resourceID string, consentID openapi_types.UUID, params PatchResourceStatusParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDirectoryAuthURL operation middleware
func (siw *ServerInterfaceWrapper) GetDirectoryAuthURL(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDirectoryAuthURL(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HandleDirectoryCallback operation middleware
func (siw *ServerInterfaceWrapper) HandleDirectoryCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleDirectoryCallbackParams

	// ------------- Required query parameter "id_token" -------------

	if paramValue := r.URL.Query().Get("id_token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id_token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id_token", r.URL.Query(), &params.IDToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id_token", Err: err})
		return
	}

	var cookie *http.Cookie

	if cookie, err = r.Cookie("nonce"); err == nil {
		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "nonce", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
			return
		}
		params.Nonce = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "nonce"})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HandleDirectoryCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMockUsers operation middleware
func (siw *ServerInterfaceWrapper) GetMockUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMockUsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMockUsers(w, r, orgID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMockUser operation middleware
func (siw *ServerInterfaceWrapper) CreateMockUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMockUser(w, r, orgID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMockUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteMockUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMockUser(w, r, orgID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMockUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateMockUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMockUser(w, r, orgID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAccounts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccounts(w, r, orgID, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAccount(w, r, orgID, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "accountId" -------------
	var accountID AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", r.PathValue("accountId"), &accountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccount(w, r, orgID, userID, accountID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "accountId" -------------
	var accountID AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", r.PathValue("accountId"), &accountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAccount(w, r, orgID, userID, accountID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetConsents operation middleware
func (siw *ServerInterfaceWrapper) GetConsents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsents(w, r, orgID, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResources operation middleware
func (siw *ServerInterfaceWrapper) GetResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResources(w, r, orgID, userID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchResourceStatus operation middleware
func (siw *ServerInterfaceWrapper) PatchResourceStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgID OrganizationID

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", r.PathValue("orgId"), &orgID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orgId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userID MockUserID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", r.PathValue("resourceId"), &resourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	// ------------- Path parameter "consentId" -------------
	var consentID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "consentId", r.PathValue("consentId"), &consentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "consentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionCookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchResourceStatusParams

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchResourceStatus(w, r, orgID, userID, resourceID, consentID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/directory/auth-url", wrapper.GetDirectoryAuthURL)
	m.HandleFunc("GET "+options.BaseURL+"/api/directory/callback", wrapper.HandleDirectoryCallback)
	m.HandleFunc("POST "+options.BaseURL+"/api/logout", wrapper.LogoutUser)
	m.HandleFunc("GET "+options.BaseURL+"/api/me", wrapper.GetCurrentUser)
	m.HandleFunc("GET "+options.BaseURL+"/api/orgs/{orgId}/users", wrapper.GetMockUsers)
	m.HandleFunc("POST "+options.BaseURL+"/api/orgs/{orgId}/users", wrapper.CreateMockUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}", wrapper.DeleteMockUser)
	m.HandleFunc("PUT "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}", wrapper.UpdateMockUser)
	m.HandleFunc("GET "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/accounts", wrapper.GetAccounts)
	m.HandleFunc("POST "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/accounts", wrapper.CreateAccount)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/accounts/{accountId}", wrapper.DeleteAccount)
	m.HandleFunc("PUT "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/accounts/{accountId}", wrapper.UpdateAccount)
	m.HandleFunc("GET "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/consents", wrapper.GetConsents)
	m.HandleFunc("GET "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/resources", wrapper.GetResources)
	m.HandleFunc("PATCH "+options.BaseURL+"/api/orgs/{orgId}/users/{userId}/resources/{resourceId}/consents/{consentId}", wrapper.PatchResourceStatus)

	return m
}

type GetDirectoryAuthURLRequestObject struct {
}

type GetDirectoryAuthURLResponseObject interface {
	VisitGetDirectoryAuthURLResponse(w http.ResponseWriter) error
}

type GetDirectoryAuthURL200ResponseHeaders struct {
	SetCookie string
}

type GetDirectoryAuthURL200JSONResponse struct {
	Body    AuthURLResponse
	Headers GetDirectoryAuthURL200ResponseHeaders
}

func (response GetDirectoryAuthURL200JSONResponse) VisitGetDirectoryAuthURLResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type HandleDirectoryCallbackRequestObject struct {
	Params HandleDirectoryCallbackParams
}

type HandleDirectoryCallbackResponseObject interface {
	VisitHandleDirectoryCallbackResponse(w http.ResponseWriter) error
}

type HandleDirectoryCallback303ResponseHeaders struct {
	Location  string
	SetCookie string
}

type HandleDirectoryCallback303Response struct {
	Headers HandleDirectoryCallback303ResponseHeaders
}

func (response HandleDirectoryCallback303Response) VisitHandleDirectoryCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(303)
	return nil
}

type LogoutUserRequestObject struct {
}

type LogoutUserResponseObject interface {
	VisitLogoutUserResponse(w http.ResponseWriter) error
}

type LogoutUser303ResponseHeaders struct {
	Location  string
	SetCookie string
}

type LogoutUser303Response struct {
	Headers LogoutUser303ResponseHeaders
}

func (response LogoutUser303Response) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(303)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMockUsersRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	Params GetMockUsersParams
}

type GetMockUsersResponseObject interface {
	VisitGetMockUsersResponse(w http.ResponseWriter) error
}

type GetMockUsers200JSONResponse MockUsersResponse

func (response GetMockUsers200JSONResponse) VisitGetMockUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateMockUserRequestObject struct {
	OrgID OrganizationID `json:"orgId"`
	Body  *CreateMockUserJSONRequestBody
}

type CreateMockUserResponseObject interface {
	VisitCreateMockUserResponse(w http.ResponseWriter) error
}

type CreateMockUser201JSONResponse MockUserResponse

func (response CreateMockUser201JSONResponse) VisitCreateMockUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMockUserRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	UserID MockUserID     `json:"userId"`
}

type DeleteMockUserResponseObject interface {
	VisitDeleteMockUserResponse(w http.ResponseWriter) error
}

type DeleteMockUser204Response struct {
}

func (response DeleteMockUser204Response) VisitDeleteMockUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateMockUserRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	UserID MockUserID     `json:"userId"`
	Body   *UpdateMockUserJSONRequestBody
}

type UpdateMockUserResponseObject interface {
	VisitUpdateMockUserResponse(w http.ResponseWriter) error
}

type UpdateMockUser200JSONResponse MockUserResponse

func (response UpdateMockUser200JSONResponse) VisitUpdateMockUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountsRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	UserID MockUserID     `json:"userId"`
	Params GetAccountsParams
}

type GetAccountsResponseObject interface {
	VisitGetAccountsResponse(w http.ResponseWriter) error
}

type GetAccounts200JSONResponse AccountsResponse

func (response GetAccounts200JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccountRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	UserID MockUserID     `json:"userId"`
	Body   *CreateAccountJSONRequestBody
}

type CreateAccountResponseObject interface {
	VisitCreateAccountResponse(w http.ResponseWriter) error
}

type CreateAccount201JSONResponse AccountResponse

func (response CreateAccount201JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountRequestObject struct {
	OrgID     OrganizationID `json:"orgId"`
	UserID    MockUserID     `json:"userId"`
	AccountID AccountID      `json:"accountId"`
}

type DeleteAccountResponseObject interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount204Response struct {
}

func (response DeleteAccount204Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateAccountRequestObject struct {
	OrgID     OrganizationID `json:"orgId"`
	UserID    MockUserID     `json:"userId"`
	AccountID AccountID      `json:"accountId"`
	Body      *UpdateAccountJSONRequestBody
}

type UpdateAccountResponseObject interface {
	VisitUpdateAccountResponse(w http.ResponseWriter) error
}

type UpdateAccount201JSONResponse AccountResponse

func (response UpdateAccount201JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetConsentsRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	UserID MockUserID     `json:"userId"`
	Params GetConsentsParams
}

type GetConsentsResponseObject interface {
	VisitGetConsentsResponse(w http.ResponseWriter) error
}

type GetConsents200JSONResponse ConsentsResponse

func (response GetConsents200JSONResponse) VisitGetConsentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcesRequestObject struct {
	OrgID  OrganizationID `json:"orgId"`
	UserID MockUserID     `json:"userId"`
	Params GetResourcesParams
}

type GetResourcesResponseObject interface {
	VisitGetResourcesResponse(w http.ResponseWriter) error
}

type GetResources200JSONResponse ResourcesResponse

func (response GetResources200JSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchResourceStatusRequestObject struct {
	OrgID      OrganizationID     `json:"orgId"`
	UserID     MockUserID         `json:"userId"`
	ResourceID string             `json:"resourceId"`
	ConsentID  openapi_types.UUID `json:"consentId"`
	Params     PatchResourceStatusParams
	Body       *PatchResourceStatusJSONRequestBody
}

type PatchResourceStatusResponseObject interface {
	VisitPatchResourceStatusResponse(w http.ResponseWriter) error
}

type PatchResourceStatus204Response struct {
}

func (response PatchResourceStatus204Response) VisitPatchResourceStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the authentication URL for the directory service
	// (GET /api/directory/auth-url)
	GetDirectoryAuthURL(ctx context.Context, request GetDirectoryAuthURLRequestObject) (GetDirectoryAuthURLResponseObject, error)

	// (GET /api/directory/callback)
	HandleDirectoryCallback(ctx context.Context, request HandleDirectoryCallbackRequestObject) (HandleDirectoryCallbackResponseObject, error)
	// Logout the current user
	// (POST /api/logout)
	LogoutUser(ctx context.Context, request LogoutUserRequestObject) (LogoutUserResponseObject, error)
	// Get current user information
	// (GET /api/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// List mock users in an organization
	// (GET /api/orgs/{orgId}/users)
	GetMockUsers(ctx context.Context, request GetMockUsersRequestObject) (GetMockUsersResponseObject, error)
	// Create a new user in an organization
	// (POST /api/orgs/{orgId}/users)
	CreateMockUser(ctx context.Context, request CreateMockUserRequestObject) (CreateMockUserResponseObject, error)
	// Delete a mock user in an organization
	// (DELETE /api/orgs/{orgId}/users/{userId})
	DeleteMockUser(ctx context.Context, request DeleteMockUserRequestObject) (DeleteMockUserResponseObject, error)
	// Update a user in an organization
	// (PUT /api/orgs/{orgId}/users/{userId})
	UpdateMockUser(ctx context.Context, request UpdateMockUserRequestObject) (UpdateMockUserResponseObject, error)
	// Get accounts of a user
	// (GET /api/orgs/{orgId}/users/{userId}/accounts)
	GetAccounts(ctx context.Context, request GetAccountsRequestObject) (GetAccountsResponseObject, error)
	// Create a new account
	// (POST /api/orgs/{orgId}/users/{userId}/accounts)
	CreateAccount(ctx context.Context, request CreateAccountRequestObject) (CreateAccountResponseObject, error)
	// Delete an account
	// (DELETE /api/orgs/{orgId}/users/{userId}/accounts/{accountId})
	DeleteAccount(ctx context.Context, request DeleteAccountRequestObject) (DeleteAccountResponseObject, error)
	// Update an account
	// (PUT /api/orgs/{orgId}/users/{userId}/accounts/{accountId})
	UpdateAccount(ctx context.Context, request UpdateAccountRequestObject) (UpdateAccountResponseObject, error)
	// Get consents of a user
	// (GET /api/orgs/{orgId}/users/{userId}/consents)
	GetConsents(ctx context.Context, request GetConsentsRequestObject) (GetConsentsResponseObject, error)
	// Get shared resources of a user
	// (GET /api/orgs/{orgId}/users/{userId}/resources)
	GetResources(ctx context.Context, request GetResourcesRequestObject) (GetResourcesResponseObject, error)
	// Update status of a shared resource
	// (PATCH /api/orgs/{orgId}/users/{userId}/resources/{resourceId}/consents/{consentId})
	PatchResourceStatus(ctx context.Context, request PatchResourceStatusRequestObject) (PatchResourceStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDirectoryAuthURL operation middleware
func (sh *strictHandler) GetDirectoryAuthURL(w http.ResponseWriter, r *http.Request) {
	var request GetDirectoryAuthURLRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDirectoryAuthURL(ctx, request.(GetDirectoryAuthURLRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDirectoryAuthURL")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDirectoryAuthURLResponseObject); ok {
		if err := validResponse.VisitGetDirectoryAuthURLResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HandleDirectoryCallback operation middleware
func (sh *strictHandler) HandleDirectoryCallback(w http.ResponseWriter, r *http.Request, params HandleDirectoryCallbackParams) {
	var request HandleDirectoryCallbackRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HandleDirectoryCallback(ctx, request.(HandleDirectoryCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleDirectoryCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HandleDirectoryCallbackResponseObject); ok {
		if err := validResponse.VisitHandleDirectoryCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogoutUser operation middleware
func (sh *strictHandler) LogoutUser(w http.ResponseWriter, r *http.Request) {
	var request LogoutUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogoutUser(ctx, request.(LogoutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogoutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutUserResponseObject); ok {
		if err := validResponse.VisitLogoutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMockUsers operation middleware
func (sh *strictHandler) GetMockUsers(w http.ResponseWriter, r *http.Request, orgID OrganizationID, params GetMockUsersParams) {
	var request GetMockUsersRequestObject

	request.OrgID = orgID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMockUsers(ctx, request.(GetMockUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMockUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMockUsersResponseObject); ok {
		if err := validResponse.VisitGetMockUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMockUser operation middleware
func (sh *strictHandler) CreateMockUser(w http.ResponseWriter, r *http.Request, orgID OrganizationID) {
	var request CreateMockUserRequestObject

	request.OrgID = orgID

	var body CreateMockUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMockUser(ctx, request.(CreateMockUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMockUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateMockUserResponseObject); ok {
		if err := validResponse.VisitCreateMockUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMockUser operation middleware
func (sh *strictHandler) DeleteMockUser(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID) {
	var request DeleteMockUserRequestObject

	request.OrgID = orgID
	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMockUser(ctx, request.(DeleteMockUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMockUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMockUserResponseObject); ok {
		if err := validResponse.VisitDeleteMockUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMockUser operation middleware
func (sh *strictHandler) UpdateMockUser(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID) {
	var request UpdateMockUserRequestObject

	request.OrgID = orgID
	request.UserID = userID

	var body UpdateMockUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMockUser(ctx, request.(UpdateMockUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMockUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMockUserResponseObject); ok {
		if err := validResponse.VisitUpdateMockUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccounts operation middleware
func (sh *strictHandler) GetAccounts(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, params GetAccountsParams) {
	var request GetAccountsRequestObject

	request.OrgID = orgID
	request.UserID = userID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccounts(ctx, request.(GetAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccounts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAccountsResponseObject); ok {
		if err := validResponse.VisitGetAccountsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAccount operation middleware
func (sh *strictHandler) CreateAccount(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID) {
	var request CreateAccountRequestObject

	request.OrgID = orgID
	request.UserID = userID

	var body CreateAccountJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAccount(ctx, request.(CreateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAccountResponseObject); ok {
		if err := validResponse.VisitCreateAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccount operation middleware
func (sh *strictHandler) DeleteAccount(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, accountID AccountID) {
	var request DeleteAccountRequestObject

	request.OrgID = orgID
	request.UserID = userID
	request.AccountID = accountID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccount(ctx, request.(DeleteAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAccountResponseObject); ok {
		if err := validResponse.VisitDeleteAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAccount operation middleware
func (sh *strictHandler) UpdateAccount(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, accountID AccountID) {
	var request UpdateAccountRequestObject

	request.OrgID = orgID
	request.UserID = userID
	request.AccountID = accountID

	var body UpdateAccountJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAccount(ctx, request.(UpdateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAccountResponseObject); ok {
		if err := validResponse.VisitUpdateAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConsents operation middleware
func (sh *strictHandler) GetConsents(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, params GetConsentsParams) {
	var request GetConsentsRequestObject

	request.OrgID = orgID
	request.UserID = userID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsents(ctx, request.(GetConsentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsentsResponseObject); ok {
		if err := validResponse.VisitGetConsentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResources operation middleware
func (sh *strictHandler) GetResources(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, params GetResourcesParams) {
	var request GetResourcesRequestObject

	request.OrgID = orgID
	request.UserID = userID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResources(ctx, request.(GetResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcesResponseObject); ok {
		if err := validResponse.VisitGetResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchResourceStatus operation middleware
func (sh *strictHandler) PatchResourceStatus(w http.ResponseWriter, r *http.Request, orgID OrganizationID, userID MockUserID, resourceID string, consentID openapi_types.UUID, params PatchResourceStatusParams) {
	var request PatchResourceStatusRequestObject

	request.OrgID = orgID
	request.UserID = userID
	request.ResourceID = resourceID
	request.ConsentID = consentID
	request.Params = params

	var body PatchResourceStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchResourceStatus(ctx, request.(PatchResourceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchResourceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchResourceStatusResponseObject); ok {
		if err := validResponse.VisitPatchResourceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
