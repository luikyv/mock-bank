//go:build go1.22

// Package app provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240908200014-2be24b11ae0f DO NOT EDIT.
package app

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// AuthURLResponse defines model for AuthUrlResponse.
type AuthURLResponse struct {
	Data *struct {
		URL *string `json:"url,omitempty"`
	} `json:"data,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data *struct {
		Organizations *[]struct {
			ID   *string `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"organizations,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"data,omitempty"`
}

// HandleDirectoryCallbackParams defines parameters for HandleDirectoryCallback.
type HandleDirectoryCallbackParams struct {
	IDToken string `form:"id_token" json:"id_token"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the authentication URL for the directory service
	// (GET /api/directory/auth-url)
	GetDirectoryAuthURL(w http.ResponseWriter, r *http.Request)

	// (GET /api/directory/callback)
	HandleDirectoryCallback(w http.ResponseWriter, r *http.Request, params HandleDirectoryCallbackParams)
	// Logout the current user
	// (POST /api/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Get current user information
	// (GET /api/me)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDirectoryAuthURL operation middleware
func (siw *ServerInterfaceWrapper) GetDirectoryAuthURL(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDirectoryAuthURL(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HandleDirectoryCallback operation middleware
func (siw *ServerInterfaceWrapper) HandleDirectoryCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleDirectoryCallbackParams

	// ------------- Required query parameter "id_token" -------------

	if paramValue := r.URL.Query().Get("id_token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id_token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id_token", r.URL.Query(), &params.IDToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id_token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HandleDirectoryCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/directory/auth-url", wrapper.GetDirectoryAuthURL)
	m.HandleFunc("GET "+options.BaseURL+"/api/directory/callback", wrapper.HandleDirectoryCallback)
	m.HandleFunc("POST "+options.BaseURL+"/api/logout", wrapper.LogoutUser)
	m.HandleFunc("GET "+options.BaseURL+"/api/me", wrapper.GetCurrentUser)

	return m
}

type GetDirectoryAuthURLRequestObject struct {
}

type GetDirectoryAuthURLResponseObject interface {
	VisitGetDirectoryAuthURLResponse(w http.ResponseWriter) error
}

type GetDirectoryAuthURL200JSONResponse AuthURLResponse

func (response GetDirectoryAuthURL200JSONResponse) VisitGetDirectoryAuthURLResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HandleDirectoryCallbackRequestObject struct {
	Params HandleDirectoryCallbackParams
}

type HandleDirectoryCallbackResponseObject interface {
	VisitHandleDirectoryCallbackResponse(w http.ResponseWriter) error
}

type HandleDirectoryCallback303Response struct {
}

func (response HandleDirectoryCallback303Response) VisitHandleDirectoryCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(303)
	return nil
}

type LogoutUserRequestObject struct {
}

type LogoutUserResponseObject interface {
	VisitLogoutUserResponse(w http.ResponseWriter) error
}

type LogoutUser303Response struct {
}

func (response LogoutUser303Response) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(303)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the authentication URL for the directory service
	// (GET /api/directory/auth-url)
	GetDirectoryAuthURL(ctx context.Context, request GetDirectoryAuthURLRequestObject) (GetDirectoryAuthURLResponseObject, error)

	// (GET /api/directory/callback)
	HandleDirectoryCallback(ctx context.Context, request HandleDirectoryCallbackRequestObject) (HandleDirectoryCallbackResponseObject, error)
	// Logout the current user
	// (POST /api/logout)
	LogoutUser(ctx context.Context, request LogoutUserRequestObject) (LogoutUserResponseObject, error)
	// Get current user information
	// (GET /api/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDirectoryAuthURL operation middleware
func (sh *strictHandler) GetDirectoryAuthURL(w http.ResponseWriter, r *http.Request) {
	var request GetDirectoryAuthURLRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDirectoryAuthURL(ctx, request.(GetDirectoryAuthURLRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDirectoryAuthURL")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDirectoryAuthURLResponseObject); ok {
		if err := validResponse.VisitGetDirectoryAuthURLResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HandleDirectoryCallback operation middleware
func (sh *strictHandler) HandleDirectoryCallback(w http.ResponseWriter, r *http.Request, params HandleDirectoryCallbackParams) {
	var request HandleDirectoryCallbackRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HandleDirectoryCallback(ctx, request.(HandleDirectoryCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleDirectoryCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HandleDirectoryCallbackResponseObject); ok {
		if err := validResponse.VisitHandleDirectoryCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogoutUser operation middleware
func (sh *strictHandler) LogoutUser(w http.ResponseWriter, r *http.Request) {
	var request LogoutUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogoutUser(ctx, request.(LogoutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogoutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutUserResponseObject); ok {
		if err := validResponse.VisitLogoutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUQW/bPAz9KwK/7+jG3nLzrc3QbUCHARl6GoaBlRlbjS2pFF0gC/LfB8lxmiYO0GE7",
	"WaGeyMfHx2xBu847S1YClFsIuqEO0/G6l+ae2yUF72ygGPLsPLEYSoAKBc+jPbfxIxtPUEIQNraG3S4b",
	"I+7hkbRMRTK4D8R/Ws9xjdb8QjHOpoAR6sI5zlQTtDKw2NGb+B4CyIyb+LsPxG9+PhHZZWDsyqXWKGg2",
	"PvYAJdzc3qqVYyUNqS9Or2/QrhV63xqd2pxBBmKkjdkO99feQwbPxGFI8m5WzIpI03my6A2UMJ8Vszlk",
	"4FGapEmO3uSVYdLieJNjL83Vfn41SVLXE6eanyso4SPJhxGd7LG8gwx4P7GU8n1RxI92VsimFEfE88cQ",
	"uY02i6f/mVZQwn/5iw/zvQnzUwcmyV5LFSFkZZ9fRUIRFPquQ94MlJOOeAY8SHwQQAXiZ6MppTjRRmPb",
	"PqBeX9TmE9qqpYM8ixEf5WbsSIgDlN+3YCLvp554A6P9wFQ/xa3JJjWfesNUQSncU3Yk1anHfpxIPy/m",
	"5176RqS+SkOsrtSShn6UuEET76OmY7Otq12fOvMuTHR4l+7jjsLfVm5dbazyWNPJuIYaCaN7ZrKi4pq9",
	"TGRYt0vuXAxvpjj+S2O++p+acOXiiLqKO85dKjPhTX0Zutv9DgAA///US78cngUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
