name: Conformance Suite Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      CS_VERSION: "6111a8e835350b9270a7443a42329628e62f368f"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache Conformance Suite Repository
        uses: actions/cache@v3
        id: cache-cs
        with:
          path: ./conformance-suite
          key: cs-${{ env.CS_VERSION }}

      - name: Set Up Conformance Suite
        if: steps.cache-cs.outputs.cache-hit != 'true'
        run: |
          make setup-cs

      # Only needed if you also want to curl from the host by name.
      - name: Add Host Entries
        run: |
          echo "127.0.0.1 auth.mockbank.local" | sudo tee -a /etc/hosts

      - name: Start containers and wait
        run: |
          set -euxo pipefail

          dump_logs() {
            echo "===== DOCKER COMPOSE SERVICES ====="
            docker compose config --services || true
            echo "===== DOCKER COMPOSE PS ====="
            docker compose ps || true
            echo "===== RECENT LOGS (gateway, mockbank, cs-*) ====="
            docker compose logs --no-color --tail=200 gateway mockbank cs-httpd cs-server cs-mongodb || true
          }
          trap 'echo "[TRAP] Failure detected. Collecting diagnostics..."; dump_logs' ERR

          echo "== Docker/Compose versions =="
          docker version
          docker compose version

          echo "== Bringing up stack =="
          docker compose --profile conformance up -d

          echo "== Services (with current profiles) =="
          docker compose --profile conformance config --services

          echo "== Containers =="
          docker compose --profile conformance ps

          # ---- wait for CS on host ----
          wait_http() {
            url="$1"; timeout_s="${2:-120}"
            start=$(date +%s)
            while :; do
              code="$(curl -sk -o /dev/null -w '%{http_code}' "$url" || true)"
              [ "$code" = "200" ] && echo "OK: $url" && return 0
              [ $(( $(date +%s) - start )) -ge "$timeout_s" ] && echo "TIMEOUT ($timeout_s s) for $url (last code: ${code:-000})" && return 1
              echo "Waiting for $url (last code: ${code:-000}). Sleeping 2s"
              sleep 2
            done
          }

          echo "== Wait for Conformance Suite on host (https://localhost:8443) =="
          wait_http "https://localhost:8443/api/runner/available" 120

          echo "== (Optional) Host OIDC check (may be 502 while backend boots) =="
          curl -sk -i https://auth.mockbank.local/.well-known/openid-configuration -w "\nHTTP %{http_code}\n" || true

          # ---- get compose network name ----
          compose_net="$(docker compose ps -q | head -n1 | xargs -r docker inspect -f '{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}' | xargs -r docker network inspect -f '{{.Name}}' || true)"
          echo "== Compose network: ${compose_net:-<unknown>} =="

          # ---- wait for Mock Bank via gateway inside the network ----
          # Keep Host/SNI = auth.mockbank.local but TCP-connect to gateway:443.
          echo "== Wait for Mock Bank inside the compose network (via gateway) =="
          start=$(date +%s)
          while :; do
            code="$(docker run --rm --network "$compose_net" curlimages/curl:8.10.1 \
              -sk --connect-to auth.mockbank.local:443:gateway:443 \
              -o /dev/null -w '%{http_code}' \
              https://auth.mockbank.local/.well-known/openid-configuration || true)"

            if [ "$code" = "200" ]; then
              echo "Mock bank is ready (inside network)"
              break
            fi

            if [ $(( $(date +%s) - start )) -ge 300 ]; then
              echo "TIMEOUT (300s) waiting for mock bank (last code: ${code:-000})"
              exit 1
            fi

            echo "Mock bank not ready yet (last code: ${code:-000}). Sleeping 2s"
            sleep 2
          done

      - name: Run Tests
        run: |
          set -euxo pipefail
          make cs-tests

      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mockbank
          path: conformance-suite/results/*.zip

  all-tests-succeeded:
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()
    steps:
      - name: Test plans passed
        run: echo "All test plans passed successfully!"
