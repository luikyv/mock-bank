worker_processes auto;

events {
  worker_connections 1024;
}

http {

    # Use Docker's internal DNS resolver.
    resolver 127.0.0.11 valid=30s;

    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    # Default server.
    server {
        listen 443 ssl;
        server_name mockbank.local auth.mockbank.local;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location / {
            # Make sure the client certificate is not sent to the non mTLS endpoints.
            proxy_set_header X-Client-Cert "";

            # Use dynamic backend selection.
            set $backend "mockbank";
            proxy_pass http://$backend:80;

            proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            error_page 502 503 504 = @fallback;
        }

        location @fallback {
            proxy_set_header X-Client-Cert "";
            proxy_pass http://host.docker.internal:80;
        }
    }

    # MTLS server.
    server {
        listen 443 ssl;
        server_name matls-auth.mockbank.local matls-api.mockbank.local;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        ssl_client_certificate /etc/nginx/ssl/client_ca.crt;
        ssl_verify_client optional;

        location / {
            if ($ssl_client_verify != "SUCCESS") {
                add_header Content-Type text/plain;
                return 403 'invalid client certificate';
            }

            proxy_set_header X-Client-Cert $ssl_client_escaped_cert;

            # Use dynamic backend selection.
            set $backend "mockbank";
            proxy_pass http://$backend:80;

            proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            error_page 502 503 504 = @fallback;
        }

        location @fallback {
            proxy_set_header X-Client-Cert $ssl_client_escaped_cert;
            proxy_pass http://host.docker.internal:80;
        }
    }

    server {
        listen 443 ssl;
        server_name directory;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location /.well-known/openid-configuration {
            default_type application/json;
            return 200 '{
                "token_endpoint": "https://directory/token"
            }';
        }

        location /token {
            default_type application/json;
            return 200 '{
                "access_token": "random_token",
                "token_type": "bearer"
            }';
        }

        # Serve the software statement.
        location /organisations {
            default_type application/jwt;
            return 200 'ewogICJhbGciOiAibm9uZSIsCiAgInR5cCI6ICJKV1QiCn0.eyJzb2Z0d2FyZV9yZWRpcmVjdF91cmlzIjpbImh0dHBzOi8vbG9jYWxob3N0LmVtb2JpeC5jby51azo4NDQzL3Rlc3QvYS9tb2NraW4vY2FsbGJhY2siXSwic29mdHdhcmVfYXBpX3dlYmhvb2tfdXJpcyI6WyJodHRwczovL2xvY2FsaG9zdC5lbW9iaXguY28udWs6ODQ0My90ZXN0LW10bHMvYS9tb2NraW4iXSwic29mdHdhcmVfandrc191cmkiOiJodHRwczovL2RpcmVjdG9yeS9hcHBsaWNhdGlvbi5qd2tzIn0.';
        }

        # Serve the client public JWKS.
        location /application.jwks {
            alias /etc/nginx/mocks/client_one_pub.jwks;
            default_type application/json;
        }
    }

    # Serve participant information over HTTP because the Conformance Suite
    # does not accept self-signed certificates.
    server {
        listen 80;
        server_name directory;

        location /participants {
            alias /etc/nginx/mocks/participants.json;
            default_type application/json;
        }
    }

}
